//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

@class CLSilo, NSObject;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Accel;

struct AccelBatch;

struct AccelGesture;

struct AccelGps;

struct AccelOscarEmu;

struct AccessPoint {
    struct CLMacAddress _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    int _field3;
    int _field4;
    int _field5;
    double _field6;
    double _field7;
    _Bool _field8;
};

struct AccessoryAccel;

struct AccessoryAccelConfig;

struct AccessoryConfig;

struct AccessoryGyro;

struct AccessoryProx;

struct AccessoryProxSensorDrop;

struct AccessoryProxTempComp;

struct AccessoryProximityConfig;

struct AccessoryWake;

struct AccessoryWakeDebug;

struct AirpodEvent;

struct Assertion;

struct AssociatedAp {
    struct optional<CLWifiService_Type::AccessPoint> _field1;
    _Bool _field2;
    _Bool _field3;
};

struct AssociationState {
    struct optional<CLWifiService_Type::AccessPoint> _field1;
};

struct BTConnection;

struct BTDiscoveryAgentImpl;

struct BTLocalDeviceImpl;

struct BTSessionImpl;

struct BasebandSpeed;

struct BasicMutex {
    CDUnknownFunctionPointerType *_vptr$Mutex;
    struct MutexInfo *info;
};

struct Battery {
    double level;
    _Bool charged;
    _Bool connected;
    int chargerType;
    _Bool wasConnected;
    int chargerFamily;
};

struct BinaryData {
    CDUnknownFunctionPointerType *_field1;
    double _field2;
    unsigned short _field3;
};

struct BodyMetrics;

struct Bounds {
    float _field1;
    float _field2;
};

struct BraveHeartAccel;

struct BraveHeartDeviceMotion;

struct BraveHeartNatalieData;

struct BraveHeartVO2MaxInput;

struct BraveHeartWorkoutEvent;

struct BundleIdFeatures;

struct CLATVAirplayDeviceInternal {
    time_point_406bde99 _field1;
    int _field2;
    struct uuid _field3;
    unsigned int _field4;
    int _field5;
};

struct CLAccelerometerPace {
    double calibrated;
    double lowerBound;
    double upperBound;
};

struct CLAccessoryChinaShiftedDataProcessor {
    struct CLDistanceCalc _field1;
    struct unordered_map<CLLocationType, CLChinaShiftedDataStructure, std::__1::hash<CLLocationType>, std::__1::equal_to<CLLocationType>, std::__1::allocator<std::__1::pair<const CLLocationType, CLChinaShiftedDataStructure>>> _field2;
};

struct CLAccessoryHeadingCorrector {
    int _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CLAccessoryLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    struct CLDaemonLocation _field15;
    struct CLDaemonLocationPrivate _field16;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field17;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field18;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field19;
    struct __CFRunLoopTimer *_field20;
    struct CLAccessoryHeadingCorrector _field21;
    struct CLFileUpdate _field22;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field23;
    struct CLNmeaScreener _field24;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field25;
    struct unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client>> _field26;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field27;
    id _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    struct GgaRmcInfo _field32;
    struct shared_ptr<CLMapGeometry> _field33;
    struct CLAccessoryChinaShiftedDataProcessor _field34;
    double _field35;
    double _field36;
    double _field37;
    int _field38;
    _Bool _field39;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field40;
    _Bool _field41;
    _Bool _field42;
    _Bool _field43;
    _Bool _field44;
    _Bool _field45;
};

struct CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<CLSignificantElevation, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> _field1;
    struct shared_ptr<CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy>> _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>;

struct CLActivityAlarmConcentrator {
    struct BasicMutex _field1;
    struct set<CMActivityAlarmLocal *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarmLocal *>> _field2[17];
};

struct CLActivityDbExportAdapter {
    _Bool _field1;
    id _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
};

struct CLActivityLogger {
    id _field1;
    id _field2;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field3;
    struct CLActivityLoggerWriter _field4;
    struct CLActivityDbExportAdapter _field5;
};

struct CLActivityLoggerPolicy;

struct CLActivityLoggerWriter {
    id _field1;
    id _field2;
    struct shared_ptr<CLActivityLoggerPolicy> _field3;
    struct BasicMutex _field4;
};

struct CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy>;

struct CLAggregateDictionary;

struct CLAggregationRule;

struct CLAppMonitor {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    id _field11;
    struct NotificationData {
        int _field1;
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    } _field12;
};

struct CLApplicationLifecycleManager {
    id _field1;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field2;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field3;
    struct list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch>> _field4;
    _Bool _field5;
    struct CLCallbackDropManager _field6;
    id _field7;
    id _field8;
};

struct CLAutopauseProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
};

struct CLBTA {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
};

struct CLBTDialogDeviceInfo {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    int _field3;
};

struct CLBTHandsfreeWhitelist {
    CDUnknownFunctionPointerType *_field1;
    struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> _field2;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field3;
    struct map<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>>> _field4;
    int _field5;
};

struct CLBTLEBeaconProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
};

struct CLBTLEBeaconProviderMock {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    struct list<CLBTLEBeaconProvider_Type::ProximityScanEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityScanEvent>> _field13;
    struct list<CLBTLEBeaconProvider_Type::ProximityZoneEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityZoneEvent>> _field14;
    struct list<CLBTLEBeaconProviderMock::ScanRequest, std::__1::allocator<CLBTLEBeaconProviderMock::ScanRequest>> _field15;
    id _field16;
    struct map<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>>> _field17;
    struct __CFRunLoopSource *_field18;
};

struct CLBTLEFenceManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
};

struct CLBTLERangeManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
};

struct CLBatchedLocations;

struct CLBeaconFenceAuthorizationManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client>> _field11;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field12;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field13;
    struct CLBeaconFenceDatabase _field14;
    int _field15;
    id _field16;
};

struct CLBeaconFenceDatabase {
    struct CLSqliteDatabase _field1;
};

struct CLBluetoothService {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct __CFRunLoopSource *_field11;
    _Bool _field12;
    struct BTSessionImpl *_field13;
    struct BTDiscoveryAgentImpl *_field14;
    struct BTLocalDeviceImpl *_field15;
    struct map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device>>> _field16;
    struct map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device>>> _field17;
};

struct CLBodyMetrics {
    int gender;
    float heightM;
    float weightKG;
    float vo2max;
    float age;
    float hrmin;
    float hrmax;
    float hronset;
    float pal;
    int condition;
    float runVo2max;
};

struct CLBundleLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    struct __CLClient *_field15;
    struct __CLClient *_field16;
    struct __CLClient *_field17;
    struct __CFString *_field18;
    struct __CFString *_field19;
    id _field20;
    _Bool _field21;
};

struct CLCMNotificationStateRecord {
    id _field1;
};

struct CLCachedLocationController {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct BasicMutex _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    id _field5;
    id _field6;
    id _field7;
    struct map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>>> _field8;
    struct map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>>> _field9;
    int _field10;
    _Bool _field11;
    struct CLServiceLocationProvider _field12;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field13;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field14;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field15;
    id _field16;
    int _field17;
    double _field18;
    unsigned int _field19;
    struct CLCachedLocationScanMode _field20;
    id _field21;
    struct CLTransitTilePreloaderExternal _field22;
    struct CLTransitTilePreloader _field23;
    id _field24;
};

struct CLCachedLocationScanMode {
    int _field1;
    struct CLOldWifiScanner _field2;
    struct CLTransitWsbClient _field3;
};

struct CLCallbackDropManager {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<int> _field2;
};

struct CLCalorieActivityFilter {
    struct CLMotionActivity _field1;
    struct CLMotionActivity _field2;
    struct list<CLMotionActivity, std::__1::allocator<CLMotionActivity>> _field3;
};

struct CLCalorieController {
    struct CLNatalieModelChooser _field1;
    struct shared_ptr<CLNatalieModelInput> _field2;
    struct deque<double, std::__1::allocator<double>> _field3;
    struct deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float>>> _field4;
    struct deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float>>> _field5;
    double _field6;
    _Bool _field7;
    struct CLExerciseMinuteEstimator _field8;
    struct CLMotionDefaultsWrite<bool> _field9;
    struct CLMetsFilter<double> _field10;
    struct CLMetsFilter<double> _field11;
};

struct CLCaloriePalEstimator;

struct CLCarrierSettings {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
    _Bool _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
    struct __CFString *_field6;
    struct __CFString *_field7;
    unsigned int _field8;
    unsigned int _field9;
    _Bool _field10;
    struct OtherPrefs _field11;
    struct OtherPrefs _field12;
    struct OtherPrefs _field13;
    CDUnknownFunctionPointerType *_field14;
    struct BasicMutex _field15;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field16;
    id _field17;
    id _field18;
    id _field19;
    struct map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> _field20;
    struct map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field21;
    int _field22;
    _Bool _field23;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field24;
};

struct CLCatherineData {
    int _field1;
    int _field2;
    double _field3;
    double _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    int _field9;
    int _field10;
};

struct CLCatherineHealthKitData {
    double _field1;
    double _field2;
    double _field3;
    int _field4;
};

struct CLCatherineNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLBodyMetrics _field11;
    id _field12;
    _Bool _field13;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field14;
};

struct CLCdmaCellEncryptedLocationDatabase;

struct CLCell {
    _Bool _field1;
    int _field2;
    int _field3;
    struct Cell _field4;
    struct ScdmaCell _field5;
    struct CdmaCell _field6;
    struct LteCell _field7;
};

struct CLCellEncryptedLocationDatabase;

struct CLCellLocationAWD {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    double _field16;
    double _field17;
};

struct CLCellTilesManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    CDUnknownFunctionPointerType *_field11;
    struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> _field12;
    _Bool _field13;
    _Bool _field14;
    double _field15;
    double _field16;
    double _field17;
    _Bool _field18;
    struct CLPersistentTimer *_field19;
    struct CLDaemonLocation _field20;
    double _field21;
    double _field22;
    int _field23;
    _Bool _field24;
    _Bool _field25;
    int _field26;
    int _field27;
    struct unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal>> _field28;
    struct unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader>> _field29;
    struct CLTileDownloaderExternal _field30;
    struct CLTileDownloadPolicy _field31;
    struct CLTilesSetCollection _field32;
    _Bool _field33;
    id _field34;
    _Bool _field35;
};

struct CLClientManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    CDUnknownFunctionPointerType *_field11;
    id _field12;
    struct CLPersistentStore _field13;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field14;
    struct unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client>> _field15;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field16;
    struct unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> _field17;
    struct unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client>> _field18;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field19;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field20;
    struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> _field21;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field22;
    id _field23;
    struct map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *>>> _field24;
    id _field25;
    struct CLInUseAssertionLogic _field26;
    id _field27;
    double _field28;
    id _field29;
    id _field30;
    int _field31;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field32;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field33;
    _Bool _field34;
    struct CLConnectionServer *_field35;
    struct map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *>>> _field36;
    struct map<CLConnection *, CLDaemonGenericClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonGenericClient *>>> _field37;
    struct CLConnection *_field38;
    id _field39;
    int _field40;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field41;
    struct vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification>> _field42;
    _Bool _field43;
    _Bool _field44;
    _Bool _field45;
    _Bool _field46;
    int _field47;
    int _field48;
    struct unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name>> _field49;
    id _field50;
    _Bool _field51;
    id _field52;
    id _field53;
    struct CLDaemonLocation _field54;
    double _field55;
    struct map<std::__1::basic_string<char>, unsigned int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> _field56;
    struct map<std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass>>> _field57;
    struct map<std::__1::basic_string<char>, unsigned int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> _field58;
    struct map<std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass>>> _field59;
    int _field60[8][12];
    id _field61;
    struct map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>>> _field62;
    id _field63;
    id _field64;
    id _field65;
    id _field66;
    id _field67;
};

struct CLCoarseCellTilesManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    CDUnknownFunctionPointerType *_field11;
    struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> _field12;
    _Bool _field13;
    _Bool _field14;
    double _field15;
    _Bool _field16;
    int _field17;
    _Bool _field18;
    _Bool _field19;
    int _field20;
    int _field21;
    struct unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal>> _field22;
    struct unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader>> _field23;
    struct CLTileDownloaderExternal _field24;
    struct CLTileDownloadPolicy _field25;
    struct CLTilesSetCollection _field26;
    _Bool _field27;
    id _field28;
    id _field29;
    _Bool _field30;
};

struct CLCoarseElevationChangeEntry {
    double _field1;
    unsigned int _field2;
    int _field3;
};

struct CLCompanionNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    double _field13;
    id _field14;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field15;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field16;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field17;
    id _field18;
};

struct CLCompassDaemonClientNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct Dispatcher *_field11;
};

struct CLCompassDatabase {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct BasicMutex _field11;
    int _field12;
};

struct CLConnection;

struct CLConnectionServer;

struct CLDaemonClient {
    CDUnknownFunctionPointerType *_field1;
    struct CLClientManager *_field2;
    struct DestructionAwareMutex _field3;
    id _field4;
    id _field5;
    id _field6;
    struct Name _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    unsigned long long _field12;
    int _field13;
    _Bool _field14;
    struct unique_ptr<CLInUseAssertionLogic::Assertion, std::__1::default_delete<CLInUseAssertionLogic::Assertion>> _field15;
    id _field16;
    _Bool _field17;
    _Bool _field18;
    id _field19;
    _Bool _field20;
    struct list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef>> _field21;
    id _field22;
    unsigned long long _field23;
    struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> _field24;
    unsigned int _field25;
    _Bool _field26;
    int _field27;
    int _field28;
    _Bool _field29;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field30;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field31;
    struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> _field32;
    struct unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client>> _field33;
    struct unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client>> _field34;
    struct unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client>> _field35;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field36;
    id _field37;
    id _field38;
    id _field39;
    id _field40;
    id _field41;
    id _field42;
    id _field43;
    struct CLConnection *_field44;
    int _field45;
    double _field46;
    _Bool _field47;
    struct unordered_map<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>>> _field48;
    _Bool _field49;
    _Bool _field50;
    _Bool _field51;
    _Bool _field52;
    void *_field53;
    id _field54;
    id _field55;
    int _field56;
};

struct CLDaemonLocation {
    int suitability;
    CDStruct_2c43369c coordinate;
    double horizontalAccuracy;
    double altitude;
    double verticalAccuracy;
    double speed;
    double speedAccuracy;
    double course;
    double courseAccuracy;
    double timestamp;
    int confidence;
    double lifespan;
    int type;
    CDStruct_2c43369c rawCoordinate;
    double rawCourse;
    int floor;
    unsigned int integrity;
    int referenceFrame;
    int rawReferenceFrame;
};

struct CLDaemonLocationPrivate {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    float _field6;
    float _field7;
    float _field8;
    _Bool _field9;
    int _field10;
    CDStruct_2c43369c _field11;
    double _field12;
    int _field13;
    int _field14;
    _Bool _field15;
    struct {
        double _field1;
        double _field2;
        _Bool _field3;
        _Bool _field4;
    } _field16;
    CDStruct_2c43369c _field17;
    int _field18;
    float _field19;
    CDStruct_2c43369c _field20;
    double _field21;
    double _field22;
    int _field23;
    _Bool _field24;
    double _field25;
    double _field26;
    double _field27;
    double _field28;
    double _field29;
    double _field30;
    _Bool _field31;
    struct SatelliteReport _field32;
    int _field33;
};

struct CLDaemonStatus {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    id _field11;
    unsigned int _field12;
    unsigned int _field13;
    struct IONotificationPort *_field14;
    struct __CFRunLoopSource *_field15;
    struct IONotificationPort *_field16;
    struct __CFRunLoopSource *_field17;
    struct __SCNetworkReachability *_field18;
    struct __SCDynamicStore *_field19;
    struct __CFRunLoopSource *_field20;
    _Bool _field21;
    struct IONotificationPort *_field22;
    unsigned int _field23;
    id _field24;
    struct set<long, std::__1::less<long>, std::__1::allocator<long>> _field25;
    id _field26;
    _Bool _field27;
    id _field28;
    long long _field29;
    double _field30;
    id _field31;
    int _field32;
    int _field33;
    int _field34;
    struct __SCPreferences *_field35;
};

struct CLDarwinNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    int _field17;
    int _field18;
    int _field19;
    int _field20;
    int _field21;
    int _field22;
};

struct CLDataProtectionManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    int _field11;
    id _field12;
};

struct CLDemTileAvailability {
    struct list<unsigned int, std::__1::allocator<unsigned int>> _field1;
    struct LastAvlLookup _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    _Bool _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
};

struct CLDistanceCalc {
    double fM;
    double fN;
    double fRefLatRads;
    double fRefLatDegs;
    double fCosRefLat;
};

struct CLDualModeKalmanFilter {
    CDUnknownFunctionPointerType *_field1;
    struct CLKalmanFilter _field2;
    struct CLKalmanFilter _field3;
    struct CLDistanceCalc _field4;
};

struct CLElevationChangeEntry {
    double _field1;
    double _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    double _field6;
    int _field7;
    int _field8;
    float _field9;
    unsigned char _field10;
    unsigned short _field11;
    float _field12;
};

struct CLElevationGradeEstimator {
    struct CLElevationChangeEntry _field1;
    double _field2;
    float _field3;
    _Bool _field4;
    double _field5;
    struct vector<float, std::__1::allocator<float>> _field6;
    struct deque<float, std::__1::allocator<float>> _field7;
    struct deque<float, std::__1::allocator<float>> _field8;
    struct deque<float, std::__1::allocator<float>> _field9;
};

struct CLElevationRecorderDb;

struct CLExerciseMinuteData {
    int _field1;
    double _field2;
    struct __CFString *_field3;
};

struct CLExerciseMinuteEstimator {
    _Bool _field1;
    _Bool _field2;
    struct function<void (double)> _field3;
    struct CLCoarseElevationChangeEntry _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    struct deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch>> _field9;
    double _field10;
    _Bool _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    struct deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch>> _field18;
    struct deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch>> _field19;
};

struct CLExerciseMinuteRecorderDb;

struct CLExtendedStepCountEntry {
    double startTime;
    struct CLStepCountEntry base;
    struct CLStepCountEntryAddition addition;
};

struct CLFallMetMinuteStats;

struct CLFallNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    int _field11;
    id _field12;
    id _field13;
    id _field14;
    id _field15;
    id _field16;
    id _field17;
    id _field18;
    id _field19;
    id _field20;
    CDUnknownBlockType _field21;
    double _field22;
    id _field23;
    struct CLPowerAssertion _field24;
    id _field25;
    id _field26;
    id _field27;
    id _field28;
    struct CLBodyMetrics _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    double _field35;
    struct ImpactEvent _field36;
    struct ImpactEvent _field37;
    struct ImpactEvent _field38;
    struct FallThresholds {
        struct FallThresholds {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
            float _field5;
            float _field6;
            float _field7;
        } _field1;
    } _field39;
    unsigned long long _field40;
    unsigned long long _field41;
    unsigned long long _field42;
    _Bool _field43;
    _Bool _field44;
    struct WristState {
        double _field1;
        double _field2;
        struct WristState {
            int _field1;
            int _field2;
            int _field3;
            unsigned long long _field4;
            _Bool _field5;
            _Bool _field6;
            _Bool _field7;
        } _field3;
    } _field45;
    int _field46;
    _Bool _field47;
    double _field48;
    double _field49;
    struct Config _field50;
    id _field51;
    struct FallModel _field52;
    struct FallModel _field53;
    struct FallModel _field54;
    struct FallThresholds {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
        float _field5;
        float _field6;
        float _field7;
    } _field55;
    double _field56;
    _Bool _field57;
    id _field58;
    id _field59;
    long long _field60;
    id _field61;
    struct unique_ptr<CLFallMetMinuteStats, std::__1::default_delete<CLFallMetMinuteStats>> _field62;
    struct CLMotionDefaultsWrite<double> _field63;
    _Bool _field64;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field65;
    struct Dispatcher *_field66;
    struct Dispatcher *_field67;
    struct Dispatcher *_field68;
    struct Dispatcher *_field69;
    struct Dispatcher *_field70;
    struct Dispatcher *_field71;
    struct Dispatcher *_field72;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field73;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field74;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field75;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field76;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field77;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field78;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field79;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field80;
};

struct CLFenceAuthorizationManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLFenceDatabase *_field11;
    struct shared_ptr<CLWifiAccessPointLocationService> _field12;
    _Bool _field13;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field14;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field15;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field16;
    _Bool _field17;
    id _field18;
};

struct CLFenceDataDownloadManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client>> _field11;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field12;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field13;
    struct unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client>> _field14;
    struct CLPersistentTimer *_field15;
    struct list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence>> _field16;
    double _field17;
    _Bool _field18;
    _Bool _field19;
    struct Fence _field20;
    _Bool _field21;
};

struct CLFenceDatabase;

struct CLFenceManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLFenceAuthorizationManager _field11;
    struct CLFenceMonitor _field12;
    struct CLFenceDataDownloadManager _field13;
    struct CLDistanceCalc _field14;
    _Bool _field15;
    struct CLPersistentTimer *_field16;
    double _field17;
    double _field18;
    struct map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence>>> _field19;
    struct map<std::__1::basic_string<char>, CLFenceManager::TokenBucket, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLFenceManager::TokenBucket>>> _field20;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field21;
    struct unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client>> _field22;
    struct unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client>> _field23;
    struct unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client>> _field24;
};

struct CLFenceMonitor {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>>> _field11;
    struct set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence>> _field12;
    struct CLDaemonLocation _field13;
    struct CLDaemonLocation _field14;
    struct CLFenceMonitorCell _field15;
    struct CLFenceMonitorWifi _field16;
    int _field17;
    struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> _field18;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field19;
    struct unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client>> _field20;
    struct unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client>> _field21;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field22;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field23;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field24;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field25;
    id _field26;
    id _field27;
    _Bool _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    _Bool _field34;
    struct CLPersistentTimer *_field35;
    struct CLPersistentTimer *_field36;
    struct CLPersistentTimer *_field37;
    double _field38;
    double _field39;
    struct CLPersistentTimer *_field40;
    struct CLPowerAssertion _field41;
    _Bool _field42;
    double _field43;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field44;
    double _field45;
    int _field46;
    int _field47;
    double _field48;
    int _field49;
    int _field50;
    double _field51;
    double _field52;
    _Bool _field53;
    _Bool _field54;
    _Bool _field55;
    double _field56;
    double _field57;
    _Bool _field58;
    _Bool _field59;
    _Bool _field60;
    _Bool _field61;
    double _field62;
    double _field63;
    struct __CFRunLoopTimer *_field64;
    _Bool _field65;
    char _field66;
    char _field67;
    double _field68;
    _Bool _field69;
    struct CLPersistentTimer *_field70;
    double _field71;
    double _field72;
    double _field73;
    double _field74;
    double _field75;
    double _field76;
    double _field77;
    double _field78;
    _Bool _field79;
    id _field80;
    struct CLDistanceCalc _field81;
    id _field82;
    id _field83;
};

struct CLFenceMonitorCell {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLDistanceCalc _field11;
};

struct CLFenceMonitorWifi {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool>>> _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field14;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field15;
    id _field16;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    double _field21;
    struct CLPowerAssertion _field22;
    double _field23;
    unsigned int _field24;
    _Bool _field25;
    struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> _field26;
    double _field27;
    _Bool _field28;
    _Bool _field29;
    struct AssociationState _field30;
    _Bool _field31;
    double _field32;
    double _field33;
    double _field34;
    double _field35;
    double _field36;
    double _field37;
    _Bool _field38;
    struct shared_ptr<CLWifiAccessPointLocationService> _field39;
    struct CLFenceMonitorWifiLogicExternal _field40;
};

struct CLFenceMonitorWifiLogicExternal {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct CLFileDownload;

struct CLFileUpdate {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    id _field3;
    CDUnknownFunctionPointerType _field4;
    void *_field5;
    struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> _field6;
    id _field7;
    int _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    _Bool _field15;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field16;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field17;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field18;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field19;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field20;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field21;
    _Bool _field22;
    _Bool _field23;
};

struct CLFilteredLocationController {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    CDUnknownFunctionPointerType *_field15;
    struct CLDistanceCalc _field16;
    struct unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client>> _field17;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field18;
    struct CLLastConfidentLocation _field19;
    id _field20;
    double _field21;
    double _field22;
    struct map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool>>> _field23;
    struct map<int, CLDaemonLocation, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLDaemonLocation>>> _field24;
    struct {
        double _field1;
        struct __CFDate *_field2;
    } _field25;
};

struct CLFitnessMachineNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct _CLFitnessMachineData _field11;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field12;
};

struct CLFitnessTrackingNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    int _field12;
    _Bool _field13;
};

struct CLGeomagneticModelProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
};

struct CLGizmoOrientation {
    int fWrist;
    int fCrown;
};

struct CLGpsAssistant {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLTimeOffsetFilter _field11;
    _Bool _field12;
    struct CLTimeOffsetFilter _field13;
    struct set<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *>> _field14;
};

struct CLGyroCalibrationDatabase {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
};

struct CLHRToFHRConverter {
    struct Bounds _field1;
};

struct CLHarvestController;

struct CLHarvestControllerExternal {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    id _field4;
    id _field5;
    struct CLHarvestController *_field6;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field7;
    struct set<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification>> _field8;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field9;
    struct set<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification>> _field10;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field11;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field12;
    struct set<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification>> _field13;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field14;
    struct set<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification>> _field15;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field16;
    struct set<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification>> _field17;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field18;
    set_7b7d70f4 _field19;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field20;
    struct CLServiceLocationProvider _field21;
    _Bool _field22;
    struct CLHarvestPassKitRegistrar _field23;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field24;
    _Bool _field25;
    _Bool _field26;
    id _field27;
    id _field28;
    int _field29;
};

struct CLHarvestPassKitRegistrar;

struct CLHealthAssessmentNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    struct ParkinsonsResult _field12;
    struct shared_ptr<CLParkinsonsResultRecorderDb> _field13;
    struct unique_ptr<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>, std::__1::default_delete<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>>> _field14;
    struct deque<CLHealthAssessmentNotifier::MonitoringPeriod, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod>> _field15;
    struct deque<CLHealthAssessmentNotifier::WristStatus, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus>> _field16;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field17;
};

struct CLHomeKitProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    id _field11;
    id _field12;
    id _field13;
    struct vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice>> _field14;
    id _field15;
    id _field16;
};

struct CLICachedLookupWifiAccessPointLocationService;

struct CLICellTilesManagerExternal;

struct CLICoarseCellTilesManagerExternal;

struct CLINetworkLocationProviderExternal;

struct CLITileDownloadSchedulingClientDelegate {
    CDUnknownFunctionPointerType *_field1;
};

struct CLITileSyncManager;

struct CLITilesManager;

struct CLITilesManagerExternal;

struct CLITransitTilePreloaderExternal;

struct CLIWifiTilesManagerExternal;

struct CLInUseAssertionLogic {
    struct unordered_map<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>>> _field1;
    struct Delegate *_field2;
};

struct CLIntegrityMonitor {
    struct CLDistanceCalc _field1;
    struct MotionInfo _field2;
    struct MotionInfo _field3;
    struct deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo>> _field4;
    struct deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field5;
    struct deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field6;
    struct deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field7;
    struct IM_AllSources _field8;
};

struct CLKalmanFilter {
    CDUnknownFunctionPointerType *_field1;
    struct KalmanParameters _field2;
    int _field3;
    int _field4;
    struct KalmanTuningInfo _field5;
    struct KalmanTuningInfo _field6;
    struct KalmanTuningInfo _field7;
    struct KalmanTuningInfo _field8;
    _Bool _field9;
    _Bool _field10;
    struct CLDistanceCalc _field11;
};

struct CLLastConfidentLocation {
    struct unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client>> _field1;
    id _field2;
    struct INotifier *_field3;
    _Bool _field4;
    struct CLDaemonLocation _field5;
    unsigned int _field6;
};

struct CLLocationAwarenessProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    double _field11;
    double _field12;
    struct MonitoringParameters _field13;
    _Bool _field14;
    _Bool _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    struct CLPersistentTimer _field20;
    _Bool _field21;
    _Bool _field22;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field23;
    struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> _field24;
    struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> _field25;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field26;
    _Bool _field27;
    _Bool _field28;
    struct unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion>> _field29;
    id _field30;
    int _field31;
    id _field32;
    id _field33;
};

struct CLLocationController {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    struct CLDistanceCalc _field15;
    char _field16;
    char _field17;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field18;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field19;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field20;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field21;
    struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> _field22;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field23;
    _Bool _field24;
    double _field25;
    int _field26;
    int _field27;
    struct map<CLLocationController::LocationProvider, CLLocationController::ProviderClient, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, CLLocationController::ProviderClient>>> _field28;
    struct map<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>>> _field29;
    struct CLLocationFilterController _field30;
    int _field31;
    int _field32;
    int _field33;
    int _field34;
    int _field35;
    int _field36;
    int _field37;
    id _field38;
    id _field39;
    struct __CFRunLoopTimer *_field40;
    _Bool _field41;
    _Bool _field42;
    _Bool _field43;
    _Bool _field44;
    _Bool _field45;
    _Bool _field46;
    _Bool _field47;
    _Bool _field48;
    int _field49;
    double _field50;
    struct __CFRunLoopSource *_field51;
    struct __CFRunLoopSource *_field52;
    _Bool _field53;
    _Bool _field54;
    _Bool _field55;
    struct unique_ptr<CLRavenController, void (*)(CLRavenController *)> _field56;
    id _field57;
    struct StateTransition _field58[11];
    double _field59;
    struct PropagationDataHistory _field60;
};

struct CLLocationCoordinate2D {
    double _field1;
    double _field2;
};

struct CLLocationFilterController {
    struct CLIntegrityMonitor _field1;
    id _field2;
    struct CLDualModeKalmanFilter _field3;
    struct CLDaemonLocation _field4;
    struct CLMapMatchingEngine *_field5;
    struct unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine>> _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    struct CLVehicleSpeedFilter _field11;
    struct CLDaemonLocation _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    struct CLMapMatcherNetworkUsage _field21;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field22;
    struct unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> _field23;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field24;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field25;
    id _field26;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field27;
};

struct CLLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
};

struct CLLteCellEncryptedLocationDatabase;

struct CLMacAddress {
    unsigned long long _field1;
};

struct CLMapGeometry;

struct CLMapMatcherNetworkUsage {
    int _field1;
    int _field2;
    int _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    int _field8;
};

struct CLMapMatchingEngine;

struct CLMarketRegion;

struct CLMedianFilter<double> {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    struct deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>>> _field3;
    struct multiset<double, std::__1::less<double>, std::__1::allocator<double>> _field4;
};

struct CLMedianFilter<float> {
    CDUnknownFunctionPointerType *_field1;
    unsigned int _field2;
    struct deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>>> _field3;
    struct multiset<float, std::__1::less<float>, std::__1::allocator<float>> _field4;
};

struct CLMetsFilter<double> {
    struct CLMedianFilter<double> _field1;
    double _field2;
};

struct CLMicroLocationBackgroundActivities;

struct CLMicroLocationConfigurationTable;

struct CLMicroLocationDatabase {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct SqliteProperties _field2;
    struct CLSqliteDatabase _field3;
    struct unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable>> _field4;
    struct unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable>> _field5;
    struct unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable>> _field6;
    struct unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable>> _field7;
};

struct CLMicroLocationLocalizer {
    struct ILocalizerDelegate *_field1;
    struct vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds>> _field2;
    struct unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement>> _field3;
    struct CLMicroLocationDatabase *_field4;
};

struct CLMicroLocationLogic {
    CDUnknownFunctionPointerType *_field1;
    struct State _field2;
    struct CLMicroLocationDatabase *_field3;
    struct CLMicroLocationLocalizer _field4;
    struct CLMicroLocationRecorder _field5;
    struct ILogicDelegate *_field6;
};

struct CLMicroLocationMeasurementTable;

struct CLMicroLocationModelTable;

struct CLMicroLocationNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    CDUnknownFunctionPointerType *_field11;
    CDUnknownFunctionPointerType *_field12;
    CDUnknownFunctionPointerType *_field13;
    CDUnknownFunctionPointerType *_field14;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field15;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field16;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field17;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field18;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field19;
    struct unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client>> _field20;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field21;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field22;
    id _field23;
    id _field24;
    id _field25;
    id _field26;
    id _field27;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field28;
    id _field29;
    struct CLMicroLocationDatabase _field30;
    struct CLMicroLocationLogic _field31;
    struct unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities>> _field32;
    id _field33;
    struct unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner>> _field34;
    struct unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner>> _field35;
    struct CLPowerAssertion _field36;
    struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> _field37;
};

struct CLMicroLocationRecorder {
    struct unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction>> _field1;
    struct CLMicroLocationDatabase *_field2;
};

struct CLMicroLocationRecordingEventsTable;

struct CLMicroLocationWiFiChannelHistogram;

struct CLMicroLocationWifiScanStrategy;

struct CLMonitorGps;

struct CLMonitorGpsExternal {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field3;
    struct unique_ptr<CLAccessoryLocationProvider_Type::Client, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client>> _field4;
    id _field5;
    struct CLMonitorGps *_field6;
};

struct CLMotionActivity {
    int type;
    int confidence;
    int mountedState;
    int mountedConfidence;
    _Bool isStanding;
    float tilt;
    double timestamp;
    _Bool isVehicleConnected;
    int exitState;
    double estExitTime;
    double startTime;
    int rawType;
    int rawConfidence;
    struct {
        unsigned int motionHint:1;
        unsigned int gpsHint:1;
        unsigned int basebandHint:1;
        unsigned int wifiHint:1;
        unsigned int btHint:1;
    } vehicularFlags;
    int vehicularConfidence;
    float drivingStowedLikelihoodSum;
    float drivingArmLikelihoodSum;
    float ssLikelihoodSum;
    int workoutDetectionType;
    double workoutDetectionTime;
};

struct CLMotionAlarmDatabase;

struct CLMotionAlarmNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    struct unique_ptr<CLMotionAlarmDatabase, std::__1::default_delete<CLMotionAlarmDatabase>> _field13;
    id _field14;
    id _field15;
    id _field16;
    struct map<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>>> _field17;
    struct unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion>> _field18;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field19;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field20;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field21;
};

struct CLMotionAlarmSubscription {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    struct Name _field4;
    struct Delegate *_field5;
    _Bool _field6;
    _Bool _field7;
    id _field8;
    id _field9;
};

struct CLMotionDefaultsWrite<bool> {
    _Bool _field1;
    _Bool _field2;
};

struct CLMotionDefaultsWrite<double> {
    _Bool _field1;
    double _field2;
};

struct CLMotionDefaultsWrite<float> {
    _Bool _field1;
    float _field2;
};

struct CLMotionDefaultsWrite<int> {
    _Bool _field1;
    int _field2;
};

struct CLMotionDefaultsWrite<unsigned int> {
    _Bool _field1;
    unsigned int _field2;
};

struct CLMotionHintLogger {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field12;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field13;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field14;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field15;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field16;
    struct shared_ptr<CLIoHidInterface::Device> _field17;
};

struct CLMotionLogger {
    id _field1;
    struct CLPowerAssertion _field2;
    struct Dispatcher *_field3;
    struct Dispatcher *_field4;
    struct Dispatcher *_field5;
    struct Dispatcher *_field6;
    struct Dispatcher *_field7;
    struct Dispatcher *_field8;
    struct Dispatcher *_field9;
    struct Dispatcher *_field10;
    struct Dispatcher *_field11;
    struct Dispatcher *_field12;
    struct Dispatcher *_field13;
    struct Dispatcher *_field14;
    struct Dispatcher *_field15;
    struct Dispatcher *_field16;
    struct Dispatcher *_field17;
    struct Dispatcher *_field18;
    struct Dispatcher *_field19;
    struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> _field20;
    struct Dispatcher *_field21;
    struct Dispatcher *_field22;
    struct CLBodyMetrics _field23;
    id _field24;
    struct CLGizmoOrientation _field25;
    struct {
        double _field1;
        double _field2;
        double _field3;
        double _field4;
        double _field5;
        double _field6;
        double _field7;
        double _field8;
    } _field26;
    int _field27;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field28;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field29;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field30;
    struct unique_ptr<CLVehicleConnectionNotifier_Type::Client, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client>> _field31;
    struct CLServiceLocationProvider _field32;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field33;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field34;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field35;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field36;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field37;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field38;
    struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> _field39;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field40;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field41;
    struct Settings _field42;
    id _field43;
    id _field44;
    id _field45;
};

struct CLMotionState {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLMotionActivity _field11;
    unsigned long long _field12;
    unsigned long long _field13;
    int _field14;
    int _field15;
    struct CLWifiServiceClient _field16;
    id _field17;
    id _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    double _field23;
    struct CLLocationCoordinate2D _field24;
    struct CLLocationCoordinate2D _field25;
    double _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    _Bool _field30;
    struct CLMotionActivity _field31;
    struct list<CLMotionActivity, std::__1::allocator<CLMotionActivity>> _field32;
    id _field33;
    int _field34;
};

struct CLMotionStateMediator {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    struct WorkoutSettings _field12;
    struct CLCalorieActivityFilter _field13;
    id _field14;
    id _field15;
    struct CLBodyMetrics _field16;
    struct CLMotionDefaultsWrite<int> _field17;
    struct CLMotionDefaultsWrite<int> _field18;
    struct CLMotionDefaultsWrite<int> _field19;
    struct CLMotionDefaultsWrite<bool> _field20;
    struct CLMotionDefaultsWrite<float> _field21;
    _Bool _field22;
    struct Dispatcher *_field23;
    struct Dispatcher *_field24;
    struct Dispatcher *_field25;
    struct Dispatcher *_field26;
    id _field27;
    struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>>> _field28;
    struct CLWorkoutPredictorSourcesImpl<CLWorkoutPredictorSourceFromNotifier<CLElevationChangeEntry>, CLWorkoutPredictorSourceFromNotifier<CLCatherineData>, CLWorkoutPredictorSourceFromNotifier<CLOdometerEntry>, CLWorkoutPredictorSourceFromNotifier<CLStepCountEntry>, CLWorkoutPredictorSourceFromNotifier<CLExtendedStepCountEntry>, CLWorkoutPredictorExternallyActivatedSource<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>, CLWorkoutPredictorSourceBuffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>, CLWorkoutPredictorExternallyActivatedSource<CLWorkoutPredictorTurnDetector::Turn>, CLWorkoutPredictorSourceFromNotifier<CLSwimEntry>, CLWorkoutPredictorSourceBuffer<CLWorkoutPredictorWatchPressure>, CLWorkoutPredictorSourceBuffer<CLExerciseMinuteData>> _field29;
    struct CLWorkoutPredictor _field30;
    struct CLPowerAssertion _field31;
    struct unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary>> _field32;
    _Bool _field33;
    _Bool _field34;
    struct CLWorkoutAlertStatistics _field35;
    double _field36;
    struct WorkoutEvent _field37;
    struct WorkoutEvent _field38;
    struct WorkoutEvent _field39;
    struct CLDaemonLocation _field40;
    id _field41;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field42;
    struct unique_ptr<CLSkiNotifier_Type::Client, std::__1::default_delete<CLSkiNotifier_Type::Client>> _field43;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field44;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field45;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field46;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field47;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field48;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field49;
    id _field50;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field51;
    struct CLServiceLocationProvider _field52;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field53;
};

struct CLMotionStateObserver {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLWorkoutUpdate _field11;
    id _field12;
    _Bool _field13;
    _Bool _field14;
    struct CLMotionStateUpdate _field15;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field16;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field17;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field18;
};

struct CLMotionStateUpdate {
    double _field1;
    int _field2;
    int _field3;
};

struct CLMotionSyncStore {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    id _field12;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field13;
};

struct CLNatalieData {
    int _field1;
    struct __CFString *_field2;
    double _field3;
    int _field4;
    _Bool _field5;
    _Bool _field6;
    int _field7;
    double _field8;
    double _field9;
    long long _field10;
    long long _field11;
    double _field12;
    double _field13;
    int _field14;
    double _field15;
    double _field16;
    _Bool _field17;
    double _field18;
    double _field19;
    _Bool _field20;
    float _field21;
};

struct CLNatalieFeatures {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    int _field8;
    _Bool _field9;
};

struct CLNatalieInput<CLExtendedStepCountEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
};

struct CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
};

struct CLNatalieInput<CLOdometerEntry>;

struct CLNatalieModelChooser {
    struct shared_ptr<CLNatalieModelInterface> _field1;
    struct shared_ptr<CLNatalieModelInterface> _field2;
    struct shared_ptr<CLNatalieModelInterface> _field3;
    struct shared_ptr<CLNatalieModelInterface> _field4;
    struct shared_ptr<CLNatalieModelInterface> _field5;
    struct shared_ptr<CLNatalieModelInterface> _field6;
    struct shared_ptr<CLNatalieModelInterface> _field7;
    struct shared_ptr<CLNatalieModelInterface> _field8;
    struct shared_ptr<CLNatalieModelInterface> _field9;
    struct shared_ptr<CLNatalieModelInterface> _field10;
    struct shared_ptr<CLNatalieModelInterface> _field11;
    struct shared_ptr<CLNatalieModelInterface> _field12;
    struct shared_ptr<CLNatalieModelInterface> _field13;
    struct shared_ptr<CLNatalieModelInterface> _field14;
    struct shared_ptr<CLNatalieModelInterface> _field15;
    struct shared_ptr<CLNatalieModelInterface> _field16;
    struct shared_ptr<CLNatalieModelInterface> _field17;
    struct shared_ptr<CLNatalieModelInterface> _field18;
};

struct CLNatalieModelInput;

struct CLNatalieModelInterface;

struct CLNatalieSourceFromNotifier<CLCatherineData> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLCatherineData, std::__1::allocator<CLCatherineData>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field14;
};

struct CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    id _field15;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field16;
};

struct CLNatalieSourceFromNotifier<CLElevationChangeEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    struct CLElevationGradeEstimator _field13;
    id _field14;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field15;
};

struct CLNatalieSourceFromNotifier<CLOdometerEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field14;
};

struct CLNatalieSourceFromNotifier<CLStepCountEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field14;
};

struct CLNatalieSourceFromNotifier<CLSwimEntry> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client>> _field14;
};

struct CLNatalieSourceFromNotifier<_CLFitnessMachineData> {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    double _field3;
    struct deque<_CLFitnessMachineData, std::__1::allocator<_CLFitnessMachineData>> _field4;
    double _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    _Bool _field12;
    id _field13;
    struct unique_ptr<CLFitnessMachineNotifier_Type::Client, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client>> _field14;
};

struct CLNatalimetryNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct shared_ptr<CLNatalimetryRecorderDb> _field11;
    struct CLActivityAggregator<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy> _field12;
    struct shared_ptr<CLExerciseMinuteRecorderDb> _field13;
    struct CLActivityAggregator<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy> _field14;
    struct CLMotionDefaultsWrite<bool> _field15;
    id _field16;
    struct unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore>> _field17;
    union NotificationData {
        struct CLNatalieData _field1;
        _Bool _field2;
        struct CLBodyMetrics _field3;
        float _field4;
        struct CLExerciseMinuteData _field5;
    } _field18;
    _Bool _field19;
    _Bool _field20;
    id _field21;
    _Bool _field22;
    struct CLMotionDefaultsWrite<bool> _field23;
    int _field24;
    int _field25;
    struct Dispatcher *_field26;
    _Bool _field27;
    struct PostWorkoutSettings _field28;
    struct CLNatalieSourceFromNotifier<CLOdometerEntry> _field29;
    struct CLNatalieSourceFromNotifier<CLElevationChangeEntry> _field30;
    struct CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry> _field31;
    struct CLNatalieSourceFromNotifier<CLCatherineData> _field32;
    struct CLNatalieSourceFromNotifier<CLStepCountEntry> _field33;
    struct CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity> _field34;
    struct CLNatalieSourceFromNotifier<CLSwimEntry> _field35;
    struct CLNatalieSourceFromNotifier<_CLFitnessMachineData> _field36;
    struct shared_ptr<CLNatalieModelInput> _field37;
    struct CLCalorieController _field38;
    int _field39;
    double _field40;
    struct CLCatherineData _field41;
    double _field42;
    _Bool _field43;
    struct CLCaloriePalEstimator _field44;
    struct shared_ptr<CLVO2MaxInputCache> _field45;
    struct CLVO2MaxEstimator _field46;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field47;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field48;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field49;
    _Bool _field50;
};

struct CLNatalimetryRecorderDb;

struct CLNetworkLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal>> _field11;
    _Bool _field12;
    struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> _field13;
    struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> _field14;
    struct map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double>>> _field15;
    struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> _field16;
    struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> _field17;
    struct map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double>>> _field18;
    struct unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase>> _field19;
    struct unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase>> _field20;
    struct map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double>>> _field21;
    struct unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase>> _field22;
    struct unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase>> _field23;
    struct map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double>>> _field24;
    int _field25;
    double _field26;
    double _field27;
    double _field28;
    int _field29;
    int _field30;
    struct map<int, std::__1::vector<int, std::__1::allocator<int>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::vector<int, std::__1::allocator<int>>>>> _field31;
    struct map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double>>> _field32;
    _Bool _field33;
    struct CLNetworkLocationRequester *_field34;
    _Bool _field35;
    _Bool _field36;
    _Bool _field37;
    _Bool _field38;
    struct CLPowerAssertion _field39;
    struct __CFRunLoopTimer *_field40;
    int _field41;
    _Bool _field42;
    struct CLPersistentTimer *_field43;
    double _field44;
    double _field45;
    double _field46;
    int _field47;
    int _field48;
    int _field49;
    int _field50;
    int _field51;
    struct set<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *>> _field52;
    int _field53;
    struct CLDistanceCalc _field54;
    _Bool _field55;
    _Bool _field56;
    struct shared_ptr<CLWifiAccessPointLocationService> _field57;
};

struct CLNetworkLocationRequester;

struct CLNetworkLocationRequesterALS {
    CDUnknownFunctionPointerType *_field1;
    vector_6fcb333c _field2;
    vector_cead180e _field3;
    vector_ec4aa6bf _field4;
    vector_ac0eb896 _field5;
    vector_81654e89 _field6;
    struct Listener _field7;
    int _field8;
    int _field9;
    id _field10;
    id _field11;
    int _field12;
    struct __CFString *_field13;
    struct __CFString *_field14;
    int _field15;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field16;
    _Bool _field17;
};

struct CLNetworkLocationServerResponseListener {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNmeaScreener {
    _Bool _field1;
    _Bool _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    double _field4;
    double _field5;
    struct CLDistanceCalc _field6;
    struct ExternalLocationData _field7;
    struct ExternalLocationData _field8;
    struct ExternalLocationData _field9;
    struct ExternalLocationData _field10;
};

struct CLNotifierBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNotifierClientBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLOdometerEntry {
    double startTime;
    double distance;
    double accuracy;
    double gpsAltitude;
    double speed;
    double rawSpeed;
    double odometer;
    double gpsSpeedAccuracy;
    double timestampGps;
    int quality;
    int originDevice;
    int type;
    double groundAltitude;
    double groundAltitudeUncertainty;
    double smoothedGPSAltitude;
    double smoothedGPSAltitudeUncertainty;
    double gpsCourseRadians;
    double gpsCourseAccuracy;
};

struct CLOdometerNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct shared_ptr<CLElevationRecorderDb> _field11;
    struct shared_ptr<CLActivityAggregator<CLSignificantElevation, CLActivityDB::ClassCDataProtectionPolicy>> _field12;
    struct CLSignificantElevationEstimator _field13;
    struct CLPowerAssertion _field14;
    id _field15;
    id _field16;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field17;
    struct list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> _field18;
};

struct CLOdometerQuality {
    CDUnknownFunctionPointerType *_field1;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field2;
    struct deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>> _field3;
    vector_b67dfe3a _field4;
    int _field5;
};

struct CLOldWifiScanner {
    id _field1;
    struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> _field2;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field3;
    id _field4;
    _Bool _field5;
    _Bool _field6;
    time_point_406bde99 _field7;
    struct ScanningPolicy _field8;
};

struct CLOnBodyNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
};

struct CLOutdoorMatchingEngine;

struct CLParkinsonsResultRecorderDb;

struct CLPedometerEvent {
    double _field1;
    int _field2;
};

struct CLPedometerPaceFusion {
    struct CLNatalieInput<CLOdometerEntry> *_field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    struct FirstOrderFilter<double> _field10;
    struct FirstOrderFilter<double> _field11;
    int _field12;
    int _field13;
    _Bool _field14;
};

struct CLPeerRangeRequest {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    _Bool _field2;
    double _field3;
    vector_a730dc89 _field4;
};

struct CLPeerRangingManager {
    struct CLPeerRangingManagerDelegate *_field1;
    struct CLPeerRangeRequest _field2;
    _Bool _field3;
    _Bool _field4;
    int _field5;
};

struct CLPeerRangingManagerDelegate;

struct CLPeerRangingNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    CDUnknownFunctionPointerType *_field11;
    CDUnknownFunctionPointerType *_field12;
    struct CLPeerRangingManager _field13;
    struct CLPersistentTimer *_field14;
    struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> _field15;
};

struct CLPersistentStore {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
    id _field3;
    _Bool _field4;
    int _field5;
    double _field6;
    struct __CFRunLoopTimer *_field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field9;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field10;
    int _field11;
};

struct CLPersistentTimer {
    id _field1;
    CDUnknownFunctionPointerType _field2;
    void *_field3;
    id _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
};

struct CLPolicyProactive;

struct CLPolicyTrip;

struct CLPowerAssertion {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
    struct __CFString *_field4;
    double _field5;
    double _field6;
    id _field7;
};

struct CLPressureBias {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct unique_ptr<CLPressureCalibrationDatabase_Type::Client, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client>> _field11;
};

struct CLPressureCalibrationDatabase {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client>> _field2;
    _Bool _field3;
    CDUnknownFunctionPointerType *_field4;
    struct BasicMutex _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field6;
    id _field7;
    id _field8;
    id _field9;
    struct map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> _field10;
    struct map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> _field11;
    int _field12;
    _Bool _field13;
    struct MotionBarometerCalibration _field14;
    struct CLSqliteDatabase _field15;
    int _field16;
    struct TemperatureOffsetCoefficientRound _field17;
    struct vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound>> _field18;
    _Bool _field19;
    struct {
        float _field1;
        float _field2;
        double _field3;
    } _field20;
    struct Dispatcher *_field21;
    int _field22;
    struct CLRobustSlopeEstimator _field23;
};

struct CLPushEpoch;

struct CLRangingPeerInternal;

struct CLRavenController;

struct CLRobustSlopeEstimator {
    float _field1;
    struct deque<float, std::__1::allocator<float>> _field2;
    struct map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>>> _field3;
    struct map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int>>> _field4;
    int _field5;
    int _field6;
};

struct CLRunningBufferStats<double> {
    CDUnknownFunctionPointerType *_field1;
    unsigned long long _field2;
    double _field3;
    double _field4;
    struct deque<double, std::__1::allocator<double>> _field5;
};

struct CLSedentaryAlarmData;

struct CLSedentaryAlarmRecorderDb;

struct CLSedentaryTimerNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    struct CLMotionStateUpdate _field12;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field13;
    struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> _field14;
    _Bool _field15;
    struct shared_ptr<CLSedentaryAlarmRecorderDb> _field16;
    struct CLActivityAggregator<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy> _field17;
    double _field18;
    id _field19;
    struct Preferences _field20;
};

struct CLSensorCalibrationController {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary>> _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    _Bool _field21;
    struct Dispatcher *_field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    float _field28;
    _Bool _field29;
    struct IONotificationPort *_field30;
    unsigned int _field31;
    double _field32;
    _Bool _field33;
    int _field34;
    double _field35;
    double _field36;
    struct unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector>> _field37;
    double _field38;
    id _field39;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field40;
    int _field41;
    _Bool _field42;
    float _field43;
    double _field44;
    float _field45;
    _Bool _field46;
    struct unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController>> _field47;
    double _field48;
    id _field49;
    struct Dispatcher *_field50;
    struct CLPowerAssertion _field51;
    struct unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector>> _field52;
};

struct CLSensorCalibrationStaticDetector;

struct CLSensorRecorderDataPacket {
    double _field1;
    unsigned long long _field2;
    unsigned int _field3;
    struct shared_ptr<unsigned char> _field4;
};

struct CLSensorRecorderDb {
    CDUnknownFunctionPointerType *_field1;
    struct auto_ptr<CLSqliteDatabase> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct CLSensorRecorderDataPacket _field10;
    int _field11;
    id _field12;
    struct ClassCDataProtectionPolicy _field13;
    int _field14;
    struct list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket>> _field15;
    unsigned long long _field16;
    int _field17;
    struct __list_iterator<CLSensorRecorderDataPacket, void *> {
        struct __list_node_base<CLSensorRecorderDataPacket, void *> *_field1;
    } _field18;
    int _field19;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field20;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field21;
};

struct CLSensorRecorderNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    id _field11;
    id _field12;
    id _field13;
    id _field14;
    struct CLSensorRecorderDb _field15;
    struct CLSensorRecorderDb _field16;
    id _field17;
    id _field18;
    id _field19;
    struct vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>>> _field20;
    double _field21;
    double _field22;
    double _field23;
    double _field24;
    double _field25;
    double _field26;
    int _field27;
    unsigned int _field28;
    int _field29;
    unsigned int _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> _field34;
    _Bool _field35;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field36;
};

struct CLSensorTemperatureController;

struct CLServiceLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    struct __CLClient *_field15;
    struct __CLClient *_field16;
    struct __CLClient *_field17;
    struct __CFString *_field18;
    struct __CFString *_field19;
    id _field20;
    _Bool _field21;
};

struct CLSignalEnvironmentDataManager;

struct CLSignalEnvironmentProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field11;
    int _field12;
    struct CLSignalEnvironmentDataManager *_field13;
    struct CLFileUpdate _field14;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field15;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field16;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field17;
    _Bool _field18;
    double _field19;
    int _field20;
};

struct CLSignificantChangeManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    struct CLDistanceCalc _field15;
    _Bool _field16;
    struct CLPersistentTimer *_field17;
    struct CLPersistentStore _field18;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field19;
    double _field20;
    double _field21;
    struct CLDaemonLocation _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    struct RegInfo _field26;
    double _field27;
    struct unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client>> _field28;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field29;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field30;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field31;
    _Bool _field32;
    double _field33;
    struct __CFRunLoopTimer *_field34;
    _Bool _field35;
    id _field36;
};

struct CLSignificantElevation {
    int _field1;
    unsigned char _field2[16];
    double _field3;
    double _field4;
    unsigned int _field5;
    unsigned int _field6;
};

struct CLSignificantElevationEstimator {
    struct CMFixedSizeQueue<unsigned long long, 5> _field1;
    struct CMFilteredElevationStepHistory _field2;
    struct CLSignificantElevation _field3;
    struct FirstOrderFilter<double> _field4;
    double _field5;
    int _field6;
    double _field7;
    int _field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field9;
};

struct CLSimulatedLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
};

struct CLSimulationController {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    struct list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field7;
    _Bool _field8;
    double _field9;
    struct CLDaemonLocation _field10;
    struct CLDaemonLocation _field11;
    struct CLDaemonLocation _field12;
    struct __CFRunLoopTimer *_field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    unsigned char _field19;
    unsigned char _field20;
    struct __CFURL *_field21;
};

struct CLSkiController;

struct CLSkiDataStore {
    struct shared_ptr<CLSkiRecorderDb> _field1;
    unsigned char _field2[16];
    struct CLSkiEntry _field3;
};

struct CLSkiEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
};

struct CLSkiNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct unique_ptr<CLSkiController, std::__1::default_delete<CLSkiController>> _field11;
    struct CLSkiDataStore _field12;
    id _field13;
    struct CLMotionDefaultsWrite<bool> _field14;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field15;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field16;
};

struct CLSkiRecorderDb;

struct CLSpringTrackerEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    long long _field5;
};

struct CLSpringTrackerRecorderDb;

struct CLSpringTrackingNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    id _field11;
    struct shared_ptr<CLSpringTrackerRecorderDb> _field12;
    struct CLActivityAggregator<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy> _field13;
    struct CLMotionDefaultsWrite<double> _field14;
    id _field15;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field16;
};

struct CLSqliteCachedStatement {
    struct CLSqliteDatabase *fDb;
    struct sqlite3_stmt *fStatement;
};

struct CLSqliteDatabase {
    CDUnknownFunctionPointerType *_field1;
    struct sqlite3 *_field2;
    struct Mutex *_field3;
    struct list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *>> _field4;
    struct SqliteProperties _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field6;
    int _field7;
    id _field8;
};

struct CLStatusBarIconManager {
    struct BasicMutex _field1;
    id _field2;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6[8];
    unsigned int _field7[8];
    unsigned int _field8;
    id _field9[3];
    _Bool _field10[3];
};

struct CLStepCountEntry {
    double timestamp;
    double startTime;
    double firstStepTime;
    unsigned int count;
    double distance;
    double rawDistance;
    unsigned int floorsAscended;
    unsigned int floorsDescended;
    double currentPace;
    double currentCadence;
    double activeTime;
    int recordId;
    struct __CFString *sourceId;
    _Bool isOdometerDistance;
    _Bool isOdometerPace;
    struct CLAccelerometerPace accelerometerPace;
    unsigned int pushCount;
    unsigned int workoutType;
    unsigned char pedometerArmConstrainedState;
    unsigned int elevationAscended;
    unsigned int elevationDescended;
    union FalseStepDetectorStateUnion falseStepDetectorState;
    unsigned char falseStepsSuppressed;
    unsigned char distanceSource;
};

struct CLStepCountEntryAddition {
    double totalCalibratedDistance;
    double rawPace;
    unsigned int incrementalSteps;
    double incrementalActiveTime;
    double firstStepTime;
    double lastStepTime;
    double odometerSpeed;
    _Bool rawPaceDidJump;
    double calibratedDistance;
};

struct CLStepCountNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    shared_ptr_a3117978 _field11;
    struct CLActivityAggregator<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy> _field12;
    id _field13;
    id _field14;
    struct CLNatalieSourceFromNotifier<CLOdometerEntry> _field15;
    struct CLStepDistanceFusion _field16;
    _Bool _field17;
    id _field18;
    union NotificationData {
        struct CLStepCountEntry _field1;
        struct CLExtendedStepCountEntry _field2;
        struct CLPedometerEvent _field3;
    } _field19;
    _Bool _field20;
    long long _field21;
    struct CLBodyMetrics _field22;
    _Bool _field23;
    int _field24;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field25;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field26;
    struct Dispatcher *_field27;
    struct Dispatcher *_field28;
};

struct CLStepCountRecorderDb {
    CDUnknownFunctionPointerType *_field1;
    struct auto_ptr<CLSqliteDatabase> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct CLStepCountEntry _field10;
    int _field11;
    id _field12;
    struct ClassCDataProtectionPolicy _field13;
    struct CLSqliteCachedStatement _field14;
    struct CLSqliteCachedStatement _field15;
    _Bool _field16;
    _Bool _field17;
    CDUnknownBlockType _field18;
    id _field19;
    unsigned int _field20;
    unsigned int _field21;
    unsigned int _field22;
    double _field23;
    int _field24;
    int _field25;
    int _field26;
    double _field27;
    _Bool _field28;
    unsigned int _field29;
    unsigned int _field30;
    unsigned int _field31;
    int _field32;
    int _field33;
};

struct CLStepCountSubscription {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    struct Name _field4;
    struct Delegate *_field5;
    _Bool _field6;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    id _field11;
};

struct CLStepDistance {
    int _field1;
    double _field2;
    double _field3;
    int _field4;
    int _field5;
    double _field6;
    int _field7;
};

struct CLStepDistanceFusion {
    struct CLOdometerQuality _field1;
    struct MotionOverride _field2;
    struct deque<double, std::__1::allocator<double>> _field3;
    struct CLNatalieInput<CLExtendedStepCountEntry> _field4;
    struct CLNatalieInput<CLOdometerEntry> *_field5;
    int _field6;
    struct CLPedometerPaceFusion _field7;
    int _field8;
    unsigned long long _field9;
    double _field10;
    double _field11;
    double _field12;
    int _field13;
    int _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    _Bool _field19;
};

struct CLStreamedLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    id _field15;
    _Bool _field16;
    int _field17;
    id _field18;
    id _field19;
    int _field20;
    int _field21;
    int _field22;
};

struct CLStreamingAwareLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    CDUnknownFunctionPointerType *_field15;
    struct unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine>> _field16;
    id _field17;
    struct map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool>>> _field18;
    struct map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool>>> _field19;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field20;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field21;
    struct unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client>> _field22;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field23;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field24;
    struct map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double>>> _field25;
};

struct CLStreamingAwareLocationProviderStateMachine;

struct CLStrideCalEntry {
    int recordId;
    double startTime;
    unsigned int pacebin;
    double kvalue;
    double kvalueTrack;
    double score;
    double endTime;
    double distance;
    int steps;
    int session;
    double speed;
    double percentGrade;
    int gpsSource;
    double timestamp;
};

struct CLStrideCalibrationSessionMetrics {
    int session;
    double startTime;
    double endTime;
    double sumCalibrationDistanceSuccess;
    double sumCalibrationDistanceFailOther;
    double sumCalibrationDistanceFailGps;
    double sumCalibrationDistanceFailPedometer;
    double sumCalibrationDistanceFailGradient;
    double sumCalibrationDistanceInvalidGain;
    double sumCalibrationDistanceInvalidSpeed;
    double sumCalibrationDistanceInvalidLength;
    double totalDistance;
};

struct CLStrideLengthStepCadencePair {
    float strideLength;
    float stepCadence;
};

struct CLSuggestedActionDatabase;

struct CLSwimAlgController;

struct CLSwimDataInterface;

struct CLSwimDataStore {
    CDUnknownFunctionPointerType *_field1;
    struct vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution>> _field2;
    struct deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry>> _field3;
    struct deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn>> _field4;
    struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> _field5;
    struct CLSwimStrokesPerTurnDistribution _field6[6];
    _Bool _field7[6];
    struct deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry>> _field8;
    double _field9;
    double _field10;
    float _field11;
    _Bool _field12;
    unsigned char _field13[16];
    unsigned char _field14[16];
    double _field15;
    int _field16;
    float _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    struct CLSwimPersistence _field21;
    struct CLSwimStrokeRateEstimator _field22;
    struct CLSwimDistanceEstimatorLap _field23;
    struct CLSwimDistanceEstimatorOpenWater _field24;
    struct CLSwimDistanceEstimator *_field25;
    long long _field26;
    struct CLSwimStyleAggregator _field27;
    struct Diagnostics _field28;
};

struct CLSwimDetectedTurn;

struct CLSwimDistanceEstimator;

struct CLSwimDistanceEstimatorLap {
    CDUnknownFunctionPointerType *_field1;
    struct CLSwimDataInterface *_field2;
    int _field3;
    int _field4;
    struct Estimates _field5;
};

struct CLSwimDistanceEstimatorOpenWater {
    CDUnknownFunctionPointerType *_field1;
    struct CLSwimDataInterface *_field2;
    struct Estimates _field3;
    int _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
};

struct CLSwimEntry {
    unsigned long long _field1;
    unsigned char _field2[16];
    unsigned char _field3[16];
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    float _field14;
    float _field15;
    float _field16;
    int _field17;
    int _field18;
};

struct CLSwimFusion;

struct CLSwimNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field11;
    _Bool _field12;
    struct unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider>> _field13;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field14;
    id _field15;
    id _field16;
    struct unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController>> _field17;
    struct CLSwimDataStore _field18;
    struct unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion>> _field19;
    struct Dispatcher *_field20;
    struct Dispatcher *_field21;
    struct Dispatcher *_field22;
    struct CLGizmoOrientation _field23;
    struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> _field24;
    struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> _field25;
    struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
    _Bool _field30;
    id _field31;
    id _field32;
};

struct CLSwimPersistence {
    CDUnknownFunctionPointerType *_field1;
    struct auto_ptr<CLSqliteDatabase> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct CLSwimEntry _field10;
    int _field11;
    id _field12;
    struct ClassCDataProtectionPolicy _field13;
};

struct CLSwimStrokeRateEstimator {
    struct CLMedianFilter<double> _field1;
    double _field2;
    double _field3;
};

struct CLSwimStrokesPerTurnDistribution {
    unsigned char _field1[16];
    unsigned char _field2[16];
    double _field3;
    int _field4;
    double _field5;
    double _field6;
    int _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
};

struct CLSwimStyleAggregator {
    unsigned int _field1[6];
    unsigned int _field2;
};

struct CLTelephonyIratManager;

struct CLTelephonyService {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct __CFRunLoopTimer *_field11;
    struct __CFRunLoopSource *_field12;
    void *_field13;
    _Bool _field14;
    int _field15;
    struct __CTServerConnection *_field16;
    struct unique_ptr<CLTelephonyIratManager, std::__1::default_delete<CLTelephonyIratManager>> _field17;
    _Bool _field18;
    _Bool _field19;
    float _field20;
    float _field21;
    int _field22;
};

struct CLTileDownloadPolicy {
    id _field1;
    double _field2;
    unsigned long long _field3;
};

struct CLTileDownloader;

struct CLTileDownloaderExternal {
    CDUnknownFunctionPointerType *_field1;
};

struct CLTileFileDownloadDetails {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    double _field4;
    int _field5;
    double _field6;
    _Bool _field7;
    _Bool _field8;
};

struct CLTileSyncAWD {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    double _field10;
    double _field11;
};

struct CLTileSyncManager {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    struct CLITilesManager *_field7;
    struct unique_ptr<CLTileSyncManager::IExternal, std::__1::default_delete<CLTileSyncManager::IExternal>> _field8;
    id _field9;
    struct BasicMutex *_field10;
    double _field11;
    _Bool _field12;
    double _field13;
    double _field14;
    id _field15;
    char *_field16;
    _Bool _field17;
    id _field18;
    _Bool _field19;
    struct shared_ptr<CLWifiAccessPointLocationService> _field20;
    char _field21;
    struct vector<TileId, std::__1::allocator<TileId>> _field22;
    char _field23;
    _Bool _field24;
    int _field25;
    _Bool _field26;
    struct CLTileSyncAWD _field27;
};

struct CLTilesManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>>> _field11;
    struct DownloadState _field12;
    struct DownloadState _field13;
    _Bool _field14;
    _Bool _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    struct CLPersistentTimer *_field20;
    struct CLDaemonLocation _field21;
    double _field22;
    double _field23;
    int _field24;
    int _field25;
    int _field26;
    _Bool _field27;
    int _field28;
    _Bool _field29;
    _Bool _field30;
    struct unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal>> _field31;
    struct CLTileDownloadPolicy _field32;
    _Bool _field33;
    struct CLTilesSetCollection _field34;
    struct CLDemTileAvailability _field35;
};

struct CLTilesSearchContext {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *>>> _field4;
    unsigned long long _field5;
    unsigned long long _field6;
};

struct CLTilesSetCollection {
    struct vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>>> _field1;
};

struct CLTimeManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    int _field12;
    int _field13;
    double _field14;
    struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> _field15;
    struct unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>> _field16;
    double _field17;
};

struct CLTimeOffsetFilter {
    _Bool _field1;
    _Bool _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    unsigned long long _field8;
    struct CLRunningBufferStats<double> _field9;
    _Bool _field10;
    struct CLMedianFilter<double> _field11;
    double _field12;
};

struct CLTimeZoneDatabase;

struct CLTimeZoneManager {
    struct CLTimeZoneDatabase *_field1;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field2;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field3;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field4;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field5;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field6;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field7;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field8;
    id _field9;
    id _field10;
    double _field11;
    double _field12;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field13;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field14;
    double _field15;
    struct CLDaemonLocation _field16;
    struct CLDaemonLocation _field17;
    struct CLDaemonLocation _field18;
    struct CLServiceLocationProvider _field19;
    int _field20;
    int _field21;
    _Bool _field22;
    _Bool _field23;
    struct __CFRunLoopTimer *_field24;
    struct CLPersistentTimer *_field25;
    struct __CFRunLoopTimer *_field26;
    int _field27;
    double _field28;
    struct __CFRunLoopTimer *_field29;
    double _field30;
    double _field31;
    double _field32;
    double _field33;
    int _field34;
    double _field35;
    double _field36;
    double _field37;
    double _field38;
    double _field39;
    double _field40;
    double _field41;
    double _field42;
    struct CLDistanceCalc _field43;
    _Bool _field44[31];
};

struct CLTransitTilePreloader {
    struct CLITransitTilePreloaderExternal *_field1;
    struct CLDistanceCalc _field2;
    double _field3;
    double _field4;
    struct CLDaemonLocation _field5;
};

struct CLTransitTilePreloaderExternal {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct CLTransitWsbClient {
    id _field1;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field2;
    _Bool _field3;
    _Bool _field4;
    unsigned int _field5;
};

struct CLTurnState {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct Dispatcher *_field11;
    struct CLTurnStateCalc _field12;
    struct Turn {
        int _field1;
        int _field2;
    } _field13;
};

struct CLTurnStateCalc {
    int _field1;
    int _field2;
    unsigned int _field3;
    unsigned int _field4;
    struct CLMedianFilter<float> _field5;
    struct CLMedianFilter<float> _field6;
    struct CLMedianFilter<float> _field7;
    struct CLRunningBufferStats<double> _field8;
    struct CLRunningBufferStats<double> _field9;
    struct CLRunningBufferStats<double> _field10;
};

struct CLUnifiedCellLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    CDUnknownFunctionPointerType *_field15;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field16;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field17;
    struct unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client>> _field18;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field19;
    struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> _field20;
    struct unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client>> _field21;
    struct unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client>> _field22;
    _Bool _field23;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field24;
    struct __CFRunLoopSource *_field25;
    struct CLCell _field26;
    struct CLDaemonLocation _field27;
    vector_096a3675 _field28;
    vector_096a3675 _field29[2];
    int _field30;
    _Bool _field31;
    _Bool _field32;
    struct CLPersistentTimer *_field33;
    char *_field34;
    int _field35;
    _Bool _field36;
    struct CLCellLocationAWD _field37;
};

struct CLVO2MaxEstimator {
    long long _field1;
    int _field2;
    unsigned char _field3[16];
    unsigned char _field4[16];
    struct CLVO2MaxInputCollector _field5;
    struct CLVO2MaxPreprocessor _field6;
    struct CLVO2MaxInputStore _field7;
    struct CLVO2MaxOutputStore _field8;
    struct vector<HRMetPair, std::__1::allocator<HRMetPair>> _field9;
    struct CLBodyMetrics _field10;
    struct CLVO2MaxStats _field11;
    int _field12;
};

struct CLVO2MaxFHREstimator {
    struct CLHRToFHRConverter _field1;
    struct CLBodyMetrics _field2;
    float _field3;
    float _field4;
    struct CMOnlineMean<float> _field5;
    struct CMOnlineMean<float> _field6;
};

struct CLVO2MaxInputCache;

struct CLVO2MaxInputCollector {
    struct deque<CLVO2MaxInputCollector::HRSample, std::__1::allocator<CLVO2MaxInputCollector::HRSample>> _field1;
    _Bool _field2;
    double _field3;
    struct CLStepCountRecorderDb _field4;
    long long _field5;
    unsigned char _field6[16];
    _Bool _field7;
};

struct CLVO2MaxInputStore {
    struct shared_ptr<CLVO2MaxInputCache> _field1;
    _Bool _field2;
    unsigned char _field3[16];
    struct deque<VO2MaxInput, std::__1::allocator<VO2MaxInput>> _field4;
};

struct CLVO2MaxOutputRecorderDb {
    CDUnknownFunctionPointerType *_field1;
    struct auto_ptr<CLSqliteDatabase> _field2;
    char *_field3;
    struct BasicMutex _field4;
    _Bool _field5;
    struct deque<VO2MaxOutput, std::__1::allocator<VO2MaxOutput>> _field6;
    int _field7;
    float _field8;
    int _field9;
    struct VO2MaxOutput _field10;
    int _field11;
    id _field12;
    struct ClassBDataProtectionPolicy _field13;
};

struct CLVO2MaxOutputStore {
    struct CLVO2MaxOutputRecorderDb _field1;
};

struct CLVO2MaxPreprocessor {
    struct CLVO2MaxFHREstimator _field1;
    float _field2;
    float _field3;
    double _field4;
    double _field5;
    struct PairStats _field6;
    float _field7;
    double _field8;
    float _field9;
    int _field10;
};

struct CLVO2MaxStats {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    unsigned int _field6;
};

struct CLVehicleConnection {
    double _field1;
    double _field2;
    char _field3[256];
    double _field4;
};

struct CLVehicleConnectionNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    id _field11;
    struct map<std::__1::basic_string<char>, CLBTDeviceEntry, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBTDeviceEntry>>> _field12;
    struct CLBTHandsfreeWhitelist _field13;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field14;
    struct CLFileUpdate _field15;
    double _field16;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field17;
    struct CLFileUpdate _field18;
    double _field19;
    _Bool _field20;
    _Bool _field21;
    id _field22;
    id _field23;
    _Bool _field24;
    struct deque<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo>> _field25;
    struct CLBTDialogDeviceInfo _field26;
    id _field27;
    struct __CFRunLoopSource *_field28;
    _Bool _field29;
    int _field30;
    int _field31;
    int _field32;
    _Bool _field33;
    id _field34;
    struct CLVehicleConnection _field35;
    union NotificationData {
        struct CLVehicleConnection _field1;
    } _field36;
    struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> _field37;
    struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> _field38;
};

struct CLVehicleSpeedFilter {
    struct SpeedAndTime _field1;
    struct SpeedAndTime _field2;
    struct SpeedAndTime _field3;
};

struct CLVisitMonitoringSubscription {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    id _field3;
    struct Name _field4;
    struct Delegate *_field5;
    _Bool _field6;
    id _field7;
    id _field8;
};

struct CLWatchOrientationSettingsNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct CLGizmoOrientation _field11;
};

struct CLWifi1SystemLogic {
    struct shared_ptr<CL::Wifi1::IPlatformInfo> _field1;
    struct Logic _field2;
};

struct CLWifiAccessPointLocationService;

struct CLWifiLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    struct shared_ptr<CLWifiLocationProvider::IExternal> _field15;
    struct __CFRunLoopTimer *_field16;
    _Bool _field17;
    struct CLWifi1SystemLogic _field18;
    struct SystemState _field19;
};

struct CLWifiLocationUpdateRequest {
    int _field1;
    _Bool _field2;
    double _field3;
    int _field4;
    _Bool _field5;
};

struct CLWifiRangeResult;

struct CLWifiScanner;

struct CLWifiService {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>>> _field7;
    struct map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    struct __CFNumber *_field11;
    struct __CFNumber *_field12;
    struct __CFDictionary *_field13;
    struct __CFDictionary *_field14;
    struct __CFDictionary *_field15;
    struct __CFDictionary *_field16;
    struct __CFDictionary *_field17;
    struct __CFDictionary *_field18;
    struct __CFDictionary *_field19;
    struct __CFDictionary *_field20;
    struct __CFDictionary *_field21;
    struct __CFDictionary *_field22;
    struct __CFDictionary *_field23;
    struct __CFDictionary *_field24;
    struct __CFDictionary *_field25;
    _Bool _field26;
    char _field27;
    _Bool _field28;
    int _field29;
    int _field30;
    _Bool _field31;
    _Bool _field32;
    _Bool _field33;
    unsigned long long _field34;
    struct array<CLMacAddress, 3> _field35;
    int _field36;
    unsigned long long _field37;
    struct __CFRunLoopSource *_field38;
    struct __WiFiManagerClient *_field39;
    struct __WiFiDeviceClient *_field40;
    struct __WiFiNetwork *_field41;
    struct deque<CLWifiService::ScanRequest, std::__1::allocator<CLWifiService::ScanRequest>> _field42;
    _Bool _field43;
    double _field44;
    double _field45;
    double _field46;
    double _field47;
    char _field48;
    double _field49;
    struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> _field50;
    double _field51;
    struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> _field52;
    double _field53;
    struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> _field54;
    struct __CFArray *_field55;
    struct __CFArray *_field56;
    _Bool _field57;
    struct AssociationState _field58;
    id _field59;
    double _field60;
    int _field61;
    struct ScanStats _field62;
    struct BasicMutex _field63;
    struct unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal>> _field64;
};

struct CLWifiServiceClient {
    id _field1;
    struct function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)> _field2;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field3;
    struct AssociationState _field4;
    _Bool _field5;
};

struct CLWifiTilesManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    id _field6;
    struct map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>>> _field7;
    struct map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field8;
    int _field9;
    _Bool _field10;
    CDUnknownFunctionPointerType *_field11;
    CDUnknownFunctionPointerType *_field12;
    struct map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>>> _field13;
    struct DownloadState _field14;
    struct DownloadState _field15;
    _Bool _field16;
    _Bool _field17;
    double _field18;
    struct CLDaemonLocation _field19;
    double _field20;
    double _field21;
    int _field22;
    int _field23;
    _Bool _field24;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field25;
    struct unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal>> _field26;
    struct CLTileDownloadPolicy _field27;
    struct shared_ptr<CLWifiAccessPointLocationService> _field28;
    struct unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager>> _field29;
    _Bool _field30;
    struct CLTilesSetCollection _field31;
};

struct CLWorkoutAlertStatistics {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    int _field4;
    double _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
};

struct CLWorkoutIndoorOutdoorDetector;

struct CLWorkoutLabeler;

struct CLWorkoutPredictor {
    CDUnknownFunctionPointerType *_field1;
    struct Transition *_field2;
    unsigned long long _field3;
    unsigned char _field4;
    unsigned char _field5;
    struct CLWorkoutPredictorInputs _field6;
    struct unique_ptr<CLWorkoutStopDetector, std::__1::default_delete<CLWorkoutStopDetector>> _field7;
    struct unique_ptr<CLWorkoutLabeler, std::__1::default_delete<CLWorkoutLabeler>> _field8;
    struct unique_ptr<CLWorkoutIndoorOutdoorDetector, std::__1::default_delete<CLWorkoutIndoorOutdoorDetector>> _field9;
    struct unique_ptr<CLWorkoutPredictorTurnDetector, std::__1::default_delete<CLWorkoutPredictorTurnDetector>> _field10;
    struct unique_ptr<CLWorkoutPredictorTier2Classifier, std::__1::default_delete<CLWorkoutPredictorTier2Classifier>> _field11;
    double _field12;
    double _field13;
    struct WorkoutPrediction _field14;
    struct WorkoutEvent _field15;
    struct WorkoutPrediction _field16;
    int _field17;
    _Bool _field18;
    struct WorkoutStartAwdMetrics _field19;
    _Bool _field20;
    _Bool _field21;
    struct Battery _field22;
    struct CLGizmoOrientation _field23;
    struct function<void (CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)> _field24;
    long long _field25;
    double _field26;
};

struct CLWorkoutPredictorExternallyActivatedSource<CLWorkoutClassifier_Type::CLWorkoutClassifierResult> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLWorkoutClassifier_Type::CLWorkoutClassifierResult, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    CDStruct_0a530110 _field8;
    struct function<bool (bool)> _field9;
};

struct CLWorkoutPredictorExternallyActivatedSource<CLWorkoutPredictorTurnDetector::Turn> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLWorkoutPredictorTurnDetector::Turn, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct Turn {
        double _field1;
        struct Metrics _field2;
        struct Metrics _field3;
        float _field4;
        struct CMVector<float, 3> _field5;
    } _field8;
    struct function<bool (bool)> _field9;
};

struct CLWorkoutPredictorInputs {
    struct CLWorkoutPredictorSources *_field1;
    struct CLWorkoutPredictorSourceBuffer<CLMotionCoprocessorInterface::MotionState> _field2;
    double _field3;
    CDStruct_2c43369c _field4;
    double _field5;
    struct CLBodyMetrics _field6;
};

struct CLWorkoutPredictorSourceBuffer<CLExerciseMinuteData> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLExerciseMinuteData, std::__1::allocator<CLExerciseMinuteData>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLExerciseMinuteData _field8;
};

struct CLWorkoutPredictorSourceBuffer<CLMotionCoprocessorInterface::MotionState> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLMotionCoprocessorInterface::MotionState, std::__1::allocator<CLMotionCoprocessorInterface::MotionState>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct MotionState {
        double _field1;
        double _field2;
        double _field3;
        struct MotionState {
            int _field1;
            int _field2;
            int _field3;
            int _field4;
            int _field5;
            _Bool _field6;
            _Bool _field7;
            _Bool _field8;
            int _field9;
            unsigned long long _field10;
            int _field11;
            _Bool _field12;
            int _field13;
            union VehicularFlagsData _field14;
            int _field15;
            float _field16;
            float _field17;
            float _field18;
            int _field19;
            unsigned long long _field20;
        } _field4;
        struct CLNatalieFeatures _field5;
    } _field8;
};

struct CLWorkoutPredictorSourceBuffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLWorkoutClassifier_Type::CLWorkoutClassifierResult, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    CDStruct_0a530110 _field8;
};

struct CLWorkoutPredictorSourceBuffer<CLWorkoutPredictorWatchPressure> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLWorkoutPredictorWatchPressure, std::__1::allocator<CLWorkoutPredictorWatchPressure>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLWorkoutPredictorWatchPressure _field8;
};

struct CLWorkoutPredictorSourceFromNotifier<CLCatherineData> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLCatherineData, std::__1::allocator<CLCatherineData>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLCatherineData _field8;
    id _field9;
    struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSourceFromNotifier<CLElevationChangeEntry> {
    CDUnknownFunctionPointerType *_field1;
    struct CLElevationGradeEstimator _field2;
    _Bool _field3;
    struct deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry>> _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    struct CLElevationChangeEntry _field9;
    id _field10;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field11;
};

struct CLWorkoutPredictorSourceFromNotifier<CLExtendedStepCountEntry> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLExtendedStepCountEntry _field8;
    id _field9;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSourceFromNotifier<CLOdometerEntry> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLOdometerEntry _field8;
    id _field9;
    struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSourceFromNotifier<CLStepCountEntry> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLStepCountEntry _field8;
    id _field9;
    struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSourceFromNotifier<CLSwimEntry> {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    struct CLSwimEntry _field8;
    id _field9;
    struct unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client>> _field10;
};

struct CLWorkoutPredictorSources;

struct CLWorkoutPredictorSourcesImpl<CLWorkoutPredictorSourceFromNotifier<CLElevationChangeEntry>, CLWorkoutPredictorSourceFromNotifier<CLCatherineData>, CLWorkoutPredictorSourceFromNotifier<CLOdometerEntry>, CLWorkoutPredictorSourceFromNotifier<CLStepCountEntry>, CLWorkoutPredictorSourceFromNotifier<CLExtendedStepCountEntry>, CLWorkoutPredictorExternallyActivatedSource<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>, CLWorkoutPredictorSourceBuffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>, CLWorkoutPredictorExternallyActivatedSource<CLWorkoutPredictorTurnDetector::Turn>, CLWorkoutPredictorSourceFromNotifier<CLSwimEntry>, CLWorkoutPredictorSourceBuffer<CLWorkoutPredictorWatchPressure>, CLWorkoutPredictorSourceBuffer<CLExerciseMinuteData>> {
    CDUnknownFunctionPointerType *_field1;
    struct CLWorkoutPredictorSourceFromNotifier<CLElevationChangeEntry> _field2;
    struct CLWorkoutPredictorSourceFromNotifier<CLCatherineData> _field3;
    struct CLWorkoutPredictorSourceFromNotifier<CLOdometerEntry> _field4;
    struct CLWorkoutPredictorSourceFromNotifier<CLStepCountEntry> _field5;
    struct CLWorkoutPredictorSourceFromNotifier<CLExtendedStepCountEntry> _field6;
    struct CLWorkoutPredictorExternallyActivatedSource<CLWorkoutClassifier_Type::CLWorkoutClassifierResult> _field7;
    struct CLWorkoutPredictorSourceBuffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult> _field8;
    struct CLWorkoutPredictorExternallyActivatedSource<CLWorkoutPredictorTurnDetector::Turn> _field9;
    struct CLWorkoutPredictorSourceFromNotifier<CLSwimEntry> _field10;
    struct CLWorkoutPredictorSourceBuffer<CLWorkoutPredictorWatchPressure> _field11;
    struct CLWorkoutPredictorSourceBuffer<CLExerciseMinuteData> _field12;
};

struct CLWorkoutPredictorTier2Classifier;

struct CLWorkoutPredictorTurnDetector;

struct CLWorkoutPredictorWatchPressure {
    double _field1;
    unsigned short _field2;
    float _field3;
};

struct CLWorkoutStopDetector;

struct CLWorkoutUpdate {
    double _field1;
    int _field2;
    int _field3;
};

struct CMFilteredElevationStepHistory {
    struct CMFixedSizeQueue<CMElevationSample, 4> _field1;
    struct CMFixedSizeQueue<CMElevationSample, 5> _field2;
    struct CMFixedSizeQueue<CMStepCountSample, 7> _field3;
    _Bool _field4;
    _Bool _field5;
};

struct CMFixedSizeQueue<CMElevationSample, 4> {
    CDStruct_b91b6b9f _field1;
    unsigned int _field2;
    char _field3[16];
    struct CMQueueStorage<CMElevationSample, 4> _field4;
};

struct CMFixedSizeQueue<CMElevationSample, 5> {
    CDStruct_b91b6b9f _field1;
    unsigned int _field2;
    char _field3[16];
    struct CMQueueStorage<CMElevationSample, 5> _field4;
};

struct CMFixedSizeQueue<CMStepCountSample, 7> {
    CDStruct_b91b6b9f _field1;
    unsigned int _field2;
    char _field3[40];
    struct CMQueueStorage<CMStepCountSample, 7> _field4;
};

struct CMFixedSizeQueue<double, 2> {
    CDStruct_b91b6b9f fHeadAndSize;
    unsigned int fCapacity;
    char fBuffer[8];
    struct CMQueueStorage<double, 2> fStorage;
};

struct CMFixedSizeQueue<unsigned long long, 5> {
    CDStruct_b91b6b9f _field1;
    unsigned int _field2;
    char _field3[8];
    struct CMQueueStorage<unsigned long long, 5> _field4;
};

struct CMOnlineMean<float> {
    float _field1;
    unsigned long long _field2;
};

struct CMQueueStorage<CMElevationSample, 4> {
    char _field1[48];
};

struct CMQueueStorage<CMElevationSample, 5> {
    char _field1[64];
};

struct CMQueueStorage<CMStepCountSample, 7> {
    char _field1[240];
};

struct CMQueueStorage<double, 2> {
    char buffer[8];
};

struct CMQueueStorage<unsigned long long, 5> {
    char _field1[32];
};

struct CMStrideCalRecorderDb {
    CDUnknownFunctionPointerType *_vptr$CLActivityRecorderDb;
    struct auto_ptr<CLSqliteDatabase> fDb;
    char *fName;
    struct BasicMutex fMutex;
    _Bool fFatalError;
    struct deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry>> fBuffer;
    int fInternalRecordCount;
    float fSampleInterval;
    int fPersistence;
    struct CLStrideCalEntry fPrevEntry;
    int fMaxBufferSize;
    NSObject *fInMemoryTransaction;
    struct ClassCDataProtectionPolicy fProtectionPolicy;
    struct CLSqliteCachedStatement fSqlGetCount;
    struct CLSqliteCachedStatement fSqlGetAllAsc;
    struct CLSqliteCachedStatement fSqlGetPacebinDesc;
    struct CLSqliteCachedStatement fSqlGetSpeedRangeDesc;
    struct CLSqliteCachedStatement fSqlDeleteBefore;
    struct CLSqliteCachedStatement fSqlDeleteAfter;
    struct CLSqliteCachedStatement fSqlDeleteAll;
    struct CLSqliteCachedStatement fSqlInsert;
    struct CLSqliteCachedStatement fSqlShiftStartTimes;
    struct CLSqliteCachedStatement fSqlMostRecent;
    CLSilo *fFinishedInsertSilo;
    CDUnknownBlockType fFinishedInsertHandler;
};

struct CMVector<float, 2> {
    float _field1[2];
};

struct CMVector<float, 3> {
    float _field1[3];
};

struct CalorimetryPauseEvent;

struct CatherineHealthKitData;

struct CdmaCell {
    int _field1;
    vector_3203cf93 _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    struct CLDaemonLocation _field12;
    int _field13;
    int _field14;
    int _field15;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field16;
    struct CLDaemonLocation _field17;
    int _field18;
    int _field19;
};

struct Cell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
};

struct ChoreaScore {
    double _field1;
    int _field2;
    float _field3;
    float _field4;
    int _field5;
};

struct ClassBDataProtectionPolicy {
    CDUnknownFunctionPointerType *_field1;
    void *_field2;
    struct function<bool (void *, bool)> _field3;
    struct BasicMutex _field4;
};

struct ClassCDataProtectionPolicy {
    CDUnknownFunctionPointerType *_vptr$BasicDataProtectionPolicy;
    void *fClient;
    struct function<bool (void *, bool)> fOnDataProtectionChange;
    struct BasicMutex fMutex;
};

struct ClefCalibration;

struct Client;

struct Clients {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CoarseElevationChange;

struct Compass;

struct CompassAlignment;

struct CompassCalibration;

struct CompassConstraints;

struct CompassCorrection;

struct ComputedLocation {
    struct CLDaemonLocation _field1;
    unsigned int _field2;
};

struct Config {
    struct FallStatsConfig _field1;
    _Bool _field2;
};

struct CourseConstraints;

struct CourseCorrection;

struct Delegate;

struct DestructionAwareMutex {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<DestructionAwareMutexInternal> _field2;
};

struct DestructionAwareMutexInternal;

struct Device;

struct DeviceMotion;

struct DeviceMotionCovariance;

struct DeviceTouchState {
    _Bool _field1;
    double _field2;
};

struct Diagnostics {
    unsigned int _field1;
    double _field2;
};

struct DirectionOfTravelAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    double _field15;
    double _field16;
};

struct Dispatcher;

struct DoubleTap;

struct DownloadState {
    char *_field1;
    _Bool _field2;
    double _field3;
    struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> _field4;
};

struct ElevationChange;

struct Emergency {
    int _field1;
    _Bool _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    _Bool _field12;
};

struct EnhancedDeviceMotion;

struct Estimates {
    float _field1;
    float _field2[6];
};

struct ExternalLocationData {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct FairPlayHWInfo_ {
    unsigned int IDLength;
    unsigned char ID[20];
};

struct FallModel {
    float fRatioMaxAbsX[17];
    float fRatioMaxAbsY[17];
    float fRatioMaxAbsZ[17];
    float fRatioMaxJerkVM[67];
    float fRatioMinInertialZ[21];
    float fRatioAccelPathLength[10];
    float fRatioMaxAngleChangePreimpact[16];
    float fRatioMaxAngleChangePostimpact[16];
    struct LikelihoodRatioInfo fLikelihoodRatioInfo[8];
};

struct FallStats;

struct FallStatsConfig {
    unsigned long long _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned char _field6;
    unsigned char _field7;
};

struct FalseStepDetectorState {
    unsigned int accelPoseXHigh:1;
    unsigned int accelVarXYZLow:1;
    unsigned int gyroNumSamplesSufficient:1;
    unsigned int gyroVarXHigh:1;
    unsigned int consecutiveRequirement:1;
    unsigned int isVehicularLowConfidence:1;
    unsigned int isVehicularHighConfidence:1;
    unsigned int consistentStepsProtection:1;
};

struct Fence {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    int _field9;
    double _field10;
    double _field11;
    double _field12;
    int _field13;
    unsigned long long _field14;
    int _field15;
    int _field16;
    _Bool _field17;
};

struct FirstOrderFilter<double> {
    int _field1;
    double _field2;
    double _field3;
};

struct GgaRmcInfo {
    int _field1;
    _Bool _field2;
};

struct GravityConstraints;

struct GravityCorrection;

struct Gyro;

struct GyroBiasAndVariance;

struct GyroBiasConstraints;

struct GyroBiasCorrection;

struct GyroBiasFit;

struct GyroCompass;

struct GyroDt;

struct GyroGps;

struct GyroOscarEmu;

struct GyroTemperature;

struct HRMetPair;

struct HRSample;

struct HarvestData {
    double _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    int _field9;
    _Bool _field10;
    _Bool _field11;
    struct CLMotionActivity _field12;
    struct CLMotionActivity _field13;
    struct CLMotionActivity _field14;
};

struct HighFrequencyFeatures {
    struct MagnitudeFeatures _field1;
    struct MagnitudeFeatures _field2;
    struct ZeroCrossingFeatures _field3;
    struct JerkFeatures _field4;
};

struct HomeKitDevice;

struct HostedNetwork {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    int _field2;
    unsigned int _field3;
    double _field4;
};

struct IExternal;

struct ILocalizerDelegate;

struct ILogicDelegate;

struct IMPara {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    double _field4;
    double _field5;
};

struct IM_AllSources {
    struct IMPara _field1;
    struct IMPara _field2;
    struct IMPara _field3;
    int _field4;
};

struct INotifier {
    CDUnknownFunctionPointerType *_field1;
};

struct IONotificationPort;

struct IPlatformInfo;

struct Impact {
    unsigned short _field1;
    unsigned char _field2;
    char _field3;
    unsigned long long _field4;
    unsigned char _field5;
    unsigned char _field6;
    char _field7;
    _Bool _field8;
    unsigned char _field9;
    unsigned long long _field10;
    struct HighFrequencyFeatures _field11;
    unsigned long long _field12;
    float _field13;
    float _field14;
    float _field15;
    float _field16;
    float _field17;
    float _field18;
    float _field19;
    float _field20;
    float _field21;
    float _field22;
    float _field23;
};

struct ImpactData {
    double _field1;
    double _field2;
    unsigned char _field3;
    struct {
        float _field1[4];
        union {
            unsigned long long _field1;
            unsigned long long _field2;
        } _field2;
    } _field4;
};

struct ImpactEvent {
    struct Impact _field1;
    unsigned char _field2;
    unsigned char _field3;
    double _field4;
    double _field5;
};

struct ImproveAccuracyNotification;

struct InEarAdditionalState;

struct InEarBaseline;

struct InEarBaselining;

struct InEarConstraints;

struct InEarOpenLid;

struct InEarOptical;

struct InEarSession;

struct InEarTransition;

struct InEarTransitionEntry;

struct IntensityEpoch;

struct InterpolatedAccessoryAccel;

struct IntersiloNSCodingData;

struct Item {
    CDUnknownFunctionPointerType *_vptr$Base;
    struct unique_ptr<CMMsl::Accel, std::__1::default_delete<CMMsl::Accel>> _accel;
    struct unique_ptr<CMMsl::AccelBatch, std::__1::default_delete<CMMsl::AccelBatch>> _accelBatch;
    struct unique_ptr<CMMsl::AccelGesture, std::__1::default_delete<CMMsl::AccelGesture>> _accelGesture;
    struct unique_ptr<CMMsl::AccelGps, std::__1::default_delete<CMMsl::AccelGps>> _accelGps;
    struct unique_ptr<CMMsl::AccelOscarEmu, std::__1::default_delete<CMMsl::AccelOscarEmu>> _accelOscarEmu;
    struct unique_ptr<CMMsl::AccessoryAccel, std::__1::default_delete<CMMsl::AccessoryAccel>> _accessoryAccel;
    struct unique_ptr<CMMsl::AccessoryAccelConfig, std::__1::default_delete<CMMsl::AccessoryAccelConfig>> _accessoryAccelConfig;
    struct unique_ptr<CMMsl::AccessoryConfig, std::__1::default_delete<CMMsl::AccessoryConfig>> _accessoryConfig;
    struct unique_ptr<CMMsl::AccessoryGyro, std::__1::default_delete<CMMsl::AccessoryGyro>> _accessoryGyro;
    struct unique_ptr<CMMsl::AccessoryProx, std::__1::default_delete<CMMsl::AccessoryProx>> _accessoryProx;
    struct unique_ptr<CMMsl::AccessoryProxSensorDrop, std::__1::default_delete<CMMsl::AccessoryProxSensorDrop>> _accessoryProxSensorDrop;
    struct unique_ptr<CMMsl::AccessoryProxTempComp, std::__1::default_delete<CMMsl::AccessoryProxTempComp>> _accessoryProxTempComp;
    struct unique_ptr<CMMsl::AccessoryProximityConfig, std::__1::default_delete<CMMsl::AccessoryProximityConfig>> _accessoryProximityConfig;
    struct unique_ptr<CMMsl::AccessoryWake, std::__1::default_delete<CMMsl::AccessoryWake>> _accessoryWake;
    struct unique_ptr<CMMsl::AccessoryWakeDebug, std::__1::default_delete<CMMsl::AccessoryWakeDebug>> _accessoryWakeDebug;
    struct unique_ptr<CMMsl::AirpodEvent, std::__1::default_delete<CMMsl::AirpodEvent>> _airpodEvent;
    struct unique_ptr<CMMsl::BTConnection, std::__1::default_delete<CMMsl::BTConnection>> _bTConnection;
    struct unique_ptr<CMMsl::BasebandSpeed, std::__1::default_delete<CMMsl::BasebandSpeed>> _basebandSpeed;
    struct unique_ptr<CMMsl::BodyMetrics, std::__1::default_delete<CMMsl::BodyMetrics>> _bodyMetrics;
    struct unique_ptr<CMMsl::BraveHeartAccel, std::__1::default_delete<CMMsl::BraveHeartAccel>> _braveHeartAccel;
    struct unique_ptr<CMMsl::BraveHeartDeviceMotion, std::__1::default_delete<CMMsl::BraveHeartDeviceMotion>> _braveHeartDeviceMotion;
    struct unique_ptr<CMMsl::BraveHeartNatalieData, std::__1::default_delete<CMMsl::BraveHeartNatalieData>> _braveHeartNatalieData;
    struct unique_ptr<CMMsl::BraveHeartVO2MaxInput, std::__1::default_delete<CMMsl::BraveHeartVO2MaxInput>> _braveHeartVO2MaxInput;
    struct unique_ptr<CMMsl::BraveHeartWorkoutEvent, std::__1::default_delete<CMMsl::BraveHeartWorkoutEvent>> _braveHeartWorkoutEvent;
    struct unique_ptr<CMMsl::CalorimetryPauseEvent, std::__1::default_delete<CMMsl::CalorimetryPauseEvent>> _calorimetryPauseEvent;
    struct unique_ptr<CMMsl::CatherineHealthKitData, std::__1::default_delete<CMMsl::CatherineHealthKitData>> _catherineHealthKitData;
    double _cftime;
    struct unique_ptr<CMMsl::ClefCalibration, std::__1::default_delete<CMMsl::ClefCalibration>> _clefCalibration;
    struct unique_ptr<CMMsl::CoarseElevationChange, std::__1::default_delete<CMMsl::CoarseElevationChange>> _coarseElevationChange;
    struct unique_ptr<CMMsl::Compass, std::__1::default_delete<CMMsl::Compass>> _compass;
    struct unique_ptr<CMMsl::CompassAlignment, std::__1::default_delete<CMMsl::CompassAlignment>> _compassAlignment;
    struct unique_ptr<CMMsl::CompassCalibration, std::__1::default_delete<CMMsl::CompassCalibration>> _compassCalibration;
    struct unique_ptr<CMMsl::CompassConstraints, std::__1::default_delete<CMMsl::CompassConstraints>> _compassConstraints;
    struct unique_ptr<CMMsl::CompassCorrection, std::__1::default_delete<CMMsl::CompassCorrection>> _compassCorrection;
    struct unique_ptr<CMMsl::CourseConstraints, std::__1::default_delete<CMMsl::CourseConstraints>> _courseConstraints;
    struct unique_ptr<CMMsl::CourseCorrection, std::__1::default_delete<CMMsl::CourseCorrection>> _courseCorrection;
    struct unique_ptr<CMMsl::DeviceMotion, std::__1::default_delete<CMMsl::DeviceMotion>> _deviceMotion;
    struct unique_ptr<CMMsl::DeviceMotionCovariance, std::__1::default_delete<CMMsl::DeviceMotionCovariance>> _deviceMotionCovariance;
    struct unique_ptr<CMMsl::DoubleTap, std::__1::default_delete<CMMsl::DoubleTap>> _doubleTap;
    struct unique_ptr<CMMsl::ElevationChange, std::__1::default_delete<CMMsl::ElevationChange>> _elevationChange;
    struct unique_ptr<CMMsl::EnhancedDeviceMotion, std::__1::default_delete<CMMsl::EnhancedDeviceMotion>> _enhancedDeviceMotion;
    struct unique_ptr<CMMsl::FallStats, std::__1::default_delete<CMMsl::FallStats>> _fallStats;
    struct unique_ptr<CMMsl::GravityConstraints, std::__1::default_delete<CMMsl::GravityConstraints>> _gravityConstraints;
    struct unique_ptr<CMMsl::GravityCorrection, std::__1::default_delete<CMMsl::GravityCorrection>> _gravityCorrection;
    struct unique_ptr<CMMsl::Gyro, std::__1::default_delete<CMMsl::Gyro>> _gyro;
    struct unique_ptr<CMMsl::GyroBiasAndVariance, std::__1::default_delete<CMMsl::GyroBiasAndVariance>> _gyroBiasAndVariance;
    struct unique_ptr<CMMsl::GyroBiasConstraints, std::__1::default_delete<CMMsl::GyroBiasConstraints>> _gyroBiasConstraints;
    struct unique_ptr<CMMsl::GyroBiasCorrection, std::__1::default_delete<CMMsl::GyroBiasCorrection>> _gyroBiasCorrection;
    struct unique_ptr<CMMsl::GyroBiasFit, std::__1::default_delete<CMMsl::GyroBiasFit>> _gyroBiasFit;
    struct unique_ptr<CMMsl::GyroCompass, std::__1::default_delete<CMMsl::GyroCompass>> _gyroCompass;
    struct unique_ptr<CMMsl::GyroDt, std::__1::default_delete<CMMsl::GyroDt>> _gyroDt;
    struct unique_ptr<CMMsl::GyroGps, std::__1::default_delete<CMMsl::GyroGps>> _gyroGps;
    struct unique_ptr<CMMsl::GyroOscarEmu, std::__1::default_delete<CMMsl::GyroOscarEmu>> _gyroOscarEmu;
    struct unique_ptr<CMMsl::GyroTemperature, std::__1::default_delete<CMMsl::GyroTemperature>> _gyroTemperature;
    struct unique_ptr<CMMsl::InEarAdditionalState, std::__1::default_delete<CMMsl::InEarAdditionalState>> _inEarAdditionalState;
    struct unique_ptr<CMMsl::InEarBaseline, std::__1::default_delete<CMMsl::InEarBaseline>> _inEarBaseline;
    struct unique_ptr<CMMsl::InEarBaselining, std::__1::default_delete<CMMsl::InEarBaselining>> _inEarBaselining;
    struct unique_ptr<CMMsl::InEarConstraints, std::__1::default_delete<CMMsl::InEarConstraints>> _inEarConstraints;
    struct unique_ptr<CMMsl::InEarOpenLid, std::__1::default_delete<CMMsl::InEarOpenLid>> _inEarOpenLid;
    struct unique_ptr<CMMsl::InEarOptical, std::__1::default_delete<CMMsl::InEarOptical>> _inEarOptical;
    struct unique_ptr<CMMsl::InEarSession, std::__1::default_delete<CMMsl::InEarSession>> _inEarSession;
    struct unique_ptr<CMMsl::InEarTransition, std::__1::default_delete<CMMsl::InEarTransition>> _inEarTransition;
    struct unique_ptr<CMMsl::InEarTransitionEntry, std::__1::default_delete<CMMsl::InEarTransitionEntry>> _inEarTransitionEntry;
    struct unique_ptr<CMMsl::InterpolatedAccessoryAccel, std::__1::default_delete<CMMsl::InterpolatedAccessoryAccel>> _interpolatedAccessoryAccel;
    struct unique_ptr<CMMsl::IntersiloNSCodingData, std::__1::default_delete<CMMsl::IntersiloNSCodingData>> _intersiloNSCodingData;
    struct unique_ptr<CMMsl::LocationOscarEmu, std::__1::default_delete<CMMsl::LocationOscarEmu>> _locationOscarEmu;
    struct unique_ptr<CMMsl::Magnetometer, std::__1::default_delete<CMMsl::Magnetometer>> _magnetometer;
    struct unique_ptr<CMMsl::MetsInfo, std::__1::default_delete<CMMsl::MetsInfo>> _metsInfo;
    struct unique_ptr<CMMsl::MotionGPSLocation, std::__1::default_delete<CMMsl::MotionGPSLocation>> _motionGPSLocation;
    struct unique_ptr<CMMsl::MotionHint, std::__1::default_delete<CMMsl::MotionHint>> _motionHint;
    struct unique_ptr<CMMsl::MotionLoiData, std::__1::default_delete<CMMsl::MotionLoiData>> _motionLoiData;
    struct unique_ptr<CMMsl::MotionStateUpdate, std::__1::default_delete<CMMsl::MotionStateUpdate>> _motionStateUpdate;
    struct unique_ptr<CMMsl::MotionWifiAssociation, std::__1::default_delete<CMMsl::MotionWifiAssociation>> _motionWifiAssociation;
    struct unique_ptr<CMMsl::MotionWifiLocation, std::__1::default_delete<CMMsl::MotionWifiLocation>> _motionWifiLocation;
    struct unique_ptr<CMMsl::NatalieData, std::__1::default_delete<CMMsl::NatalieData>> _natalieData;
    struct unique_ptr<CMMsl::NonlinearBiasFit, std::__1::default_delete<CMMsl::NonlinearBiasFit>> _nonlinearBiasFit;
    struct unique_ptr<CMMsl::Odometer, std::__1::default_delete<CMMsl::Odometer>> _odometer;
    struct unique_ptr<CMMsl::OdometerWithAltitude, std::__1::default_delete<CMMsl::OdometerWithAltitude>> _odometerWithAltitude;
    struct unique_ptr<CMMsl::OnsetHeartRateData, std::__1::default_delete<CMMsl::OnsetHeartRateData>> _onsetHeartRateData;
    struct unique_ptr<CMMsl::PearlAttitude, std::__1::default_delete<CMMsl::PearlAttitude>> _pearlAttitude;
    struct unique_ptr<CMMsl::Pressure, std::__1::default_delete<CMMsl::Pressure>> _pressure;
    struct unique_ptr<CMMsl::PressureFiltered, std::__1::default_delete<CMMsl::PressureFiltered>> _pressureFiltered;
    struct unique_ptr<CMMsl::PressureFilteredNoTemperature, std::__1::default_delete<CMMsl::PressureFilteredNoTemperature>> _pressureFilteredNoTemperature;
    struct unique_ptr<CMMsl::PressureGps, std::__1::default_delete<CMMsl::PressureGps>> _pressureGps;
    struct unique_ptr<CMMsl::PressureOscarEmu, std::__1::default_delete<CMMsl::PressureOscarEmu>> _pressureOscarEmu;
    struct unique_ptr<CMMsl::Prox, std::__1::default_delete<CMMsl::Prox>> _prox;
    struct unique_ptr<CMMsl::RotationRate, std::__1::default_delete<CMMsl::RotationRate>> _rotationRate;
    struct unique_ptr<CMMsl::SessionOverride, std::__1::default_delete<CMMsl::SessionOverride>> _sessionOverride;
    struct unique_ptr<CMMsl::SPUPlaybackExampleDeviceMotion, std::__1::default_delete<CMMsl::SPUPlaybackExampleDeviceMotion>> _spuPlaybackExampleDeviceMotion;
    struct unique_ptr<CMMsl::SPUPlaybackExampleMotionStateUpdate, std::__1::default_delete<CMMsl::SPUPlaybackExampleMotionStateUpdate>> _spuPlaybackExampleMotionStateUpdate;
    struct unique_ptr<CMMsl::StepCadenceToStrideLengthBin, std::__1::default_delete<CMMsl::StepCadenceToStrideLengthBin>> _stepCadenceToStrideLengthBin;
    struct unique_ptr<CMMsl::StreamingHeartRateData, std::__1::default_delete<CMMsl::StreamingHeartRateData>> _streamingHeartRateData;
    struct unique_ptr<CMMsl::StrideCalBin, std::__1::default_delete<CMMsl::StrideCalBin>> _strideCalBin;
    struct unique_ptr<CMMsl::TapAccept, std::__1::default_delete<CMMsl::TapAccept>> _tapAccept;
    struct unique_ptr<CMMsl::TapDetect, std::__1::default_delete<CMMsl::TapDetect>> _tapDetect;
    struct unique_ptr<CMMsl::TouchOscarEmu, std::__1::default_delete<CMMsl::TouchOscarEmu>> _touchOscarEmu;
    struct unique_ptr<CMMsl::VibrationEvent, std::__1::default_delete<CMMsl::VibrationEvent>> _vibrationEvent;
    struct unique_ptr<CMMsl::VO2MaxInput, std::__1::default_delete<CMMsl::VO2MaxInput>> _vo2MaxInput;
    struct unique_ptr<CMMsl::WatchOnWristState, std::__1::default_delete<CMMsl::WatchOnWristState>> _watchOnWristState;
    struct unique_ptr<CMMsl::WatchOrientationSettings, std::__1::default_delete<CMMsl::WatchOrientationSettings>> _watchOrientationSettings;
    struct unique_ptr<CMMsl::WifiScanResults, std::__1::default_delete<CMMsl::WifiScanResults>> _wifiScanResults;
    struct unique_ptr<CMMsl::WorkoutEvent, std::__1::default_delete<CMMsl::WorkoutEvent>> _workoutEvent;
    struct unique_ptr<CMMsl::WorkoutRecorderAccel, std::__1::default_delete<CMMsl::WorkoutRecorderAccel>> _workoutRecorderAccel;
    struct unique_ptr<CMMsl::WorkoutRecorderBodyMetrics, std::__1::default_delete<CMMsl::WorkoutRecorderBodyMetrics>> _workoutRecorderBodyMetrics;
    struct unique_ptr<CMMsl::WorkoutRecorderElevation, std::__1::default_delete<CMMsl::WorkoutRecorderElevation>> _workoutRecorderElevation;
    struct unique_ptr<CMMsl::WorkoutRecorderHealthKitInfo, std::__1::default_delete<CMMsl::WorkoutRecorderHealthKitInfo>> _workoutRecorderHealthKitInfo;
    struct unique_ptr<CMMsl::WorkoutRecorderHeartRate, std::__1::default_delete<CMMsl::WorkoutRecorderHeartRate>> _workoutRecorderHeartRate;
    struct unique_ptr<CMMsl::WorkoutRecorderOdometer, std::__1::default_delete<CMMsl::WorkoutRecorderOdometer>> _workoutRecorderOdometer;
    struct unique_ptr<CMMsl::WorkoutRecorderPressure, std::__1::default_delete<CMMsl::WorkoutRecorderPressure>> _workoutRecorderPressure;
    struct unique_ptr<CMMsl::WorkoutRecorderRotationRate, std::__1::default_delete<CMMsl::WorkoutRecorderRotationRate>> _workoutRecorderRotationRate;
    struct unique_ptr<CMMsl::WorkoutRecorderWatchOrientationSettings, std::__1::default_delete<CMMsl::WorkoutRecorderWatchOrientationSettings>> _workoutRecorderWatchOrientationSettings;
    struct unique_ptr<CMMsl::WorkoutRecorderWifiScanResults, std::__1::default_delete<CMMsl::WorkoutRecorderWifiScanResults>> _workoutRecorderWifiScanResults;
    struct unique_ptr<CMMsl::WorkoutRecorderWorkoutEvent, std::__1::default_delete<CMMsl::WorkoutRecorderWorkoutEvent>> _workoutRecorderWorkoutEvent;
    struct {
        unsigned int cftime:1;
    } _has;
};

struct JerkFeatures {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
};

struct KalmanParameters {
    CDUnknownFunctionPointerType *_field1;
    struct KalmanTuningInfo _field2;
    vector_b67dfe3a _field3;
    vector_b67dfe3a _field4;
    vector_b67dfe3a _field5;
    vector_b67dfe3a _field6;
    vector_b67dfe3a _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    _Bool _field16;
    _Bool _field17;
    double _field18;
    struct CLDaemonLocation _field19;
    struct CLDaemonLocation _field20;
    _Bool _field21;
    _Bool _field22;
    int _field23;
    struct altFilterData _field24;
    _Bool _field25;
    struct list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> _field26;
};

struct KalmanTuningInfo {
    CDUnknownFunctionPointerType *_field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    _Bool _field6;
    float _field7;
};

struct LastAvlLookup {
    _Bool _field1;
    unsigned int _field2;
    _Bool _field3;
};

struct LikelihoodRatioInfo {
    float firstBinEdge;
    float binSize;
    unsigned char binNum;
};

struct Listener {
    void *_field1;
    id _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
    CDUnknownFunctionPointerType _field6;
    CDUnknownFunctionPointerType _field7;
    CDUnknownFunctionPointerType _field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    CDUnknownFunctionPointerType _field13;
    CDUnknownFunctionPointerType _field14;
    CDUnknownFunctionPointerType _field15;
    CDUnknownFunctionPointerType _field16;
};

struct LocationConfiguration {
    struct vector<CLLocationType, std::__1::allocator<CLLocationType>> _field1;
    double _field2;
};

struct LocationDerivedSpeed {
    double _field1;
    double _field2;
    double _field3;
};

struct LocationMapMatching {
    struct Metric _field1;
    int _field2;
    int _field3;
    int _field4;
};

struct LocationNetworkQueries {
    struct Metric _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
};

struct LocationOscarEmu;

struct Logic {
    struct shared_ptr<CLICachedLookupWifiAccessPointLocationService> _field1;
};

struct LteCell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    double _field8;
    double _field9;
    int _field10;
    int _field11;
};

struct Magnetometer;

struct MagnitudeFeatures {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
};

struct MapMatchedPositionAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct MeasurementData;

struct MediatedMotionActivity {
    double _field1;
    struct CLMotionActivity _field2;
    struct CLNatalieFeatures _field3;
    _Bool _field4;
    _Bool _field5;
};

struct Metric {
    _Bool _field1;
    double _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
};

struct Metrics {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    struct CMVector<float, 2> _field5;
};

struct MetsInfo;

struct ModelAndIds;

struct MonitoredRegion {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    unsigned short _field3;
    unsigned short _field4;
    int _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    int _field9;
};

struct MonitoringParameters {
    double latencyBudget;
    double retryRate;
    _Bool queryALS;
};

struct MonitoringPeriod;

struct MotionBarometerCalibration {
    struct Metric _field1;
    unsigned int _field2;
    float _field3;
    float _field4;
    float _field5;
};

struct MotionFitnessDaily {
    struct Metric _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    int _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    _Bool _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
    long long _field14;
    long long _field15;
    unsigned int _field16;
    unsigned int _field17;
    _Bool _field18;
};

struct MotionGPSLocation;

struct MotionHint;

struct MotionInfo {
    double _field1;
    int _field2;
    int _field3;
};

struct MotionLoiData;

struct MotionOverride {
    int _field1;
    struct CLMotionActivity _field2;
    long long _field3;
    struct WorkoutSettings _field4;
};

struct MotionStateUpdate;

struct MotionWifiAssociation;

struct MotionWifiLocation;

struct Mutex;

struct MutexInfo;

struct NSDictionary {
    Class _field1;
};

struct Name {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> fExecutable;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> fBundlePath;
    _Bool fBundleRequiresProxy;
    _Bool fSystemService;
    _Bool fHarvestableSystemService;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> fBundleId;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> fPluginBundleId;
    _Bool fValidProxyData;
    _Bool fWatchKitPlugin;
};

struct NatalieData;

struct NonlinearBiasFit;

struct NowPlaying {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field2;
    int _field3;
    unsigned int _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field5;
    struct RepeatedPtrField<CLMicroLocationProto::NowPlayingOutputDevice> _field6;
    struct BundleIdFeatures *_field7;
    int _field8;
    unsigned int _field9[1];
};

struct Odometer;

struct OdometerWithAltitude;

struct OnsetHeartRateData;

struct OtherPrefs {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
};

struct PairStats {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    int _field10;
    int _field11;
    int _field12;
    int _field13;
    int _field14;
    int _field15;
    int _field16;
    int _field17;
    int _field18;
};

struct ParkinsonsResult {
    double _field1;
    double _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
};

struct PearlAttitude;

struct PostWorkoutSettings {
    _Bool _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct Preferences {
    struct CLMotionDefaultsWrite<int> _field1;
    struct CLMotionDefaultsWrite<int> _field2;
    struct CLMotionDefaultsWrite<int> _field3;
    struct CLMotionDefaultsWrite<int> _field4;
    struct CLMotionDefaultsWrite<bool> _field5;
};

struct Pressure;

struct PressureFiltered;

struct PressureFilteredNoTemperature;

struct PressureGps;

struct PressureOscarEmu;

struct PropagationDataHistory {
    struct NotificationData {
        struct CLDaemonLocation _field1;
        struct CLDaemonLocationPrivate _field2;
        struct shared_ptr<CLBatchedLocations> _field3;
        struct TechnologyStatus _field4;
        _Bool _field5;
        double _field6;
        int _field7;
        CDStruct_d2b197d1 _field8;
        CDStruct_2c43369c _field9;
        struct XtraFileAvailable _field10;
        int _field11;
        struct LocationDerivedSpeed _field12;
        struct shared_ptr<const gnss::MeasurementData> _field13;
        int _field14;
    } _field1;
    struct NotificationData {
        struct CLDaemonLocation _field1;
        struct CLDaemonLocationPrivate _field2;
        struct shared_ptr<CLBatchedLocations> _field3;
        struct TechnologyStatus _field4;
        _Bool _field5;
        double _field6;
        int _field7;
        CDStruct_d2b197d1 _field8;
        CDStruct_2c43369c _field9;
        struct XtraFileAvailable _field10;
        int _field11;
        struct LocationDerivedSpeed _field12;
        struct shared_ptr<const gnss::MeasurementData> _field13;
        int _field14;
    } _field2;
    double _field3;
    double _field4;
    double _field5;
};

struct Prox;

struct ProximityZone {
    struct Region _field1;
};

struct Reader;

struct RecordingEvent;

struct RecordingTransaction;

struct RegInfo {
    struct MonitoringParameters settledParameters;
    struct MonitoringParameters unsettledParameters;
};

struct Region {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    unsigned short _field3;
    unsigned short _field4;
    int _field5;
};

struct RepeatedPtrField<CLMicroLocationProto::NowPlayingOutputDevice> {
    void **_field1;
    int _field2;
    int _field3;
    int _field4;
};

struct RollingPowerAssertion;

struct RotationRate;

struct SPUPlaybackExampleDeviceMotion;

struct SPUPlaybackExampleMotionStateUpdate;

struct SatelliteReport {
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> _field1;
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> _field2;
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> _field3;
    struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> _field4;
};

struct ScanBuffer {
    struct vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>>> _field1;
    struct unordered_set<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress>> _field2;
    int _field3;
    struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> _field4;
};

struct ScanRequest;

struct ScanStats {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4[13];
};

struct ScanningPolicy {
    struct WifiConfiguration _field1;
    struct optional<CLOldWifiScanner::LocationConfiguration> _field2;
};

struct ScdmaCell {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
};

struct SessionOverride;

struct Settings {
    struct CLMotionDefaultsWrite<bool> _field1;
    struct CLMotionDefaultsWrite<bool> _field2;
    struct CLMotionDefaultsWrite<bool> _field3;
    struct CLMotionDefaultsWrite<bool> _field4;
    struct CLMotionDefaultsWrite<double> _field5;
    struct CLMotionDefaultsWrite<double> _field6;
    struct CLMotionDefaultsWrite<double> _field7;
    struct CLMotionDefaultsWrite<double> _field8;
    struct CLMotionDefaultsWrite<double> _field9;
    struct CLMotionDefaultsWrite<double> _field10;
    struct CLMotionDefaultsWrite<unsigned int> _field11;
    struct CLMotionDefaultsWrite<bool> _field12;
    struct CLMotionDefaultsWrite<double> _field13;
    struct CLMotionDefaultsWrite<unsigned int> _field14;
    struct CLMotionDefaultsWrite<int> _field15;
    struct CLMotionDefaultsWrite<bool> _field16;
    struct CLMotionDefaultsWrite<bool> _field17;
    struct CLMotionDefaultsWrite<bool> _field18;
    struct CLMotionDefaultsWrite<bool> _field19;
    struct CLMotionDefaultsWrite<bool> _field20;
    struct CLMotionDefaultsWrite<bool> _field21;
    struct CLMotionDefaultsWrite<bool> _field22;
    struct CLMotionDefaultsWrite<bool> _field23;
    struct CLMotionDefaultsWrite<bool> _field24;
    struct CLMotionDefaultsWrite<bool> _field25;
    struct CLMotionDefaultsWrite<bool> _field26;
    struct CLMotionDefaultsWrite<bool> _field27;
    struct CLMotionDefaultsWrite<bool> _field28;
    struct CLMotionDefaultsWrite<bool> _field29;
    struct CLMotionDefaultsWrite<bool> _field30;
    struct CLMotionDefaultsWrite<bool> _field31;
    struct CLMotionDefaultsWrite<bool> _field32;
    struct CLMotionDefaultsWrite<double> _field33;
    struct CLMotionDefaultsWrite<bool> _field34;
    struct CLMotionDefaultsWrite<bool> _field35;
};

struct SiloDispatcher<CLDeviceMotion::Sample>;

struct SpeedAndTime {
    double _field1;
    double _field2;
};

struct SqliteProperties {
    int _field1;
    int _field2;
    _Bool _field3;
    _Bool _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
};

struct State {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    int _field4;
    _Bool _field5;
    _Bool _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    struct CLStepCountEntry _field8;
    struct AssociationState _field9;
    struct vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram>> _field10;
    struct shared_ptr<CLMicroLocationWifiScanStrategy> _field11;
    struct shared_ptr<CLMicroLocationWifiScanStrategy> _field12;
    _Bool _field13;
    time_point_406bde99 _field14;
    _Bool _field15;
    struct bitset<3> _field16;
    struct bitset<13> _field17;
    struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> _field18;
    struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> _field19;
    struct optional<CLMicroLocationProto::NowPlaying> _field20;
    struct vector<CLMicroLocationProto::RecordingEvent, std::__1::allocator<CLMicroLocationProto::RecordingEvent>> _field21;
    int _field22;
};

struct StateTransition {
    char *_field1;
    _Bool _field2;
    double _field3;
};

struct StepCadenceToStrideLengthBin;

struct StreamingHeartRateData;

struct StrideCalBin;

struct StrokeEntry;

struct StyleEntry;

struct SwimAttrib {
    long long _field1;
    double _field2;
};

struct SystemState {
    struct WifiScanHistory _field1;
    struct WifiScan _field2;
    struct AssociatedAp _field3;
    struct CLDaemonLocation _field4;
    struct ComputedLocation _field5;
    time_point_406bde99 _field6;
    _Bool _field7;
    struct CLWifiLocationUpdateRequest _field8;
    int _field9;
    time_point_406bde99 _field10;
    time_point_406bde99 _field11;
    time_point_406bde99 _field12;
    time_point_406bde99 _field13;
    int _field14;
    struct duration<long double, std::__1::ratio<1, 1>> _field15;
    struct Emergency _field16;
    struct ScanBuffer _field17;
    int _field18;
    int _field19;
    float _field20;
    time_point_406bde99 _field21;
    time_point_406bde99 _field22;
    struct Clients _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    _Bool _field27;
    _Bool _field28;
    _Bool _field29;
};

struct TapAccept;

struct TapDetect;

struct TechnologyStatus {
    int _field1;
    _Bool _field2;
};

struct TemperatureOffsetCoefficientRound {
    float _field1;
    float _field2;
    int _field3;
};

struct TileId;

struct TouchOscarEmu;

struct Transition;

struct TremorScore {
    double _field1;
    int _field2;
    float _field3;
    float _field4;
};

struct TunnelBridgeAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
};

struct TunnelEndPositionAssistance {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    int _field7;
};

struct VO2MaxInput {
    unsigned long long _field1;
    unsigned char _field2[16];
    float _field3;
    double _field4;
    float _field5;
    float _field6;
    int _field7;
    double _field8;
    _Bool _field9;
    _Bool _field10;
    int _field11;
    long long _field12;
    double _field13;
    double _field14;
    _Bool _field15;
};

struct VO2MaxOutput {
    unsigned long long _field1;
    unsigned char _field2[16];
    double _field3;
    double _field4;
    long long _field5;
    double _field6;
    double _field7;
    double _field8;
    unsigned char _field9[16];
    double _field10;
    double _field11;
};

struct VehicularFlags {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
};

struct VibrationEvent;

struct WatchOnWristState;

struct WatchOrientationSettings;

struct WifiConfiguration {
    char _field1;
    _Bool _field2;
    _Bool _field3;
    struct duration<long double, std::__1::ratio<1, 1>> _field4;
    struct vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification>> _field5;
    struct duration<long double, std::__1::ratio<1, 1>> _field6;
    struct duration<long double, std::__1::ratio<1, 1>> _field7;
};

struct WifiScan {
    struct unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint>> _field1;
    time_point_406bde99 _field2;
};

struct WifiScanHistory {
    struct unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint>> _field1;
};

struct WifiScanResults;

struct WorkoutEvent {
    unsigned char _field1[16];
    long long _field2;
    long long _field3;
    double _field4;
    double _field5;
    long long _field6;
    double _field7;
};

struct WorkoutPrediction {
    unsigned char _field1[16];
    long long _field2;
    long long _field3;
    int _field4;
    long long _field5;
    long long _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    int _field12;
    int _field13;
    long long _field14;
    double _field15;
};

struct WorkoutRecorderAccel;

struct WorkoutRecorderBodyMetrics;

struct WorkoutRecorderElevation;

struct WorkoutRecorderHealthKitInfo {
    CDUnknownFunctionPointerType *_vptr$Base;
    double _restingHeartRate;
    double _walkingHeartRateAverage;
    unsigned int _workoutActivityType;
    struct {
        unsigned int restingHeartRate:1;
        unsigned int walkingHeartRateAverage:1;
        unsigned int workoutActivityType:1;
    } _has;
};

struct WorkoutRecorderHeartRate;

struct WorkoutRecorderOdometer;

struct WorkoutRecorderPressure;

struct WorkoutRecorderRotationRate;

struct WorkoutRecorderWatchOrientationSettings;

struct WorkoutRecorderWifiScanResults;

struct WorkoutRecorderWorkoutEvent;

struct WorkoutSettings {
    unsigned char _field1[16];
    long long _field2;
    long long _field3;
    union WorkoutAttrib _field4;
};

struct WorkoutStartAwdMetrics {
    long long _field1;
    long long _field2;
    long long _field3;
};

struct WristStatus;

struct Writer;

struct WriterManager<CLLegacyFileManager>;

struct XtraFileAvailable {
    double _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
};

struct ZeroCrossingFeatures {
    float _field1;
    float _field2;
    float _field3;
};

struct _CLClientManagerStateTrackerState {
    int locationServicesEnabledStatus;
    _Bool locationRestricted;
};

struct _CLDaemonStatusStateTrackerState {
    struct Battery batteryData;
    int reachability;
    int thermalLevel;
    _Bool airplaneMode;
    _Bool batterySaverModeEnabled;
    _Bool pushServiceConnected;
    _Bool restrictedMode;
};

struct _CLFitnessMachineData {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    long long _field6;
    long long _field7;
    long long _field8;
    double _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
};

struct _GEOTileKey {
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :6;
    unsigned int :8;
    unsigned int :8;
    unsigned int :8;
    unsigned int :1;
    unsigned int :7;
    unsigned char _field1[4];
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __CFArray;

struct __CFDictionary;

struct __CFNumber;

struct __CFRunLoopSource;

struct __CFRunLoopTimer;

struct __CFString;

struct __CLClient;

struct __hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*> *_field1;
};

struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> {
    struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> *_field1;
    struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> *_field2;
};

struct __list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *> {
    struct __list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *> *_field1;
    struct __list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *> *_field2;
};

struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> {
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> *_field1;
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> *_field2;
};

struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> {
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> *_field1;
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> *_field2;
};

struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> {
    struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> *_field1;
    struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> *_field2;
};

struct __list_node_base<CLDaemonClient::MessageRef, void *> {
    struct __list_node_base<CLDaemonClient::MessageRef, void *> *_field1;
    struct __list_node_base<CLDaemonClient::MessageRef, void *> *_field2;
};

struct __list_node_base<CLDaemonLocation, void *> {
    struct __list_node_base<CLDaemonLocation, void *> *_field1;
    struct __list_node_base<CLDaemonLocation, void *> *_field2;
};

struct __list_node_base<CLFenceManager_Type::CombinedFence, void *> {
    struct __list_node_base<CLFenceManager_Type::CombinedFence, void *> *_field1;
    struct __list_node_base<CLFenceManager_Type::CombinedFence, void *> *_field2;
};

struct __list_node_base<CLMotionActivity, void *> {
    struct __list_node_base<CLMotionActivity, void *> *_field1;
    struct __list_node_base<CLMotionActivity, void *> *_field2;
};

struct __list_node_base<CLOdometerEntry, void *> {
    struct __list_node_base<CLOdometerEntry, void *> *_field1;
    struct __list_node_base<CLOdometerEntry, void *> *_field2;
};

struct __list_node_base<CLSensorRecorderDataPacket, void *> {
    struct __list_node_base<CLSensorRecorderDataPacket, void *> *_field1;
    struct __list_node_base<CLSensorRecorderDataPacket, void *> *_field2;
};

struct __list_node_base<sqlite3_stmt *, void *> {
    struct __list_node_base<sqlite3_stmt *, void *> *_field1;
    struct __list_node_base<sqlite3_stmt *, void *> *_field2;
};

struct __list_node_base<unsigned int, void *> {
    struct __list_node_base<unsigned int, void *> *_field1;
    struct __list_node_base<unsigned int, void *> *_field2;
};

struct __shared_weak_count;

struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>;

struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct altFilterData {
    float _field1;
    float _field2;
};

struct array<CLMacAddress, 3> {
    struct CLMacAddress _field1[3];
};

struct auto_ptr<CLSqliteDatabase> {
    struct CLSqliteDatabase *__ptr_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *__data_;
                    unsigned long long __size_;
                    unsigned long long __cap_;
                } __l;
                struct __short {
                    char __data_[23];
                    struct {
                        unsigned char __size_;
                    } ;
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct bitset<13> {
    unsigned long long _field1;
};

struct bitset<3> {
    unsigned long long _field1;
};

struct deque<CLCatherineData, std::__1::allocator<CLCatherineData>> {
    struct __split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *>> {
        struct CLCatherineData **_field1;
        struct CLCatherineData **_field2;
        struct CLCatherineData **_field3;
        struct __compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *>> {
            struct CLCatherineData **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLCatherineData>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry>> {
    struct __split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *>> {
        struct CLCoarseElevationChangeEntry **_field1;
        struct CLCoarseElevationChangeEntry **_field2;
        struct CLCoarseElevationChangeEntry **_field3;
        struct __compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *>> {
            struct CLCoarseElevationChangeEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> {
    struct __split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *>> {
        struct CLDaemonLocation **_field1;
        struct CLDaemonLocation **_field2;
        struct CLDaemonLocation **_field3;
        struct __compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *>> {
            struct CLDaemonLocation **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry>> {
    struct __split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *>> {
        struct CLElevationChangeEntry **__first_;
        struct CLElevationChangeEntry **__begin_;
        struct CLElevationChangeEntry **__end_;
        struct __compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *>> {
            struct CLElevationChangeEntry **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<CLExerciseMinuteData, std::__1::allocator<CLExerciseMinuteData>> {
    struct __split_buffer<CLExerciseMinuteData *, std::__1::allocator<CLExerciseMinuteData *>> {
        struct CLExerciseMinuteData **_field1;
        struct CLExerciseMinuteData **_field2;
        struct CLExerciseMinuteData **_field3;
        struct __compressed_pair<CLExerciseMinuteData **, std::__1::allocator<CLExerciseMinuteData *>> {
            struct CLExerciseMinuteData **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteData>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch>> {
    struct __split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *>> {
        struct CLPushEpoch **_field1;
        struct CLPushEpoch **_field2;
        struct CLPushEpoch **_field3;
        struct __compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *>> {
            struct CLPushEpoch **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch>> {
    struct __split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *>> {
        struct IntensityEpoch **_field1;
        struct IntensityEpoch **_field2;
        struct IntensityEpoch **_field3;
        struct __compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *>> {
            struct IntensityEpoch **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry>> {
    struct __split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *>> {
        struct CLExtendedStepCountEntry **_field1;
        struct CLExtendedStepCountEntry **_field2;
        struct CLExtendedStepCountEntry **_field3;
        struct __compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *>> {
            struct CLExtendedStepCountEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLHealthAssessmentNotifier::MonitoringPeriod, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod>> {
    struct __split_buffer<CLHealthAssessmentNotifier::MonitoringPeriod *, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod *>> {
        struct MonitoringPeriod **_field1;
        struct MonitoringPeriod **_field2;
        struct MonitoringPeriod **_field3;
        struct __compressed_pair<CLHealthAssessmentNotifier::MonitoringPeriod **, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod *>> {
            struct MonitoringPeriod **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLHealthAssessmentNotifier::MonitoringPeriod>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLHealthAssessmentNotifier::WristStatus, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus>> {
    struct __split_buffer<CLHealthAssessmentNotifier::WristStatus *, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus *>> {
        struct WristStatus **_field1;
        struct WristStatus **_field2;
        struct WristStatus **_field3;
        struct __compressed_pair<CLHealthAssessmentNotifier::WristStatus **, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus *>> {
            struct WristStatus **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLHealthAssessmentNotifier::WristStatus>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo>> {
    struct __split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *>> {
        struct MotionInfo **_field1;
        struct MotionInfo **_field2;
        struct MotionInfo **_field3;
        struct __compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *>> {
            struct MotionInfo **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLMotionCoprocessorInterface::MotionState, std::__1::allocator<CLMotionCoprocessorInterface::MotionState>> {
    struct __split_buffer<CLMotionCoprocessorInterface::MotionState *, std::__1::allocator<CLMotionCoprocessorInterface::MotionState *>> {
        struct MotionState **_field1;
        struct MotionState **_field2;
        struct MotionState **_field3;
        struct __compressed_pair<CLMotionCoprocessorInterface::MotionState **, std::__1::allocator<CLMotionCoprocessorInterface::MotionState *>> {
            struct MotionState **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLMotionCoprocessorInterface::MotionState>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity>> {
    struct __split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *>> {
        struct MediatedMotionActivity **_field1;
        struct MediatedMotionActivity **_field2;
        struct MediatedMotionActivity **_field3;
        struct __compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *>> {
            struct MediatedMotionActivity **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> {
    struct __split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *>> {
        struct CLOdometerEntry **_field1;
        struct CLOdometerEntry **_field2;
        struct CLOdometerEntry **_field3;
        struct __compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *>> {
            struct CLOdometerEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket>> {
    struct __split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *>> {
        struct CLSensorRecorderDataPacket **_field1;
        struct CLSensorRecorderDataPacket **_field2;
        struct CLSensorRecorderDataPacket **_field3;
        struct __compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *>> {
            struct CLSensorRecorderDataPacket **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> {
    struct __split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *>> {
        struct CLStepCountEntry **_field1;
        struct CLStepCountEntry **_field2;
        struct CLStepCountEntry **_field3;
        struct __compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *>> {
            struct CLStepCountEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry>> {
    struct __split_buffer<CLStrideCalEntry *, std::__1::allocator<CLStrideCalEntry *>> {
        struct CLStrideCalEntry **__first_;
        struct CLStrideCalEntry **__begin_;
        struct CLStrideCalEntry **__end_;
        struct __compressed_pair<CLStrideCalEntry **, std::__1::allocator<CLStrideCalEntry *>> {
            struct CLStrideCalEntry **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLStrideCalEntry>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry>> {
    struct __split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *>> {
        struct StrokeEntry **_field1;
        struct StrokeEntry **_field2;
        struct StrokeEntry **_field3;
        struct __compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *>> {
            struct StrokeEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry>> {
    struct __split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *>> {
        struct StyleEntry **_field1;
        struct StyleEntry **_field2;
        struct StyleEntry **_field3;
        struct __compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *>> {
            struct StyleEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn>> {
    struct __split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *>> {
        struct CLSwimDetectedTurn **_field1;
        struct CLSwimDetectedTurn **_field2;
        struct CLSwimDetectedTurn **_field3;
        struct __compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *>> {
            struct CLSwimDetectedTurn **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLSwimEntry, std::__1::allocator<CLSwimEntry>> {
    struct __split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *>> {
        struct CLSwimEntry **_field1;
        struct CLSwimEntry **_field2;
        struct CLSwimEntry **_field3;
        struct __compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *>> {
            struct CLSwimEntry **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLVO2MaxInputCollector::HRSample, std::__1::allocator<CLVO2MaxInputCollector::HRSample>> {
    struct __split_buffer<CLVO2MaxInputCollector::HRSample *, std::__1::allocator<CLVO2MaxInputCollector::HRSample *>> {
        struct HRSample **_field1;
        struct HRSample **_field2;
        struct HRSample **_field3;
        struct __compressed_pair<CLVO2MaxInputCollector::HRSample **, std::__1::allocator<CLVO2MaxInputCollector::HRSample *>> {
            struct HRSample **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLVO2MaxInputCollector::HRSample>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo>> {
    struct __split_buffer<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo *, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo *>> {
        struct CLBTDialogDeviceInfo **_field1;
        struct CLBTDialogDeviceInfo **_field2;
        struct CLBTDialogDeviceInfo **_field3;
        struct __compressed_pair<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo **, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo *>> {
            struct CLBTDialogDeviceInfo **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLVehicleConnectionNotifier::CLBTDialogDeviceInfo>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLWifiService::ScanRequest, std::__1::allocator<CLWifiService::ScanRequest>> {
    struct __split_buffer<CLWifiService::ScanRequest *, std::__1::allocator<CLWifiService::ScanRequest *>> {
        struct ScanRequest **_field1;
        struct ScanRequest **_field2;
        struct ScanRequest **_field3;
        struct __compressed_pair<CLWifiService::ScanRequest **, std::__1::allocator<CLWifiService::ScanRequest *>> {
            struct ScanRequest **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLWifiService::ScanRequest>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLWorkoutClassifier_Type::CLWorkoutClassifierResult, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>> {
    struct __split_buffer<CLWorkoutClassifier_Type::CLWorkoutClassifierResult *, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult *>> {
        CDStruct_183601bc **_field1;
        CDStruct_183601bc **_field2;
        CDStruct_183601bc **_field3;
        struct __compressed_pair<CLWorkoutClassifier_Type::CLWorkoutClassifierResult **, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult *>> {
            CDStruct_183601bc **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLWorkoutClassifier_Type::CLWorkoutClassifierResult>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLWorkoutPredictorTurnDetector::Turn, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn>> {
    struct __split_buffer<CLWorkoutPredictorTurnDetector::Turn *, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn *>> {
        struct Turn **_field1;
        struct Turn **_field2;
        struct Turn **_field3;
        struct __compressed_pair<CLWorkoutPredictorTurnDetector::Turn **, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn *>> {
            struct Turn **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLWorkoutPredictorTurnDetector::Turn>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<CLWorkoutPredictorWatchPressure, std::__1::allocator<CLWorkoutPredictorWatchPressure>> {
    struct __split_buffer<CLWorkoutPredictorWatchPressure *, std::__1::allocator<CLWorkoutPredictorWatchPressure *>> {
        struct CLWorkoutPredictorWatchPressure **_field1;
        struct CLWorkoutPredictorWatchPressure **_field2;
        struct CLWorkoutPredictorWatchPressure **_field3;
        struct __compressed_pair<CLWorkoutPredictorWatchPressure **, std::__1::allocator<CLWorkoutPredictorWatchPressure *>> {
            struct CLWorkoutPredictorWatchPressure **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<CLWorkoutPredictorWatchPressure>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<VO2MaxInput, std::__1::allocator<VO2MaxInput>> {
    struct __split_buffer<VO2MaxInput *, std::__1::allocator<VO2MaxInput *>> {
        struct VO2MaxInput **_field1;
        struct VO2MaxInput **_field2;
        struct VO2MaxInput **_field3;
        struct __compressed_pair<VO2MaxInput **, std::__1::allocator<VO2MaxInput *>> {
            struct VO2MaxInput **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<VO2MaxInput>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<VO2MaxOutput, std::__1::allocator<VO2MaxOutput>> {
    struct __split_buffer<VO2MaxOutput *, std::__1::allocator<VO2MaxOutput *>> {
        struct VO2MaxOutput **_field1;
        struct VO2MaxOutput **_field2;
        struct VO2MaxOutput **_field3;
        struct __compressed_pair<VO2MaxOutput **, std::__1::allocator<VO2MaxOutput *>> {
            struct VO2MaxOutput **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<VO2MaxOutput>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<_CLFitnessMachineData, std::__1::allocator<_CLFitnessMachineData>> {
    struct __split_buffer<_CLFitnessMachineData *, std::__1::allocator<_CLFitnessMachineData *>> {
        struct _CLFitnessMachineData **_field1;
        struct _CLFitnessMachineData **_field2;
        struct _CLFitnessMachineData **_field3;
        struct __compressed_pair<_CLFitnessMachineData **, std::__1::allocator<_CLFitnessMachineData *>> {
            struct _CLFitnessMachineData **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<_CLFitnessMachineData>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<double, std::__1::allocator<double>> {
    struct __split_buffer<double *, std::__1::allocator<double *>> {
        double **_field1;
        double **_field2;
        double **_field3;
        struct __compressed_pair<double **, std::__1::allocator<double *>> {
            double **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<double>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<float, std::__1::allocator<float>> {
    struct __split_buffer<float *, std::__1::allocator<float *>> {
        float **_field1;
        float **_field2;
        float **_field3;
        struct __compressed_pair<float **, std::__1::allocator<float *>> {
            float **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<float>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>>> {
    struct __split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>*, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>*>> {
        struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long> **_field1;
        struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long> **_field2;
        struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long> **_field3;
        struct __compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>**, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>*>> {
            struct __tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *>*, long>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>>> {
    struct __split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>*, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>*>> {
        struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long> **_field1;
        struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long> **_field2;
        struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long> **_field3;
        struct __compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>**, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>*>> {
            struct __tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *>*, long>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double>>> {
    struct __split_buffer<std::__1::pair<double, double>*, std::__1::allocator<std::__1::pair<double, double>*>> {
        struct pair<double, double> **__first_;
        struct pair<double, double> **__begin_;
        struct pair<double, double> **__end_;
        struct __compressed_pair<std::__1::pair<double, double>**, std::__1::allocator<std::__1::pair<double, double>*>> {
            struct pair<double, double> **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float>>> {
    struct __split_buffer<std::__1::pair<double, float>*, std::__1::allocator<std::__1::pair<double, float>*>> {
        struct pair<double, float> **_field1;
        struct pair<double, float> **_field2;
        struct pair<double, float> **_field3;
        struct __compressed_pair<std::__1::pair<double, float>**, std::__1::allocator<std::__1::pair<double, float>*>> {
            struct pair<double, float> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>> {
    struct __split_buffer<std::__1::pair<double, unsigned int>*, std::__1::allocator<std::__1::pair<double, unsigned int>*>> {
        struct pair<double, unsigned int> **__first_;
        struct pair<double, unsigned int> **__begin_;
        struct pair<double, unsigned int> **__end_;
        struct __compressed_pair<std::__1::pair<double, unsigned int>**, std::__1::allocator<std::__1::pair<double, unsigned int>*>> {
            struct pair<double, unsigned int> **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>> {
    struct __split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>*, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>*>> {
        struct vector<unsigned int, std::__1::allocator<unsigned int>> **_field1;
        struct vector<unsigned int, std::__1::allocator<unsigned int>> **_field2;
        struct vector<unsigned int, std::__1::allocator<unsigned int>> **_field3;
        struct __compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>**, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>*>> {
            struct vector<unsigned int, std::__1::allocator<unsigned int>> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>>> {
        unsigned long long _field1;
    } _field3;
};

struct duration<long double, std::__1::ratio<1, 1>> {
    long double __rep_;
};

struct function<bool (bool)> {
    struct type _field1;
    struct __base<bool (bool)> *_field2;
};

struct function<bool (void *, bool)> {
    struct type __buf_;
    struct __base<bool (void *, bool)> *__f_;
};

struct function<void (CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)> {
    struct type _field1;
    struct __base<void (CLWorkoutPredictor_Type::Notification, CLWorkoutPredictor_Type::NotificationData)> *_field2;
};

struct function<void (double)> {
    struct type _field1;
    struct __base<void (double)> *_field2;
};

struct function<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)> {
    struct type _field1;
    struct __base<void (int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)> *_field2;
};

struct list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch>> {
    struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLBTLEBeaconProviderMock::ScanRequest, std::__1::allocator<CLBTLEBeaconProviderMock::ScanRequest>> {
    struct __list_node_base<CLBTLEBeaconProviderMock::ScanRequest, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProviderMock::ScanRequest, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLBTLEBeaconProvider_Type::ProximityScanEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityScanEvent>> {
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityScanEvent, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLBTLEBeaconProvider_Type::ProximityZoneEvent, std::__1::allocator<CLBTLEBeaconProvider_Type::ProximityZoneEvent>> {
    struct __list_node_base<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconProvider_Type::ProximityZoneEvent, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>> {
    struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLDaemonClient::MessageRef, std::__1::allocator<CLDaemonClient::MessageRef>> {
    struct __list_node_base<CLDaemonClient::MessageRef, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonClient::MessageRef, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation>> {
    struct __list_node_base<CLDaemonLocation, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence>> {
    struct __list_node_base<CLFenceManager_Type::CombinedFence, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLMotionActivity, std::__1::allocator<CLMotionActivity>> {
    struct __list_node_base<CLMotionActivity, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry>> {
    struct __list_node_base<CLOdometerEntry, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket>> {
    struct __list_node_base<CLSensorRecorderDataPacket, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *>> {
    struct __list_node_base<sqlite3_stmt *, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<unsigned int, std::__1::allocator<unsigned int>> {
    struct __list_node_base<unsigned int, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>>> {
    struct __tree<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconProvider_Type::ProximityZone, std::__1::__value_type<CLBTLEBeaconProvider_Type::ProximityZone, CLBTLEBeaconProviderMock::ProximityZoneRegistration>, std::__1::less<CLBTLEBeaconProvider_Type::ProximityZone>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *>>> {
    struct __tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLConnection *, CLDaemonGenericClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonGenericClient *>>> {
    struct __tree<std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonGenericClient *>, std::__1::less<CLConnection *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *>>> {
    struct __tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence>>> {
    struct __tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>>> {
    struct __tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool>>> {
    struct __tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLLocationController::LocationProvider, CLLocationController::ProviderClient, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, CLLocationController::ProviderClient>>> {
    struct __tree<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, CLLocationController::ProviderClient>, std::__1::less<CLLocationController::LocationProvider>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>, std::__1::less<CLLocationController::LocationProvider>, std::__1::allocator<std::__1::pair<const CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>>> {
    struct __tree<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>, std::__1::less<CLLocationController::LocationProvider>, true>, std::__1::allocator<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationController::LocationProvider, std::__1::__value_type<CLLocationController::LocationProvider, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>>>, std::__1::less<CLLocationController::LocationProvider>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool>>> {
    struct __tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double>>> {
    struct __tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double>>> {
    struct __tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double>>> {
    struct __tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double>>> {
    struct __tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double>>> {
    struct __tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *>>> {
    struct __tree<std::__1::__value_type<TileId, CLTileFile *>, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTileFile *>, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, CLTileFile *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, CLTileFile *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, CLTileFile *>, std::__1::less<TileId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>>> {
    struct __tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile>>>, std::__1::less<TileId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double>>> {
    struct __tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *>>> {
    struct __tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<int, CLDaemonLocation, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLDaemonLocation>>> {
    struct __tree<std::__1::__value_type<int, CLDaemonLocation>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLDaemonLocation>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLDaemonLocation>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLDaemonLocation>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCellTilesManager_Type::Notification, CLCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactEvent, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char>>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionAlarm_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSpringTrackingNotifier_Type::Notification, CLSpringTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int>>> {
    struct __tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>>> {
    struct __tree<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLPressure::Sample, std::__1::allocator<CLPressure::Sample>>>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<int, std::__1::vector<int, std::__1::allocator<int>>, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::vector<int, std::__1::allocator<int>>>>> {
    struct __tree<std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::vector<int, std::__1::allocator<int>>>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, CLBTDeviceEntry, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBTDeviceEntry>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBTDeviceEntry>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, CLFenceManager::TokenBucket, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLFenceManager::TokenBucket>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, CLFenceManager::TokenBucket>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLFenceManager::TokenBucket>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLFenceManager::TokenBucket>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLFenceManager::TokenBucket>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLFenceManager::TokenBucket>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLLocationDictionaryUtilitiesEntityClass>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, unsigned int, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned int>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned int>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>>> {
    struct __tree<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>>>, std::__1::less<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int>>> {
    struct __tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct multiset<double, std::__1::less<double>, std::__1::allocator<double>> {
    struct __tree<double, std::__1::less<double>, std::__1::allocator<double>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<double, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<double>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct multiset<float, std::__1::less<float>, std::__1::allocator<float>> {
    struct __tree<float, std::__1::less<float>, std::__1::allocator<float>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<float, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<float>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct optional<CLMicroLocationProto::NowPlaying> {
    union {
        char _field1;
        struct NowPlaying _field2;
    } _field1;
    _Bool _field2;
};

struct optional<CLOldWifiScanner::LocationConfiguration> {
    union {
        char _field1;
        struct LocationConfiguration _field2;
    } _field1;
    _Bool _field2;
};

struct optional<CLWifiService_Type::AccessPoint> {
    union {
        char _field1;
        struct AccessPoint _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::__1::chrono::time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>>> {
    union {
        char _field1;
        time_point_406bde99 _field2;
    } _field1;
    _Bool _field2;
};

struct os_state_hints_s {
    unsigned int _field1;
    char *_field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct ostream;

struct pair<double, CLMotionActivity::Type>;

struct pair<double, double>;

struct pair<double, float>;

struct pair<double, unsigned int>;

struct queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>>> {
    struct deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int>>> c;
};

struct set<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification>> {
    struct __tree<CLClientManager_Type::Notification, std::__1::less<CLClientManager_Type::Notification>, std::__1::allocator<CLClientManager_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLClientManager_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLClientManager_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification>> {
    struct __tree<CLDaemonStatus_Type::Notification, std::__1::less<CLDaemonStatus_Type::Notification>, std::__1::allocator<CLDaemonStatus_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLDaemonStatus_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLDaemonStatus_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification>> {
    struct __tree<CLDataProtectionManager_Type::Notification, std::__1::less<CLDataProtectionManager_Type::Notification>, std::__1::allocator<CLDataProtectionManager_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLDataProtectionManager_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLDataProtectionManager_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence>> {
    struct __tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification>> {
    struct __tree<CLLocationProvider_Type::Notification, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<CLLocationProvider_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLLocationProvider_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLLocationProvider_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *>> {
    struct __tree<CLMapMatchingEngine *, std::__1::less<CLMapMatchingEngine *>, std::__1::allocator<CLMapMatchingEngine *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLMapMatchingEngine *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLMapMatchingEngine *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification>> {
    struct __tree<CLMotionState_Type::Notification, std::__1::less<CLMotionState_Type::Notification>, std::__1::allocator<CLMotionState_Type::Notification>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLMotionState_Type::Notification, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLMotionState_Type::Notification>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *>> {
    struct __tree<CLNetworkLocationServerResponseListener *, std::__1::less<CLNetworkLocationServerResponseListener *>, std::__1::allocator<CLNetworkLocationServerResponseListener *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationServerResponseListener *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CLNetworkLocationServerResponseListener *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<CMActivityAlarmLocal *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarmLocal *>> {
    struct __tree<CMActivityAlarmLocal *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarmLocal *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CMActivityAlarmLocal *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, CLActivityAlarmConcentrator::AlarmCompare> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<int, std::__1::less<int>, std::__1::allocator<int>> {
    struct __tree<int, std::__1::less<int>, std::__1::allocator<int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<long, std::__1::less<long>, std::__1::allocator<long>> {
    struct __tree<long, std::__1::less<long>, std::__1::allocator<long>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<long, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<long>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> {
    struct __tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<unsigned int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<CL::Wifi1::IPlatformInfo> {
    struct IPlatformInfo *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityAggregator<CLSignificantElevation, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityAggregator<CLSignificantElevation, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityLoggerPolicy> {
    struct CLActivityLoggerPolicy *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLExerciseMinuteData, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLNatalieData, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLSedentaryAlarmData, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLSpringTrackerEntry, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy>> {
    struct CLActivityRecorderDb<CLStepCountEntry, CLActivityDB::ClassCDataProtectionPolicy> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLBatchedLocations> {
    struct CLBatchedLocations *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLElevationRecorderDb> {
    struct CLElevationRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLExerciseMinuteRecorderDb> {
    struct CLExerciseMinuteRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLHarvestController> {
    struct CLHarvestController *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLICachedLookupWifiAccessPointLocationService> {
    struct CLICachedLookupWifiAccessPointLocationService *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLIoHidInterface::Device> {
    struct Device *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLMapGeometry> {
    struct CLMapGeometry *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLMicroLocationWifiScanStrategy> {
    struct CLMicroLocationWifiScanStrategy *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLMonitorGps> {
    struct CLMonitorGps *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLNatalieModelInput> {
    struct CLNatalieModelInput *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLNatalieModelInterface> {
    struct CLNatalieModelInterface *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLNatalimetryRecorderDb> {
    struct CLNatalimetryRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLParkinsonsResultRecorderDb> {
    struct CLParkinsonsResultRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLPolicyProactive> {
    struct CLPolicyProactive *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLPolicyTrip> {
    struct CLPolicyTrip *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLSedentaryAlarmRecorderDb> {
    struct CLSedentaryAlarmRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLSkiRecorderDb> {
    struct CLSkiRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLSpringTrackerRecorderDb> {
    struct CLSpringTrackerRecorderDb *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLStepCountRecorderDb> {
    struct CLStepCountRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<CLSubHarvester>;

struct shared_ptr<CLVO2MaxInputCache> {
    struct CLVO2MaxInputCache *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLWifiAccessPointLocationService> {
    struct CLWifiAccessPointLocationService *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLWifiLocationProvider::IExternal> {
    struct IExternal *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CMMsl::Writer> {
    struct Writer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<DestructionAwareMutexInternal> {
    struct DestructionAwareMutexInternal *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const gnss::MeasurementData> {
    struct MeasurementData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<int> {
    int *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<unsigned char> {
    char *_field1;
    struct __shared_weak_count *_field2;
};

struct sqlite3;

struct sqlite3_stmt;

struct time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>> {
    struct duration<long double, std::__1::ratio<1, 1>> __d_;
};

struct type {
    unsigned char __lx[24];
};

struct unique_ptr<CLAccessoryLocationProvider_Type::Client, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client>> {
    struct __compressed_pair<CLAccessoryLocationProvider_Type::Client *, std::__1::default_delete<CLAccessoryLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>, std::__1::default_delete<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>>> {
    struct __compressed_pair<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>*, std::__1::default_delete<CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>>> {
        struct CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy> *_field1;
    } _field1;
};

struct unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary>> {
    struct __compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary>> {
        struct CLAggregateDictionary *_field1;
    } _field1;
};

struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> {
    struct __compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client>> {
    struct __compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client>> {
    struct __compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> {
    struct __compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client>> {
    struct __compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider>> {
    struct __compressed_pair<CLBundleLocationProvider *, std::__1::default_delete<CLBundleLocationProvider>> {
        struct CLBundleLocationProvider *__value_;
    } __ptr_;
};

struct unique_ptr<CLBundleLocationProvider_Type::Client, std::__1::default_delete<CLBundleLocationProvider_Type::Client>> {
    struct __compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client>> {
    struct __compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client>> {
    struct __compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client>> {
    struct __compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase>> {
    struct __compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase>> {
        struct CLCdmaCellEncryptedLocationDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase>> {
    struct __compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase>> {
        struct CLCellEncryptedLocationDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLCellTilesManager_Type::Client, std::__1::default_delete<CLCellTilesManager_Type::Client>> {
    struct __compressed_pair<CLCellTilesManager_Type::Client *, std::__1::default_delete<CLCellTilesManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> {
    struct __compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name>> {
    struct __compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name>> {
        struct Name *_field1;
    } _field1;
};

struct unique_ptr<CLCoarseCellTilesManager_Type::Client, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client>> {
    struct __compressed_pair<CLCoarseCellTilesManager_Type::Client *, std::__1::default_delete<CLCoarseCellTilesManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client>> {
    struct __compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> {
    struct __compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> {
    struct __compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> {
    struct __compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLFallMetMinuteStats, std::__1::default_delete<CLFallMetMinuteStats>> {
    struct __compressed_pair<CLFallMetMinuteStats *, std::__1::default_delete<CLFallMetMinuteStats>> {
        struct CLFallMetMinuteStats *_field1;
    } _field1;
};

struct unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client>> {
    struct __compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client>> {
    struct __compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client>> {
    struct __compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client>> {
    struct __compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client>> {
    struct __compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client>> {
    struct __compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload>> {
    struct __compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload>> {
        struct CLFileDownload *_field1;
    } _field1;
};

struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client>> {
    struct __compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLFitnessMachineNotifier_Type::Client, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client>> {
    struct __compressed_pair<CLFitnessMachineNotifier_Type::Client *, std::__1::default_delete<CLFitnessMachineNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> {
    struct __compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> {
    struct __compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client>> {
    struct __compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client>> {
    struct __compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLICellTilesManagerExternal, std::__1::default_delete<CLICellTilesManagerExternal>> {
    struct __compressed_pair<CLICellTilesManagerExternal *, std::__1::default_delete<CLICellTilesManagerExternal>> {
        struct CLICellTilesManagerExternal *_field1;
    } _field1;
};

struct unique_ptr<CLICoarseCellTilesManagerExternal, std::__1::default_delete<CLICoarseCellTilesManagerExternal>> {
    struct __compressed_pair<CLICoarseCellTilesManagerExternal *, std::__1::default_delete<CLICoarseCellTilesManagerExternal>> {
        struct CLICoarseCellTilesManagerExternal *_field1;
    } _field1;
};

struct unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal>> {
    struct __compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal>> {
        struct CLINetworkLocationProviderExternal *_field1;
    } _field1;
};

struct unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager>> {
    struct __compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager>> {
        struct CLITileSyncManager *_field1;
    } _field1;
};

struct unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal>> {
    struct __compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal>> {
        struct CLITilesManagerExternal *_field1;
    } _field1;
};

struct unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal>> {
    struct __compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal>> {
        struct CLIWifiTilesManagerExternal *_field1;
    } _field1;
};

struct unique_ptr<CLInUseAssertionLogic::Assertion, std::__1::default_delete<CLInUseAssertionLogic::Assertion>> {
    struct __compressed_pair<CLInUseAssertionLogic::Assertion *, std::__1::default_delete<CLInUseAssertionLogic::Assertion>> {
        struct Assertion *_field1;
    } _field1;
};

struct unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client>> {
    struct __compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> {
    struct __compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client>> {
    struct __compressed_pair<CLLocationProvider_Type::Client *, std::__1::default_delete<CLLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase>> {
    struct __compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase>> {
        struct CLLteCellEncryptedLocationDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities>> {
    struct __compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities>> {
        struct CLMicroLocationBackgroundActivities *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable>> {
    struct __compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable>> {
        struct CLMicroLocationConfigurationTable *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable>> {
    struct __compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable>> {
        struct CLMicroLocationMeasurementTable *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable>> {
    struct __compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable>> {
        struct CLMicroLocationModelTable *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client>> {
    struct __compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction>> {
    struct __compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction>> {
        struct RecordingTransaction *_field1;
    } _field1;
};

struct unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable>> {
    struct __compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable>> {
        struct CLMicroLocationRecordingEventsTable *_field1;
    } _field1;
};

struct unique_ptr<CLMotionActivity, std::__1::default_delete<CLMotionActivity>> {
    struct __compressed_pair<CLMotionActivity *, std::__1::default_delete<CLMotionActivity>> {
        struct CLMotionActivity *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionAlarmDatabase, std::__1::default_delete<CLMotionAlarmDatabase>> {
    struct __compressed_pair<CLMotionAlarmDatabase *, std::__1::default_delete<CLMotionAlarmDatabase>> {
        struct CLMotionAlarmDatabase *_field1;
    } _field1;
};

struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher>> {
    struct __compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher>> {
        struct Dispatcher *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>>> {
    struct __compressed_pair<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>*, std::__1::default_delete<CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>>> {
        struct SiloDispatcher<CLDeviceMotion::Sample> *_field1;
    } _field1;
};

struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client>> {
    struct __compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLMotionStateObserver_Type::Client, std::__1::default_delete<CLMotionStateObserver_Type::Client>> {
    struct __compressed_pair<CLMotionStateObserver_Type::Client *, std::__1::default_delete<CLMotionStateObserver_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client>> {
    struct __compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> {
    struct __compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client>> {
    struct __compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client>> {
    struct __compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine>> {
    struct __compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine>> {
        struct CLOutdoorMatchingEngine *_field1;
    } _field1;
};

struct unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client>> {
    struct __compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore>> {
    struct __compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore>> {
        struct CLPersistentStore *_field1;
    } _field1;
};

struct unique_ptr<CLPersistentTimer, std::__1::default_delete<CLPersistentTimer>> {
    struct __compressed_pair<CLPersistentTimer *, std::__1::default_delete<CLPersistentTimer>> {
        struct CLPersistentTimer *_field1;
    } _field1;
};

struct unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion>> {
    struct __compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion>> {
        struct CLPowerAssertion *__value_;
    } __ptr_;
};

struct unique_ptr<CLPressureBias_Type::Client, std::__1::default_delete<CLPressureBias_Type::Client>> {
    struct __compressed_pair<CLPressureBias_Type::Client *, std::__1::default_delete<CLPressureBias_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLPressureCalibrationDatabase_Type::Client, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client>> {
    struct __compressed_pair<CLPressureCalibrationDatabase_Type::Client *, std::__1::default_delete<CLPressureCalibrationDatabase_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLRavenController, void (*)(CLRavenController *)> {
    struct __compressed_pair<CLRavenController *, void (*)(CLRavenController *)> {
        struct CLRavenController *_field1;
        CDUnknownFunctionPointerType _field2;
    } _field1;
};

struct unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client>> {
    struct __compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector>> {
    struct __compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector>> {
        struct CLSensorCalibrationStaticDetector *_field1;
    } _field1;
};

struct unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController>> {
    struct __compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController>> {
        struct CLSensorTemperatureController *_field1;
    } _field1;
};

struct unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider>> {
    struct __compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider>> {
        struct CLServiceLocationProvider *_field1;
    } _field1;
};

struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> {
    struct __compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> {
    struct __compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLSkiController, std::__1::default_delete<CLSkiController>> {
    struct __compressed_pair<CLSkiController *, std::__1::default_delete<CLSkiController>> {
        struct CLSkiController *_field1;
    } _field1;
};

struct unique_ptr<CLSkiNotifier_Type::Client, std::__1::default_delete<CLSkiNotifier_Type::Client>> {
    struct __compressed_pair<CLSkiNotifier_Type::Client *, std::__1::default_delete<CLSkiNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client>> {
    struct __compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client>> {
    struct __compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine>> {
    struct __compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine>> {
        struct CLStreamingAwareLocationProviderStateMachine *_field1;
    } _field1;
};

struct unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client>> {
    struct __compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLSuggestedActionDatabase, std::__1::default_delete<CLSuggestedActionDatabase>> {
    struct __compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase>> {
        struct CLSuggestedActionDatabase *__value_;
    } __ptr_;
};

struct unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController>> {
    struct __compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController>> {
        struct CLSwimAlgController *_field1;
    } _field1;
};

struct unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion>> {
    struct __compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion>> {
        struct CLSwimFusion *_field1;
    } _field1;
};

struct unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client>> {
    struct __compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLTelephonyIratManager, std::__1::default_delete<CLTelephonyIratManager>> {
    struct __compressed_pair<CLTelephonyIratManager *, std::__1::default_delete<CLTelephonyIratManager>> {
        struct CLTelephonyIratManager *_field1;
    } _field1;
};

struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> {
    struct __compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLTileDownloader, std::__1::default_delete<CLTileDownloader>> {
    struct __compressed_pair<CLTileDownloader *, std::__1::default_delete<CLTileDownloader>> {
        struct CLTileDownloader *_field1;
    } _field1;
};

struct unique_ptr<CLTileSyncManager::IExternal, std::__1::default_delete<CLTileSyncManager::IExternal>> {
    struct __compressed_pair<CLTileSyncManager::IExternal *, std::__1::default_delete<CLTileSyncManager::IExternal>> {
        struct IExternal *_field1;
    } _field1;
};

struct unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>;

struct unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client>> {
    struct __compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLVehicleConnectionNotifier_Type::Client, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client>> {
    struct __compressed_pair<CLVehicleConnectionNotifier_Type::Client *, std::__1::default_delete<CLVehicleConnectionNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> {
    struct __compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner>> {
    struct __compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner>> {
        struct CLWifiScanner *_field1;
    } _field1;
};

struct unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal>> {
    struct __compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal>> {
        struct IExternal *_field1;
    } _field1;
};

struct unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient>> {
    struct __compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient>> {
        struct CLWifiServiceClient *_field1;
    } _field1;
};

struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> {
    struct __compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client>> {
        struct Client *__value_;
    } __ptr_;
};

struct unique_ptr<CLWorkoutIndoorOutdoorDetector, std::__1::default_delete<CLWorkoutIndoorOutdoorDetector>> {
    struct __compressed_pair<CLWorkoutIndoorOutdoorDetector *, std::__1::default_delete<CLWorkoutIndoorOutdoorDetector>> {
        struct CLWorkoutIndoorOutdoorDetector *_field1;
    } _field1;
};

struct unique_ptr<CLWorkoutLabeler, std::__1::default_delete<CLWorkoutLabeler>> {
    struct __compressed_pair<CLWorkoutLabeler *, std::__1::default_delete<CLWorkoutLabeler>> {
        struct CLWorkoutLabeler *_field1;
    } _field1;
};

struct unique_ptr<CLWorkoutPredictorTier2Classifier, std::__1::default_delete<CLWorkoutPredictorTier2Classifier>> {
    struct __compressed_pair<CLWorkoutPredictorTier2Classifier *, std::__1::default_delete<CLWorkoutPredictorTier2Classifier>> {
        struct CLWorkoutPredictorTier2Classifier *_field1;
    } _field1;
};

struct unique_ptr<CLWorkoutPredictorTurnDetector, std::__1::default_delete<CLWorkoutPredictorTurnDetector>> {
    struct __compressed_pair<CLWorkoutPredictorTurnDetector *, std::__1::default_delete<CLWorkoutPredictorTurnDetector>> {
        struct CLWorkoutPredictorTurnDetector *_field1;
    } _field1;
};

struct unique_ptr<CLWorkoutStopDetector, std::__1::default_delete<CLWorkoutStopDetector>> {
    struct __compressed_pair<CLWorkoutStopDetector *, std::__1::default_delete<CLWorkoutStopDetector>> {
        struct CLWorkoutStopDetector *_field1;
    } _field1;
};

struct unique_ptr<CMMsl::Accel, std::__1::default_delete<CMMsl::Accel>> {
    struct __compressed_pair<CMMsl::Accel *, std::__1::default_delete<CMMsl::Accel>> {
        struct Accel *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccelBatch, std::__1::default_delete<CMMsl::AccelBatch>> {
    struct __compressed_pair<CMMsl::AccelBatch *, std::__1::default_delete<CMMsl::AccelBatch>> {
        struct AccelBatch *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccelGesture, std::__1::default_delete<CMMsl::AccelGesture>> {
    struct __compressed_pair<CMMsl::AccelGesture *, std::__1::default_delete<CMMsl::AccelGesture>> {
        struct AccelGesture *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccelGps, std::__1::default_delete<CMMsl::AccelGps>> {
    struct __compressed_pair<CMMsl::AccelGps *, std::__1::default_delete<CMMsl::AccelGps>> {
        struct AccelGps *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccelOscarEmu, std::__1::default_delete<CMMsl::AccelOscarEmu>> {
    struct __compressed_pair<CMMsl::AccelOscarEmu *, std::__1::default_delete<CMMsl::AccelOscarEmu>> {
        struct AccelOscarEmu *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryAccel, std::__1::default_delete<CMMsl::AccessoryAccel>> {
    struct __compressed_pair<CMMsl::AccessoryAccel *, std::__1::default_delete<CMMsl::AccessoryAccel>> {
        struct AccessoryAccel *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryAccelConfig, std::__1::default_delete<CMMsl::AccessoryAccelConfig>> {
    struct __compressed_pair<CMMsl::AccessoryAccelConfig *, std::__1::default_delete<CMMsl::AccessoryAccelConfig>> {
        struct AccessoryAccelConfig *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryConfig, std::__1::default_delete<CMMsl::AccessoryConfig>> {
    struct __compressed_pair<CMMsl::AccessoryConfig *, std::__1::default_delete<CMMsl::AccessoryConfig>> {
        struct AccessoryConfig *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryGyro, std::__1::default_delete<CMMsl::AccessoryGyro>> {
    struct __compressed_pair<CMMsl::AccessoryGyro *, std::__1::default_delete<CMMsl::AccessoryGyro>> {
        struct AccessoryGyro *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryProx, std::__1::default_delete<CMMsl::AccessoryProx>> {
    struct __compressed_pair<CMMsl::AccessoryProx *, std::__1::default_delete<CMMsl::AccessoryProx>> {
        struct AccessoryProx *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryProxSensorDrop, std::__1::default_delete<CMMsl::AccessoryProxSensorDrop>> {
    struct __compressed_pair<CMMsl::AccessoryProxSensorDrop *, std::__1::default_delete<CMMsl::AccessoryProxSensorDrop>> {
        struct AccessoryProxSensorDrop *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryProxTempComp, std::__1::default_delete<CMMsl::AccessoryProxTempComp>> {
    struct __compressed_pair<CMMsl::AccessoryProxTempComp *, std::__1::default_delete<CMMsl::AccessoryProxTempComp>> {
        struct AccessoryProxTempComp *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryProximityConfig, std::__1::default_delete<CMMsl::AccessoryProximityConfig>> {
    struct __compressed_pair<CMMsl::AccessoryProximityConfig *, std::__1::default_delete<CMMsl::AccessoryProximityConfig>> {
        struct AccessoryProximityConfig *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryWake, std::__1::default_delete<CMMsl::AccessoryWake>> {
    struct __compressed_pair<CMMsl::AccessoryWake *, std::__1::default_delete<CMMsl::AccessoryWake>> {
        struct AccessoryWake *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AccessoryWakeDebug, std::__1::default_delete<CMMsl::AccessoryWakeDebug>> {
    struct __compressed_pair<CMMsl::AccessoryWakeDebug *, std::__1::default_delete<CMMsl::AccessoryWakeDebug>> {
        struct AccessoryWakeDebug *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::AirpodEvent, std::__1::default_delete<CMMsl::AirpodEvent>> {
    struct __compressed_pair<CMMsl::AirpodEvent *, std::__1::default_delete<CMMsl::AirpodEvent>> {
        struct AirpodEvent *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::BTConnection, std::__1::default_delete<CMMsl::BTConnection>> {
    struct __compressed_pair<CMMsl::BTConnection *, std::__1::default_delete<CMMsl::BTConnection>> {
        struct BTConnection *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::BasebandSpeed, std::__1::default_delete<CMMsl::BasebandSpeed>> {
    struct __compressed_pair<CMMsl::BasebandSpeed *, std::__1::default_delete<CMMsl::BasebandSpeed>> {
        struct BasebandSpeed *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::BodyMetrics, std::__1::default_delete<CMMsl::BodyMetrics>> {
    struct __compressed_pair<CMMsl::BodyMetrics *, std::__1::default_delete<CMMsl::BodyMetrics>> {
        struct BodyMetrics *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::BraveHeartAccel, std::__1::default_delete<CMMsl::BraveHeartAccel>> {
    struct __compressed_pair<CMMsl::BraveHeartAccel *, std::__1::default_delete<CMMsl::BraveHeartAccel>> {
        struct BraveHeartAccel *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::BraveHeartDeviceMotion, std::__1::default_delete<CMMsl::BraveHeartDeviceMotion>> {
    struct __compressed_pair<CMMsl::BraveHeartDeviceMotion *, std::__1::default_delete<CMMsl::BraveHeartDeviceMotion>> {
        struct BraveHeartDeviceMotion *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::BraveHeartNatalieData, std::__1::default_delete<CMMsl::BraveHeartNatalieData>> {
    struct __compressed_pair<CMMsl::BraveHeartNatalieData *, std::__1::default_delete<CMMsl::BraveHeartNatalieData>> {
        struct BraveHeartNatalieData *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::BraveHeartVO2MaxInput, std::__1::default_delete<CMMsl::BraveHeartVO2MaxInput>> {
    struct __compressed_pair<CMMsl::BraveHeartVO2MaxInput *, std::__1::default_delete<CMMsl::BraveHeartVO2MaxInput>> {
        struct BraveHeartVO2MaxInput *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::BraveHeartWorkoutEvent, std::__1::default_delete<CMMsl::BraveHeartWorkoutEvent>> {
    struct __compressed_pair<CMMsl::BraveHeartWorkoutEvent *, std::__1::default_delete<CMMsl::BraveHeartWorkoutEvent>> {
        struct BraveHeartWorkoutEvent *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CalorimetryPauseEvent, std::__1::default_delete<CMMsl::CalorimetryPauseEvent>> {
    struct __compressed_pair<CMMsl::CalorimetryPauseEvent *, std::__1::default_delete<CMMsl::CalorimetryPauseEvent>> {
        struct CalorimetryPauseEvent *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CatherineHealthKitData, std::__1::default_delete<CMMsl::CatherineHealthKitData>> {
    struct __compressed_pair<CMMsl::CatherineHealthKitData *, std::__1::default_delete<CMMsl::CatherineHealthKitData>> {
        struct CatherineHealthKitData *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::ClefCalibration, std::__1::default_delete<CMMsl::ClefCalibration>> {
    struct __compressed_pair<CMMsl::ClefCalibration *, std::__1::default_delete<CMMsl::ClefCalibration>> {
        struct ClefCalibration *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CoarseElevationChange, std::__1::default_delete<CMMsl::CoarseElevationChange>> {
    struct __compressed_pair<CMMsl::CoarseElevationChange *, std::__1::default_delete<CMMsl::CoarseElevationChange>> {
        struct CoarseElevationChange *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::Compass, std::__1::default_delete<CMMsl::Compass>> {
    struct __compressed_pair<CMMsl::Compass *, std::__1::default_delete<CMMsl::Compass>> {
        struct Compass *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CompassAlignment, std::__1::default_delete<CMMsl::CompassAlignment>> {
    struct __compressed_pair<CMMsl::CompassAlignment *, std::__1::default_delete<CMMsl::CompassAlignment>> {
        struct CompassAlignment *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CompassCalibration, std::__1::default_delete<CMMsl::CompassCalibration>> {
    struct __compressed_pair<CMMsl::CompassCalibration *, std::__1::default_delete<CMMsl::CompassCalibration>> {
        struct CompassCalibration *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CompassConstraints, std::__1::default_delete<CMMsl::CompassConstraints>> {
    struct __compressed_pair<CMMsl::CompassConstraints *, std::__1::default_delete<CMMsl::CompassConstraints>> {
        struct CompassConstraints *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CompassCorrection, std::__1::default_delete<CMMsl::CompassCorrection>> {
    struct __compressed_pair<CMMsl::CompassCorrection *, std::__1::default_delete<CMMsl::CompassCorrection>> {
        struct CompassCorrection *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CourseConstraints, std::__1::default_delete<CMMsl::CourseConstraints>> {
    struct __compressed_pair<CMMsl::CourseConstraints *, std::__1::default_delete<CMMsl::CourseConstraints>> {
        struct CourseConstraints *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::CourseCorrection, std::__1::default_delete<CMMsl::CourseCorrection>> {
    struct __compressed_pair<CMMsl::CourseCorrection *, std::__1::default_delete<CMMsl::CourseCorrection>> {
        struct CourseCorrection *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::DeviceMotion, std::__1::default_delete<CMMsl::DeviceMotion>> {
    struct __compressed_pair<CMMsl::DeviceMotion *, std::__1::default_delete<CMMsl::DeviceMotion>> {
        struct DeviceMotion *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::DeviceMotionCovariance, std::__1::default_delete<CMMsl::DeviceMotionCovariance>> {
    struct __compressed_pair<CMMsl::DeviceMotionCovariance *, std::__1::default_delete<CMMsl::DeviceMotionCovariance>> {
        struct DeviceMotionCovariance *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::DoubleTap, std::__1::default_delete<CMMsl::DoubleTap>> {
    struct __compressed_pair<CMMsl::DoubleTap *, std::__1::default_delete<CMMsl::DoubleTap>> {
        struct DoubleTap *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::ElevationChange, std::__1::default_delete<CMMsl::ElevationChange>> {
    struct __compressed_pair<CMMsl::ElevationChange *, std::__1::default_delete<CMMsl::ElevationChange>> {
        struct ElevationChange *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::EnhancedDeviceMotion, std::__1::default_delete<CMMsl::EnhancedDeviceMotion>> {
    struct __compressed_pair<CMMsl::EnhancedDeviceMotion *, std::__1::default_delete<CMMsl::EnhancedDeviceMotion>> {
        struct EnhancedDeviceMotion *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::FallStats, std::__1::default_delete<CMMsl::FallStats>> {
    struct __compressed_pair<CMMsl::FallStats *, std::__1::default_delete<CMMsl::FallStats>> {
        struct FallStats *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GravityConstraints, std::__1::default_delete<CMMsl::GravityConstraints>> {
    struct __compressed_pair<CMMsl::GravityConstraints *, std::__1::default_delete<CMMsl::GravityConstraints>> {
        struct GravityConstraints *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GravityCorrection, std::__1::default_delete<CMMsl::GravityCorrection>> {
    struct __compressed_pair<CMMsl::GravityCorrection *, std::__1::default_delete<CMMsl::GravityCorrection>> {
        struct GravityCorrection *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::Gyro, std::__1::default_delete<CMMsl::Gyro>> {
    struct __compressed_pair<CMMsl::Gyro *, std::__1::default_delete<CMMsl::Gyro>> {
        struct Gyro *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroBiasAndVariance, std::__1::default_delete<CMMsl::GyroBiasAndVariance>> {
    struct __compressed_pair<CMMsl::GyroBiasAndVariance *, std::__1::default_delete<CMMsl::GyroBiasAndVariance>> {
        struct GyroBiasAndVariance *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroBiasConstraints, std::__1::default_delete<CMMsl::GyroBiasConstraints>> {
    struct __compressed_pair<CMMsl::GyroBiasConstraints *, std::__1::default_delete<CMMsl::GyroBiasConstraints>> {
        struct GyroBiasConstraints *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroBiasCorrection, std::__1::default_delete<CMMsl::GyroBiasCorrection>> {
    struct __compressed_pair<CMMsl::GyroBiasCorrection *, std::__1::default_delete<CMMsl::GyroBiasCorrection>> {
        struct GyroBiasCorrection *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroBiasFit, std::__1::default_delete<CMMsl::GyroBiasFit>> {
    struct __compressed_pair<CMMsl::GyroBiasFit *, std::__1::default_delete<CMMsl::GyroBiasFit>> {
        struct GyroBiasFit *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroCompass, std::__1::default_delete<CMMsl::GyroCompass>> {
    struct __compressed_pair<CMMsl::GyroCompass *, std::__1::default_delete<CMMsl::GyroCompass>> {
        struct GyroCompass *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroDt, std::__1::default_delete<CMMsl::GyroDt>> {
    struct __compressed_pair<CMMsl::GyroDt *, std::__1::default_delete<CMMsl::GyroDt>> {
        struct GyroDt *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroGps, std::__1::default_delete<CMMsl::GyroGps>> {
    struct __compressed_pair<CMMsl::GyroGps *, std::__1::default_delete<CMMsl::GyroGps>> {
        struct GyroGps *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroOscarEmu, std::__1::default_delete<CMMsl::GyroOscarEmu>> {
    struct __compressed_pair<CMMsl::GyroOscarEmu *, std::__1::default_delete<CMMsl::GyroOscarEmu>> {
        struct GyroOscarEmu *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::GyroTemperature, std::__1::default_delete<CMMsl::GyroTemperature>> {
    struct __compressed_pair<CMMsl::GyroTemperature *, std::__1::default_delete<CMMsl::GyroTemperature>> {
        struct GyroTemperature *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarAdditionalState, std::__1::default_delete<CMMsl::InEarAdditionalState>> {
    struct __compressed_pair<CMMsl::InEarAdditionalState *, std::__1::default_delete<CMMsl::InEarAdditionalState>> {
        struct InEarAdditionalState *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarBaseline, std::__1::default_delete<CMMsl::InEarBaseline>> {
    struct __compressed_pair<CMMsl::InEarBaseline *, std::__1::default_delete<CMMsl::InEarBaseline>> {
        struct InEarBaseline *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarBaselining, std::__1::default_delete<CMMsl::InEarBaselining>> {
    struct __compressed_pair<CMMsl::InEarBaselining *, std::__1::default_delete<CMMsl::InEarBaselining>> {
        struct InEarBaselining *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarConstraints, std::__1::default_delete<CMMsl::InEarConstraints>> {
    struct __compressed_pair<CMMsl::InEarConstraints *, std::__1::default_delete<CMMsl::InEarConstraints>> {
        struct InEarConstraints *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarOpenLid, std::__1::default_delete<CMMsl::InEarOpenLid>> {
    struct __compressed_pair<CMMsl::InEarOpenLid *, std::__1::default_delete<CMMsl::InEarOpenLid>> {
        struct InEarOpenLid *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarOptical, std::__1::default_delete<CMMsl::InEarOptical>> {
    struct __compressed_pair<CMMsl::InEarOptical *, std::__1::default_delete<CMMsl::InEarOptical>> {
        struct InEarOptical *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarSession, std::__1::default_delete<CMMsl::InEarSession>> {
    struct __compressed_pair<CMMsl::InEarSession *, std::__1::default_delete<CMMsl::InEarSession>> {
        struct InEarSession *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarTransition, std::__1::default_delete<CMMsl::InEarTransition>> {
    struct __compressed_pair<CMMsl::InEarTransition *, std::__1::default_delete<CMMsl::InEarTransition>> {
        struct InEarTransition *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InEarTransitionEntry, std::__1::default_delete<CMMsl::InEarTransitionEntry>> {
    struct __compressed_pair<CMMsl::InEarTransitionEntry *, std::__1::default_delete<CMMsl::InEarTransitionEntry>> {
        struct InEarTransitionEntry *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::InterpolatedAccessoryAccel, std::__1::default_delete<CMMsl::InterpolatedAccessoryAccel>> {
    struct __compressed_pair<CMMsl::InterpolatedAccessoryAccel *, std::__1::default_delete<CMMsl::InterpolatedAccessoryAccel>> {
        struct InterpolatedAccessoryAccel *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::IntersiloNSCodingData, std::__1::default_delete<CMMsl::IntersiloNSCodingData>> {
    struct __compressed_pair<CMMsl::IntersiloNSCodingData *, std::__1::default_delete<CMMsl::IntersiloNSCodingData>> {
        struct IntersiloNSCodingData *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::LocationOscarEmu, std::__1::default_delete<CMMsl::LocationOscarEmu>> {
    struct __compressed_pair<CMMsl::LocationOscarEmu *, std::__1::default_delete<CMMsl::LocationOscarEmu>> {
        struct LocationOscarEmu *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::Magnetometer, std::__1::default_delete<CMMsl::Magnetometer>> {
    struct __compressed_pair<CMMsl::Magnetometer *, std::__1::default_delete<CMMsl::Magnetometer>> {
        struct Magnetometer *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::MetsInfo, std::__1::default_delete<CMMsl::MetsInfo>> {
    struct __compressed_pair<CMMsl::MetsInfo *, std::__1::default_delete<CMMsl::MetsInfo>> {
        struct MetsInfo *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::MotionGPSLocation, std::__1::default_delete<CMMsl::MotionGPSLocation>> {
    struct __compressed_pair<CMMsl::MotionGPSLocation *, std::__1::default_delete<CMMsl::MotionGPSLocation>> {
        struct MotionGPSLocation *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::MotionHint, std::__1::default_delete<CMMsl::MotionHint>> {
    struct __compressed_pair<CMMsl::MotionHint *, std::__1::default_delete<CMMsl::MotionHint>> {
        struct MotionHint *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::MotionLoiData, std::__1::default_delete<CMMsl::MotionLoiData>> {
    struct __compressed_pair<CMMsl::MotionLoiData *, std::__1::default_delete<CMMsl::MotionLoiData>> {
        struct MotionLoiData *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::MotionStateUpdate, std::__1::default_delete<CMMsl::MotionStateUpdate>> {
    struct __compressed_pair<CMMsl::MotionStateUpdate *, std::__1::default_delete<CMMsl::MotionStateUpdate>> {
        struct MotionStateUpdate *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::MotionWifiAssociation, std::__1::default_delete<CMMsl::MotionWifiAssociation>> {
    struct __compressed_pair<CMMsl::MotionWifiAssociation *, std::__1::default_delete<CMMsl::MotionWifiAssociation>> {
        struct MotionWifiAssociation *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::MotionWifiLocation, std::__1::default_delete<CMMsl::MotionWifiLocation>> {
    struct __compressed_pair<CMMsl::MotionWifiLocation *, std::__1::default_delete<CMMsl::MotionWifiLocation>> {
        struct MotionWifiLocation *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::NatalieData, std::__1::default_delete<CMMsl::NatalieData>> {
    struct __compressed_pair<CMMsl::NatalieData *, std::__1::default_delete<CMMsl::NatalieData>> {
        struct NatalieData *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::NonlinearBiasFit, std::__1::default_delete<CMMsl::NonlinearBiasFit>> {
    struct __compressed_pair<CMMsl::NonlinearBiasFit *, std::__1::default_delete<CMMsl::NonlinearBiasFit>> {
        struct NonlinearBiasFit *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::Odometer, std::__1::default_delete<CMMsl::Odometer>> {
    struct __compressed_pair<CMMsl::Odometer *, std::__1::default_delete<CMMsl::Odometer>> {
        struct Odometer *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::OdometerWithAltitude, std::__1::default_delete<CMMsl::OdometerWithAltitude>> {
    struct __compressed_pair<CMMsl::OdometerWithAltitude *, std::__1::default_delete<CMMsl::OdometerWithAltitude>> {
        struct OdometerWithAltitude *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::OnsetHeartRateData, std::__1::default_delete<CMMsl::OnsetHeartRateData>> {
    struct __compressed_pair<CMMsl::OnsetHeartRateData *, std::__1::default_delete<CMMsl::OnsetHeartRateData>> {
        struct OnsetHeartRateData *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::PearlAttitude, std::__1::default_delete<CMMsl::PearlAttitude>> {
    struct __compressed_pair<CMMsl::PearlAttitude *, std::__1::default_delete<CMMsl::PearlAttitude>> {
        struct PearlAttitude *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::Pressure, std::__1::default_delete<CMMsl::Pressure>> {
    struct __compressed_pair<CMMsl::Pressure *, std::__1::default_delete<CMMsl::Pressure>> {
        struct Pressure *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::PressureFiltered, std::__1::default_delete<CMMsl::PressureFiltered>> {
    struct __compressed_pair<CMMsl::PressureFiltered *, std::__1::default_delete<CMMsl::PressureFiltered>> {
        struct PressureFiltered *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::PressureFilteredNoTemperature, std::__1::default_delete<CMMsl::PressureFilteredNoTemperature>> {
    struct __compressed_pair<CMMsl::PressureFilteredNoTemperature *, std::__1::default_delete<CMMsl::PressureFilteredNoTemperature>> {
        struct PressureFilteredNoTemperature *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::PressureGps, std::__1::default_delete<CMMsl::PressureGps>> {
    struct __compressed_pair<CMMsl::PressureGps *, std::__1::default_delete<CMMsl::PressureGps>> {
        struct PressureGps *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::PressureOscarEmu, std::__1::default_delete<CMMsl::PressureOscarEmu>> {
    struct __compressed_pair<CMMsl::PressureOscarEmu *, std::__1::default_delete<CMMsl::PressureOscarEmu>> {
        struct PressureOscarEmu *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::Prox, std::__1::default_delete<CMMsl::Prox>> {
    struct __compressed_pair<CMMsl::Prox *, std::__1::default_delete<CMMsl::Prox>> {
        struct Prox *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::Reader, std::__1::default_delete<CMMsl::Reader>> {
    struct __compressed_pair<CMMsl::Reader *, std::__1::default_delete<CMMsl::Reader>> {
        struct Reader *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::RotationRate, std::__1::default_delete<CMMsl::RotationRate>> {
    struct __compressed_pair<CMMsl::RotationRate *, std::__1::default_delete<CMMsl::RotationRate>> {
        struct RotationRate *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::SPUPlaybackExampleDeviceMotion, std::__1::default_delete<CMMsl::SPUPlaybackExampleDeviceMotion>> {
    struct __compressed_pair<CMMsl::SPUPlaybackExampleDeviceMotion *, std::__1::default_delete<CMMsl::SPUPlaybackExampleDeviceMotion>> {
        struct SPUPlaybackExampleDeviceMotion *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::SPUPlaybackExampleMotionStateUpdate, std::__1::default_delete<CMMsl::SPUPlaybackExampleMotionStateUpdate>> {
    struct __compressed_pair<CMMsl::SPUPlaybackExampleMotionStateUpdate *, std::__1::default_delete<CMMsl::SPUPlaybackExampleMotionStateUpdate>> {
        struct SPUPlaybackExampleMotionStateUpdate *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::SessionOverride, std::__1::default_delete<CMMsl::SessionOverride>> {
    struct __compressed_pair<CMMsl::SessionOverride *, std::__1::default_delete<CMMsl::SessionOverride>> {
        struct SessionOverride *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::StepCadenceToStrideLengthBin, std::__1::default_delete<CMMsl::StepCadenceToStrideLengthBin>> {
    struct __compressed_pair<CMMsl::StepCadenceToStrideLengthBin *, std::__1::default_delete<CMMsl::StepCadenceToStrideLengthBin>> {
        struct StepCadenceToStrideLengthBin *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::StreamingHeartRateData, std::__1::default_delete<CMMsl::StreamingHeartRateData>> {
    struct __compressed_pair<CMMsl::StreamingHeartRateData *, std::__1::default_delete<CMMsl::StreamingHeartRateData>> {
        struct StreamingHeartRateData *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::StrideCalBin, std::__1::default_delete<CMMsl::StrideCalBin>> {
    struct __compressed_pair<CMMsl::StrideCalBin *, std::__1::default_delete<CMMsl::StrideCalBin>> {
        struct StrideCalBin *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::TapAccept, std::__1::default_delete<CMMsl::TapAccept>> {
    struct __compressed_pair<CMMsl::TapAccept *, std::__1::default_delete<CMMsl::TapAccept>> {
        struct TapAccept *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::TapDetect, std::__1::default_delete<CMMsl::TapDetect>> {
    struct __compressed_pair<CMMsl::TapDetect *, std::__1::default_delete<CMMsl::TapDetect>> {
        struct TapDetect *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::TouchOscarEmu, std::__1::default_delete<CMMsl::TouchOscarEmu>> {
    struct __compressed_pair<CMMsl::TouchOscarEmu *, std::__1::default_delete<CMMsl::TouchOscarEmu>> {
        struct TouchOscarEmu *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::VO2MaxInput, std::__1::default_delete<CMMsl::VO2MaxInput>> {
    struct __compressed_pair<CMMsl::VO2MaxInput *, std::__1::default_delete<CMMsl::VO2MaxInput>> {
        struct VO2MaxInput *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::VibrationEvent, std::__1::default_delete<CMMsl::VibrationEvent>> {
    struct __compressed_pair<CMMsl::VibrationEvent *, std::__1::default_delete<CMMsl::VibrationEvent>> {
        struct VibrationEvent *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WatchOnWristState, std::__1::default_delete<CMMsl::WatchOnWristState>> {
    struct __compressed_pair<CMMsl::WatchOnWristState *, std::__1::default_delete<CMMsl::WatchOnWristState>> {
        struct WatchOnWristState *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WatchOrientationSettings, std::__1::default_delete<CMMsl::WatchOrientationSettings>> {
    struct __compressed_pair<CMMsl::WatchOrientationSettings *, std::__1::default_delete<CMMsl::WatchOrientationSettings>> {
        struct WatchOrientationSettings *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WifiScanResults, std::__1::default_delete<CMMsl::WifiScanResults>> {
    struct __compressed_pair<CMMsl::WifiScanResults *, std::__1::default_delete<CMMsl::WifiScanResults>> {
        struct WifiScanResults *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutEvent, std::__1::default_delete<CMMsl::WorkoutEvent>> {
    struct __compressed_pair<CMMsl::WorkoutEvent *, std::__1::default_delete<CMMsl::WorkoutEvent>> {
        struct WorkoutEvent *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderAccel, std::__1::default_delete<CMMsl::WorkoutRecorderAccel>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderAccel *, std::__1::default_delete<CMMsl::WorkoutRecorderAccel>> {
        struct WorkoutRecorderAccel *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderBodyMetrics, std::__1::default_delete<CMMsl::WorkoutRecorderBodyMetrics>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderBodyMetrics *, std::__1::default_delete<CMMsl::WorkoutRecorderBodyMetrics>> {
        struct WorkoutRecorderBodyMetrics *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderElevation, std::__1::default_delete<CMMsl::WorkoutRecorderElevation>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderElevation *, std::__1::default_delete<CMMsl::WorkoutRecorderElevation>> {
        struct WorkoutRecorderElevation *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderHealthKitInfo, std::__1::default_delete<CMMsl::WorkoutRecorderHealthKitInfo>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderHealthKitInfo *, std::__1::default_delete<CMMsl::WorkoutRecorderHealthKitInfo>> {
        struct WorkoutRecorderHealthKitInfo *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderHeartRate, std::__1::default_delete<CMMsl::WorkoutRecorderHeartRate>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderHeartRate *, std::__1::default_delete<CMMsl::WorkoutRecorderHeartRate>> {
        struct WorkoutRecorderHeartRate *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderOdometer, std::__1::default_delete<CMMsl::WorkoutRecorderOdometer>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderOdometer *, std::__1::default_delete<CMMsl::WorkoutRecorderOdometer>> {
        struct WorkoutRecorderOdometer *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderPressure, std::__1::default_delete<CMMsl::WorkoutRecorderPressure>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderPressure *, std::__1::default_delete<CMMsl::WorkoutRecorderPressure>> {
        struct WorkoutRecorderPressure *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderRotationRate, std::__1::default_delete<CMMsl::WorkoutRecorderRotationRate>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderRotationRate *, std::__1::default_delete<CMMsl::WorkoutRecorderRotationRate>> {
        struct WorkoutRecorderRotationRate *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderWatchOrientationSettings, std::__1::default_delete<CMMsl::WorkoutRecorderWatchOrientationSettings>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderWatchOrientationSettings *, std::__1::default_delete<CMMsl::WorkoutRecorderWatchOrientationSettings>> {
        struct WorkoutRecorderWatchOrientationSettings *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderWifiScanResults, std::__1::default_delete<CMMsl::WorkoutRecorderWifiScanResults>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderWifiScanResults *, std::__1::default_delete<CMMsl::WorkoutRecorderWifiScanResults>> {
        struct WorkoutRecorderWifiScanResults *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WorkoutRecorderWorkoutEvent, std::__1::default_delete<CMMsl::WorkoutRecorderWorkoutEvent>> {
    struct __compressed_pair<CMMsl::WorkoutRecorderWorkoutEvent *, std::__1::default_delete<CMMsl::WorkoutRecorderWorkoutEvent>> {
        struct WorkoutRecorderWorkoutEvent *__value_;
    } __ptr_;
};

struct unique_ptr<CMMsl::WriterManager<CLLegacyFileManager>, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager>>> {
    struct __compressed_pair<CMMsl::WriterManager<CLLegacyFileManager>*, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager>>> {
        struct WriterManager<CLLegacyFileManager> *__value_;
    } __ptr_;
};

struct unique_ptr<RollingPowerAssertion, std::__1::default_delete<RollingPowerAssertion>> {
    struct __compressed_pair<RollingPowerAssertion *, std::__1::default_delete<RollingPowerAssertion>> {
        struct RollingPowerAssertion *__value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<CLLocationType, CLChinaShiftedDataStructure, std::__1::hash<CLLocationType>, std::__1::equal_to<CLLocationType>, std::__1::allocator<std::__1::pair<const CLLocationType, CLChinaShiftedDataStructure>>> {
    struct __hash_table<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::__unordered_map_hasher<CLLocationType, std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::hash<CLLocationType>, true>, std::__1::__unordered_map_equal<CLLocationType, std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::equal_to<CLLocationType>, true>, std::__1::allocator<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLLocationType, std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::hash<CLLocationType>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CLLocationType, std::__1::__hash_value_type<CLLocationType, CLChinaShiftedDataStructure>, std::__1::equal_to<CLLocationType>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, CLInUseAssertionLogic::AssertionRecord>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>, std::__1::hash<std::__1::type_index>, std::__1::equal_to<std::__1::type_index>, std::__1::allocator<std::__1::pair<const std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::__unordered_map_hasher<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::hash<std::__1::type_index>, true>, std::__1::__unordered_map_equal<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::equal_to<std::__1::type_index>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::hash<std::__1::type_index>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::type_index, std::__1::__hash_value_type<std::__1::type_index, std::__1::unique_ptr<CLTransientSubscriptionBase, std::__1::default_delete<CLTransientSubscriptionBase>>>, std::__1::equal_to<std::__1::type_index>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement>> {
    struct __hash_table<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*>, std::__1::allocator<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<CLMicroLocationProto::Measurement, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, CLMicroLocationFingerprint::HashMeasurement> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, CLMicroLocationFingerprint::PredicateMeasurement> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress>> {
    struct __hash_table<CLMacAddress, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<CLMacAddress>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*>, std::__1::allocator<std::__1::__hash_node<CLMacAddress, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<CLMacAddress, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<CLMacAddress>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<CLMacAddress>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
    struct __hash_table<CLWifiService_Type::AccessPoint, CLWifiService_Type::AccessPointHash, CLWifiService_Type::AccessPointEquality, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*>, std::__1::allocator<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<CLWifiService_Type::AccessPoint, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, CLWifiService_Type::AccessPointHash> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, CLWifiService_Type::AccessPointEquality> {
            float _field1;
        } _field4;
    } _field1;
};

struct uuid {
    unsigned char _field1[16];
};

struct value_ostream {
    _Bool _field1;
    struct ostream *_field2;
};

struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> {
    struct CLAggregationRule *_field1;
    struct CLAggregationRule *_field2;
    struct __compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule>> {
        struct CLAggregationRule *_field1;
    } _field3;
};

struct vector<CLCell, std::__1::allocator<CLCell>> {
    struct CLCell *_field1;
    struct CLCell *_field2;
    struct __compressed_pair<CLCell *, std::__1::allocator<CLCell>> {
        struct CLCell *_field1;
    } _field3;
};

struct vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification>> {
    struct ImproveAccuracyNotification *_field1;
    struct ImproveAccuracyNotification *_field2;
    struct __compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification>> {
        struct ImproveAccuracyNotification *_field1;
    } _field3;
};

struct vector<CLClientSatelliteInfo, std::__1::allocator<CLClientSatelliteInfo>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CLClientSatelliteInfo *, std::__1::allocator<CLClientSatelliteInfo>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<CLFenceManager_Type::Fence, std::__1::allocator<CLFenceManager_Type::Fence>> {
    struct Fence *_field1;
    struct Fence *_field2;
    struct __compressed_pair<CLFenceManager_Type::Fence *, std::__1::allocator<CLFenceManager_Type::Fence>> {
        struct Fence *_field1;
    } _field3;
};

struct vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice>> {
    struct HomeKitDevice *_field1;
    struct HomeKitDevice *_field2;
    struct __compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice>> {
        struct HomeKitDevice *_field1;
    } _field3;
};

struct vector<CLLocationType, std::__1::allocator<CLLocationType>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType>> {
        int *_field1;
    } _field3;
};

struct vector<CLMacAddress, std::__1::allocator<CLMacAddress>> {
    struct CLMacAddress *_field1;
    struct CLMacAddress *_field2;
    struct __compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress>> {
        struct CLMacAddress *_field1;
    } _field3;
};

struct vector<CLMarketRegion, std::__1::allocator<CLMarketRegion>> {
    struct CLMarketRegion *_field1;
    struct CLMarketRegion *_field2;
    struct __compressed_pair<CLMarketRegion *, std::__1::allocator<CLMarketRegion>> {
        struct CLMarketRegion *_field1;
    } _field3;
};

struct vector<CLMicroLocationLocalizer::ModelAndIds, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds>> {
    struct ModelAndIds *_field1;
    struct ModelAndIds *_field2;
    struct __compressed_pair<CLMicroLocationLocalizer::ModelAndIds *, std::__1::allocator<CLMicroLocationLocalizer::ModelAndIds>> {
        struct ModelAndIds *_field1;
    } _field3;
};

struct vector<CLMicroLocationProto::RecordingEvent, std::__1::allocator<CLMicroLocationProto::RecordingEvent>> {
    struct RecordingEvent *_field1;
    struct RecordingEvent *_field2;
    struct __compressed_pair<CLMicroLocationProto::RecordingEvent *, std::__1::allocator<CLMicroLocationProto::RecordingEvent>> {
        struct RecordingEvent *_field1;
    } _field3;
};

struct vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram>> {
    struct CLMicroLocationWiFiChannelHistogram *_field1;
    struct CLMicroLocationWiFiChannelHistogram *_field2;
    struct __compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram>> {
        struct CLMicroLocationWiFiChannelHistogram *_field1;
    } _field3;
};

struct vector<CLNatalieData, std::__1::allocator<CLNatalieData>> {
    struct CLNatalieData *_field1;
    struct CLNatalieData *_field2;
    struct __compressed_pair<CLNatalieData *, std::__1::allocator<CLNatalieData>> {
        struct CLNatalieData *_field1;
    } _field3;
};

struct vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound>> {
    struct TemperatureOffsetCoefficientRound *_field1;
    struct TemperatureOffsetCoefficientRound *_field2;
    struct __compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound>> {
        struct TemperatureOffsetCoefficientRound *_field1;
    } _field3;
};

struct vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal>> {
    struct CLRangingPeerInternal *_field1;
    struct CLRangingPeerInternal *_field2;
    struct __compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal>> {
        struct CLRangingPeerInternal *_field1;
    } _field3;
};

struct vector<CLSedentaryAlarmData, std::__1::allocator<CLSedentaryAlarmData>> {
    struct CLSedentaryAlarmData *_field1;
    struct CLSedentaryAlarmData *_field2;
    struct __compressed_pair<CLSedentaryAlarmData *, std::__1::allocator<CLSedentaryAlarmData>> {
        struct CLSedentaryAlarmData *_field1;
    } _field3;
};

struct vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> {
    struct CLStepCountEntry *_field1;
    struct CLStepCountEntry *_field2;
    struct __compressed_pair<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry>> {
        struct CLStepCountEntry *_field1;
    } _field3;
};

struct vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution>> {
    struct CLSwimStrokesPerTurnDistribution *_field1;
    struct CLSwimStrokesPerTurnDistribution *_field2;
    struct __compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution>> {
        struct CLSwimStrokesPerTurnDistribution *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
    struct CdmaCell *_field1;
    struct CdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
        struct CdmaCell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell>> {
    struct Cell *_field1;
    struct Cell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell>> {
        struct Cell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
    struct LteCell *_field1;
    struct LteCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
        struct LteCell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
    struct ScdmaCell *_field1;
    struct ScdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
        struct ScdmaCell *_field1;
    } _field3;
};

struct vector<CLWifiRangeResult, std::__1::allocator<CLWifiRangeResult>> {
    struct CLWifiRangeResult *_field1;
    struct CLWifiRangeResult *_field2;
    struct __compressed_pair<CLWifiRangeResult *, std::__1::allocator<CLWifiRangeResult>> {
        struct CLWifiRangeResult *_field1;
    } _field3;
};

struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
    struct AccessPoint *_field1;
    struct AccessPoint *_field2;
    struct __compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint>> {
        struct AccessPoint *_field1;
    } _field3;
};

struct vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification>> {
        int *_field1;
    } _field3;
};

struct vector<HRMetPair, std::__1::allocator<HRMetPair>> {
    struct HRMetPair *_field1;
    struct HRMetPair *_field2;
    struct __compressed_pair<HRMetPair *, std::__1::allocator<HRMetPair>> {
        struct HRMetPair *_field1;
    } _field3;
};

struct vector<TileId, std::__1::allocator<TileId>> {
    struct TileId *_field1;
    struct TileId *_field2;
    struct __compressed_pair<TileId *, std::__1::allocator<TileId>> {
        struct TileId *_field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *__value_;
    } __end_cap_;
};

struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
};

struct vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type>>> {
    struct pair<double, CLMotionActivity::Type> *__begin_;
    struct pair<double, CLMotionActivity::Type> *__end_;
    struct __compressed_pair<std::__1::pair<double, CLMotionActivity::Type>*, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type>>> {
        struct pair<double, CLMotionActivity::Type> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<CLSubHarvester>, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester>>> {
    struct shared_ptr<CLSubHarvester> *__begin_;
    struct shared_ptr<CLSubHarvester> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<CLSubHarvester>*, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester>>> {
        struct shared_ptr<CLSubHarvester> *__value_;
    } __end_cap_;
};

struct vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>>> {
    struct unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>> *_field1;
    struct unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>*, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>>>> {
        struct unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet>> *_field1;
    } _field3;
};

struct vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>>> {
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> *_field1;
    struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> *_field2;
    struct __compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>*, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>>>> {
        struct vector<CLAggregationRule, std::__1::allocator<CLAggregationRule>> *_field1;
    } _field3;
};

struct vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>>> {
    struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> *_field1;
    struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> *_field2;
    struct __compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>*, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>>>> {
        struct vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint>> *_field1;
    } _field3;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

#if 0
// Names with conflicting types:
typedef struct {
    char _field1;
} NotificationData_825421d2;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
    unsigned long long _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
} WristState_5dc64808;

typedef struct {
    struct FilteredPressure {
        unsigned char _field1;
        unsigned char _field2[3];
        float _field3;
        unsigned long long _field4;
        unsigned long long _field5;
    } _field1;
    double _field2;
} FilteredPressure_54a5c05a;

typedef struct {
    int _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
} NotificationData_7f59b4c4;

typedef struct {
    struct CLDaemonLocation _field1;
    struct CLDaemonLocationPrivate _field2;
    struct shared_ptr<CLBatchedLocations> _field3;
    struct TechnologyStatus _field4;
    _Bool _field5;
    double _field6;
    int _field7;
    CDStruct_d2b197d1 _field8;
    CDStruct_2c43369c _field9;
    struct XtraFileAvailable _field10;
    int _field11;
    struct LocationDerivedSpeed _field12;
    struct shared_ptr<const gnss::MeasurementData> _field13;
    int _field14;
} NotificationData_d44f4bd8;

typedef struct {
    struct Name _field1;
    _Bool _field2;
    int _field3;
} NotificationData_c6f3a826;

typedef struct {
    _Bool _field1;
    char _field2;
    struct AssociationState _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    struct vector<CLWifiRangeResult, std::__1::allocator<CLWifiRangeResult>> _field7;
    _Bool _field8;
} NotificationData_c8be1b64;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    unsigned char _field7;
    float _field8;
    char _field9;
    unsigned short _field10;
} CDStruct_63e0ae22;

typedef struct {
    unsigned short fHead;
    unsigned short fSize;
} CDStruct_b91b6b9f;

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    int _field7;
    int _field8;
    unsigned int _field9;
} CDStruct_9f295740;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    double _field9[50];
    double _field10[50];
} CDStruct_5e97c62c;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    double speed;
    double timestamp;
    double uncertainty;
} CDStruct_56299a79;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    double _field1;
    long long _field2;
    int _field3;
    int _field4;
} CDStruct_0a530110;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
} CDStruct_869f9c67;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct CDStruct_183601bc;

typedef struct {
    double _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    CDStruct_d2b197d1 _field6[50];
} CDStruct_15521927;

typedef struct {
    int _field1;
    CDStruct_2c43369c _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    int _field11;
    double _field12;
    int _field13;
    CDStruct_2c43369c _field14;
    double _field15;
    int _field16;
    unsigned int _field17;
    int _field18;
    int _field19;
} CDStruct_c2a3997d;

typedef struct {
    CDStruct_2c43369c _field1;
    double _field2;
} CDStruct_6ae51fae;

typedef struct {
    int _field1;
    double _field2;
    union {
        struct {
            CDStruct_869f9c67 _field1;
            CDStruct_869f9c67 _field2;
        } _field1;
        struct {
            _Bool _field1;
            char _field2[246];
        } _field2;
    } _field3;
} CDStruct_4d1f5584;

typedef struct {
    struct {
        id _field1;
        char *_field2;
        unsigned long long _field3;
        unsigned long long _field4;
        unsigned long long _field5;
        unsigned long long _field6;
        unsigned int _field7;
        unsigned long long _field8;
        _Bool _field9;
        unsigned long long _field10;
        float _field11;
        unsigned long long _field12;
        id _field13;
        int _field14;
    } _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    int _field4;
    int _field5;
    int _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    union {
        struct {
            CDStruct_b2fbf00d _field1;
            CDStruct_b2fbf00d _field2;
        } _field1;
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
        } _field2;
    } _field9;
    CDStruct_183601bc *_field10;
    struct {
        unsigned short _field1[2];
        unsigned short _field2[2];
    } _field11;
    unsigned char _field12;
    _Bool _field13;
    unsigned char _field14;
    _Bool _field15;
    _Bool _field16;
    unsigned char _field17;
    _Bool _field18;
    unsigned char _field19;
    struct _NSRange _field20;
    _Bool _field21;
    unsigned int _field22;
} CDStruct_c707fdd0;

typedef struct {
    CDStruct_c707fdd0 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    _Bool _field4;
    _Bool _field5;
} CDStruct_bc04cdca;

// Ambiguous groups
typedef struct {
    unsigned int arfcn:1;
    unsigned int psc:1;
} CDStruct_6bbaae90;

typedef struct {
    unsigned int mode:1;
} CDStruct_ad4540a6;

typedef struct {
    unsigned int timestamp:1;
} CDStruct_b5306035;

typedef struct list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion>> {
    struct __list_node_base<CLBTLEBeaconRegion_Type::MonitoredRegion, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLBTLEBeaconRegion_Type::MonitoredRegion, void *>>> {
        unsigned long long _field1;
    } _field2;
} list_602ae561;

typedef struct set<int, std::__1::less<int>, std::__1::allocator<int>> {
    struct __tree<int, std::__1::less<int>, std::__1::allocator<int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} set_7b7d70f4;

typedef struct shared_ptr<CLStepCountRecorderDb> {
    struct CLStepCountRecorderDb *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a3117978;

typedef struct shared_ptr<CMMsl::Writer> {
    struct Writer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_06cc74dc;

typedef struct time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1>>> {
    struct duration<long double, std::__1::ratio<1, 1>> __d_;
} time_point_406bde99;

typedef struct vector<CLCell, std::__1::allocator<CLCell>> {
    struct CLCell *_field1;
    struct CLCell *_field2;
    struct __compressed_pair<CLCell *, std::__1::allocator<CLCell>> {
        struct CLCell *_field1;
    } _field3;
} vector_096a3675;

typedef struct vector<CLFenceManager_Type::Fence, std::__1::allocator<CLFenceManager_Type::Fence>> {
    struct Fence *_field1;
    struct Fence *_field2;
    struct __compressed_pair<CLFenceManager_Type::Fence *, std::__1::allocator<CLFenceManager_Type::Fence>> {
        struct Fence *_field1;
    } _field3;
} vector_7520210c;

typedef struct vector<CLMacAddress, std::__1::allocator<CLMacAddress>> {
    struct CLMacAddress *_field1;
    struct CLMacAddress *_field2;
    struct __compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress>> {
        struct CLMacAddress *_field1;
    } _field3;
} vector_81654e89;

typedef struct vector<CLMarketRegion, std::__1::allocator<CLMarketRegion>> {
    struct CLMarketRegion *_field1;
    struct CLMarketRegion *_field2;
    struct __compressed_pair<CLMarketRegion *, std::__1::allocator<CLMarketRegion>> {
        struct CLMarketRegion *_field1;
    } _field3;
} vector_ffaa9e0a;

typedef struct vector<CLNatalieData, std::__1::allocator<CLNatalieData>> {
    struct CLNatalieData *_field1;
    struct CLNatalieData *_field2;
    struct __compressed_pair<CLNatalieData *, std::__1::allocator<CLNatalieData>> {
        struct CLNatalieData *_field1;
    } _field3;
} vector_31b53fdd;

typedef struct vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal>> {
    struct CLRangingPeerInternal *_field1;
    struct CLRangingPeerInternal *_field2;
    struct __compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal>> {
        struct CLRangingPeerInternal *_field1;
    } _field3;
} vector_a730dc89;

typedef struct vector<CLSedentaryAlarmData, std::__1::allocator<CLSedentaryAlarmData>> {
    struct CLSedentaryAlarmData *_field1;
    struct CLSedentaryAlarmData *_field2;
    struct __compressed_pair<CLSedentaryAlarmData *, std::__1::allocator<CLSedentaryAlarmData>> {
        struct CLSedentaryAlarmData *_field1;
    } _field3;
} vector_50df4d08;

typedef struct vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry>> {
    struct CLStepCountEntry *_field1;
    struct CLStepCountEntry *_field2;
    struct __compressed_pair<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry>> {
        struct CLStepCountEntry *_field1;
    } _field3;
} vector_e18d6468;

typedef struct vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
    struct CdmaCell *_field1;
    struct CdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
        struct CdmaCell *_field1;
    } _field3;
} vector_ec4aa6bf;

typedef struct vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell>> {
    struct Cell *_field1;
    struct Cell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell>> {
        struct Cell *_field1;
    } _field3;
} vector_6fcb333c;

typedef struct vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
    struct LteCell *_field1;
    struct LteCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
        struct LteCell *_field1;
    } _field3;
} vector_ac0eb896;

typedef struct vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
    struct ScdmaCell *_field1;
    struct ScdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
        struct ScdmaCell *_field1;
    } _field3;
} vector_cead180e;

typedef struct vector<double, std::__1::allocator<double>> {
    double *__begin_;
    double *__end_;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *__value_;
    } __end_cap_;
} vector_b67dfe3a;

typedef struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
} vector_3203cf93;

#pragma mark Named Unions

union FalseStepDetectorStateUnion {
    struct FalseStepDetectorState falseStepDetectorState;
    unsigned char data;
};

union VehicularFlagsData {
    struct VehicularFlags _field1;
    unsigned char _field2;
};

union WorkoutAttrib {
    struct SwimAttrib _field1;
};

#if 0
// Names with conflicting types:
typedef union {
    struct CLOdometerEntry _field1;
    struct CLElevationChangeEntry _field2;
    struct CLCoarseElevationChangeEntry _field3;
    struct CLSignificantElevation _field4;
} NotificationData_2df6b743;

typedef union {
    struct CLMotionActivity _field1;
    _Bool _field2;
    struct DeviceTouchState _field3;
    int _field4;
} NotificationData_229ef351;

typedef union {
    struct CLNatalieData _field1;
    _Bool _field2;
    struct CLBodyMetrics _field3;
    float _field4;
    struct CLExerciseMinuteData _field5;
} NotificationData_28ddbb28;

typedef union {
    struct CLStepCountEntry _field1;
    struct CLExtendedStepCountEntry _field2;
    struct CLPedometerEvent _field3;
} NotificationData_86658232;

typedef union {
    struct MediatedMotionActivity _field1;
    struct MotionOverride _field2;
    struct WorkoutEvent _field3;
} NotificationData_3db1777a;

#endif

