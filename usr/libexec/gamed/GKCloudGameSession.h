//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSSecureCoding-Protocol.h"

@class CKRecord, GKCloudPlayer, NSArray, NSData, NSDate, NSDictionary, NSMutableDictionary, NSString, NSURL;

@interface GKCloudGameSession : NSObject <NSSecureCoding>
{
    CKRecord *_record;	// 8 = 0x8
    NSDictionary *_playersByIdentifier;	// 16 = 0x10
    GKCloudPlayer *_owner;	// 24 = 0x18
    NSURL *_url;	// 32 = 0x20
}

+ (void)badgeCountForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000f59f0
+ (void)updateBadgeCountsForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2;	// IMP=0x00000001000f552c
+ (void)updateBadgeCountsForContainerName:(id)arg1;	// IMP=0x00000001000f551c
+ (void)searchAndSaveIdentityForRecord:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000f5500
+ (id)getAssociatedAccounts;	// IMP=0x00000001000f54f8
+ (void)inviteBulletinForRecord:(id)arg1;	// IMP=0x00000001000f499c
+ (id)packFakeTurnBasedBulletinWithZoneData:(id)arg1;	// IMP=0x00000001000f4460
+ (id)packFakeRealTimeBulletinWithZoneData:(id)arg1;	// IMP=0x00000001000f3a00
+ (void)reportPlayerStateChangesToClients:(id)arg1 forUpdatedSession:(id)arg2 oldSession:(id)arg3;	// IMP=0x00000001000f272c
+ (void)openStoreForBundleID:(id)arg1;	// IMP=0x00000001000f113c
+ (void)launchOrOpenAppStoreForBundleID:(id)arg1;	// IMP=0x00000001000f10e4
+ (void)acceptShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000f0e0c
+ (void)showAcceptAlertWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000f0c50
+ (void)handleLegacyShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000f0640
+ (void)handleSessionShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000efd5c
+ (void)handleCloudKitShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ef760
+ (void)acceptShareURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ef634
+ (void)saveInformationForPrimaryUserForSessionWithShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000eec64
+ (void)fetchShareMetadataForURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ee7cc
+ (void)fetchShareRecordsWithRecordIDs:(id)arg1 inDatabase:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000ee6d4
+ (void)subscribeToAllDBwithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ed094
+ (void)getZoneNamesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ecab4
+ (void)createZoneWithName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ec8b4
+ (void)bundleIDsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000eb6bc
+ (void)removeSessionWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000eae2c
+ (void)createSessionWithContainerName:(id)arg1 title:(id)arg2 maxConnectedPlayers:(long long)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x00000001000ea0e0
+ (_Bool)isCloudDriveEnabledForBundleID:(id)arg1;	// IMP=0x00000001000e9e20
+ (id)databaseForSession:(id)arg1;	// IMP=0x00000001000e9dc0
+ (id)sharedDatabase;	// IMP=0x00000001000e9d5c
+ (id)privateDatabase;	// IMP=0x00000001000e9cf8
+ (_Bool)isOwnZoneID:(id)arg1;	// IMP=0x00000001000e9bc8
+ (_Bool)isOwnRecordID:(id)arg1;	// IMP=0x00000001000e9b6c
+ (id)recordIDForSessionIdentifier:(id)arg1;	// IMP=0x00000001000e9918
+ (id)sessionIdentifierForRecordID:(id)arg1;	// IMP=0x00000001000e9714
+ (id)allowedCharacterSet;	// IMP=0x00000001000e962c
+ (void)getFriendPlayersWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e8fdc
+ (void)updateFriendRecordIfNeeded;	// IMP=0x00000001000e8704
+ (void)updateFriendsWithRecord:(id)arg1;	// IMP=0x00000001000e7f1c
+ (void)updateCacheForFriendZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000e78f0
+ (void)updatePlayersForSessions:(id)arg1 sharesByRecordID:(id)arg2 inDatabase:(id)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x00000001000e67bc
+ (void)primaryPlayerWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e66f0
+ (id)playerIdentifierForUserRecordName:(id)arg1;	// IMP=0x00000001000e662c
+ (id)localPlayerAlias;	// IMP=0x00000001000e63b0
+ (void)determinePlayerChangesIn:(id)arg1 newSession:(id)arg2 notifyClients:(id)arg3;	// IMP=0x00000001000e5d64
+ (void)reportChangesForSessions:(id)arg1 shareChangedSessions:(id)arg2 removedSessions:(id)arg3 zoneID:(id)arg4 handler:(CDUnknownBlockType)arg5;	// IMP=0x00000001000e5064
+ (id)allChangedSessionsFromRecordChangedSessions:(id)arg1 shareChangedSessions:(id)arg2;	// IMP=0x00000001000e4cb4
+ (void)updateCacheForDatabase:(id)arg1 zoneIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000e3410
+ (void)updateCacheForDatabaseScope:(long long)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000e21ac
+ (void)updateCacheForZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000e1d6c
+ (void)updateSessionCacheDatabasesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e19b4
+ (void)updateSessionCacheWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e14dc
+ (void)updateUserWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e1470
+ (void)fetchUserRecordIDWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000e13f8
+ (id)friendEmailsByID;	// IMP=0x00000001000e13a4
+ (void)sessionForShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000e12e4
+ (void)sessionsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000e0f20
+ (void)sessionForIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000e0b18
+ (id)cacheQueue;	// IMP=0x00000001000e0aa8
+ (id)sessionCache;	// IMP=0x00000001000e0a28
+ (id)AES128Operation:(unsigned int)arg1 key:(id)arg2 data:(id)arg3;	// IMP=0x00000001000e08c0
+ (id)AES128DecryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x00000001000e0858
+ (id)AES128EncryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x00000001000e07f0
+ (id)playerIdentifierForObfuscatedIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x00000001000e06dc
+ (id)obfuscatedIdentifierForPlayerIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x00000001000e05e4
+ (id)mutablePlistFromPlayerStatesData:(id)arg1 error:(id *)arg2;	// IMP=0x00000001000df858
+ (_Bool)supportsSecureCoding;	// IMP=0x00000001000dec2c
@property(retain, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) GKCloudPlayer *owner; // @synthesize owner=_owner;
@property(retain, nonatomic) NSDictionary *playersByIdentifier; // @synthesize playersByIdentifier=_playersByIdentifier;
@property(retain, nonatomic) CKRecord *record; // @synthesize record=_record;
- (void).cxx_destruct;	// IMP=0x00000001000f6b50
- (void)setBadged:(_Bool)arg1 forPlayerIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000f61d8
- (void)saveConnectionState:(long long)arg1 forPlayerWithID:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000f310c
- (void)tempEmailFixForPlayerID:(id)arg1;	// IMP=0x00000001000f2f78
@property(readonly, nonatomic) NSArray *connectedPlayerIDs;
- (void)removePlayers:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000f1c28
- (void)deleteShareWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000f1850
- (void)fetchShareRecordWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ee4bc
- (void)saveShare:(id)arg1 isNewShare:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000ee0b4
- (void)setupShareWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001000edde0
- (void)getShareURLWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ed5d8
- (void)saveWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001000ec5b4
- (void)saveData:(id)arg1 changeTag:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00000001000ebcd8
@property(readonly, nonatomic) NSString *containerName;
- (id)playersForGKGameSession;	// IMP=0x00000001000e7518
- (id)players;	// IMP=0x00000001000e74c4
- (void)setPlayers:(id)arg1;	// IMP=0x00000001000e730c
- (void)updatePlayersWithIdentities:(id)arg1;	// IMP=0x00000001000e7070
- (id)createGKGameSession;	// IMP=0x00000001000dff50
@property(retain, nonatomic) NSMutableDictionary *nicknamesByIdentifier; // @dynamic nicknamesByIdentifier;
@property(retain, nonatomic) NSMutableDictionary *emailsByCKID;
@property(readonly, nonatomic) NSDictionary *playersByEmail;
- (id)playerStates;	// IMP=0x00000001000df8ac
- (void)setPlayerStates:(id)arg1;	// IMP=0x00000001000df7e0
@property(readonly, nonatomic) NSString *serverChangeTag;
@property(readonly, nonatomic) GKCloudPlayer *lastModifiedPlayer;
@property(readonly, nonatomic) NSDate *lastModifiedDate;
@property(retain, nonatomic) NSData *data;
@property(nonatomic) long long maxConnectedPlayers;
@property(retain, nonatomic) NSString *title;
@property(readonly, nonatomic) NSString *identifier;
- (_Bool)isOwnedByUser;	// IMP=0x00000001000df168
- (id)description;	// IMP=0x00000001000df020
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000001000def20
- (id)initWithCoder:(id)arg1;	// IMP=0x00000001000dec34
- (id)initWithRecord:(id)arg1;	// IMP=0x00000001000debb8
- (id)initWithContainerName:(id)arg1;	// IMP=0x00000001000deaec

@end

