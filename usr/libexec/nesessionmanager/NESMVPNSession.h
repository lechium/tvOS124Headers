//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "NESMSession.h"

#import "NEVPNAuthenticationPluginDelegate-Protocol.h"
#import "NEVPNPluginDelegate-Protocol.h"
#import "NEVPNTunnelPluginDelegate-Protocol.h"

@class NEPluginPreferences, NESMAlwaysOnSession, NESMVPNSessionState, NETunnelNetworkSettings, NEUserNotification, NEVPNAuthenticationPlugin, NEVPNProtocol, NEVPNTunnelPlugin, NSMutableArray, NSMutableDictionary, NSObject, NSString;
@protocol OS_dispatch_queue, OS_dispatch_source, OS_xpc_object;

@interface NESMVPNSession : NESMSession <NEVPNPluginDelegate, NEVPNAuthenticationPluginDelegate, NEVPNTunnelPluginDelegate>
{
    _Bool _isSecondaryConnection;	// 8 = 0x8
    _Bool _pluginSetDelegateInterface;	// 9 = 0x9
    _Bool _managerSetDelegateInterface;	// 10 = 0xa
    _Bool _sleepOnDisconnect;	// 11 = 0xb
    _Bool _isSecondaryInterface;	// 12 = 0xc
    _Bool _isScopedToInterface;	// 13 = 0xd
    _Bool _didAlertOnDemandPluginDisabled;	// 14 = 0xe
    _Bool _pluginInitInProgress;	// 15 = 0xf
    _Bool _reassertedByPlugin;	// 16 = 0x10
    int _sessionType;	// 20 = 0x14
    NSString *_delegateInterface;	// 24 = 0x18
    NSObject<OS_dispatch_source> *_routeTimerSource;	// 32 = 0x20
    NSObject<OS_dispatch_source> *_routeSocketSource;	// 40 = 0x28
    NSObject<OS_dispatch_queue> *_tunnelConfigQueue;	// 48 = 0x30
    NSObject<OS_xpc_object> *_establishIPCReply;	// 56 = 0x38
    NSObject<OS_xpc_object> *_establishIPCMessage;	// 64 = 0x40
    long long _pendingConfigurationChanges;	// 72 = 0x48
    CDUnknownBlockType _pendingConfigurationChangeCompletionHandler;	// 80 = 0x50
    NSObject<OS_dispatch_source> *_pendingConfigurationChangeTimer;	// 88 = 0x58
    long long _state;	// 96 = 0x60
    NESMVPNSessionState *_stateHandler;	// 104 = 0x68
    NSMutableDictionary *_connectParameters;	// 112 = 0x70
    struct NEVirtualInterface_s *_virtualInterface;	// 120 = 0x78
    NEVPNAuthenticationPlugin *_authenticationPlugin;	// 128 = 0x80
    NEVPNTunnelPlugin *_primaryTunnelPlugin;	// 136 = 0x88
    NEVPNTunnelPlugin *_auxiliaryTunnelPlugin;	// 144 = 0x90
    NEVPNProtocol *_protocol;	// 152 = 0x98
    NSMutableDictionary *_cachedStateHandlers;	// 160 = 0xa0
    NEPluginPreferences *_preferences;	// 168 = 0xa8
    NETunnelNetworkSettings *_pluginConfigurationEntities;	// 176 = 0xb0
    NESMAlwaysOnSession *_alwaysOnParent;	// 184 = 0xb8
    NSString *_interfaceName;	// 192 = 0xc0
    NSMutableArray *_setConfigurationCompletionHandlerArray;	// 200 = 0xc8
    CDUnknownBlockType _pluginCompletionHandler;	// 208 = 0xd0
    NEUserNotification *_notification;	// 216 = 0xd8
    NSString *_delegateInterfaceAddress;	// 224 = 0xe0
}

@property(retain) NSString *delegateInterfaceAddress; // @synthesize delegateInterfaceAddress=_delegateInterfaceAddress;
@property(retain) NEUserNotification *notification; // @synthesize notification=_notification;
@property _Bool reassertedByPlugin; // @synthesize reassertedByPlugin=_reassertedByPlugin;
@property _Bool pluginInitInProgress; // @synthesize pluginInitInProgress=_pluginInitInProgress;
@property _Bool didAlertOnDemandPluginDisabled; // @synthesize didAlertOnDemandPluginDisabled=_didAlertOnDemandPluginDisabled;
@property(copy) CDUnknownBlockType pluginCompletionHandler; // @synthesize pluginCompletionHandler=_pluginCompletionHandler;
@property(retain) NSMutableArray *setConfigurationCompletionHandlerArray; // @synthesize setConfigurationCompletionHandlerArray=_setConfigurationCompletionHandlerArray;
@property _Bool isScopedToInterface; // @synthesize isScopedToInterface=_isScopedToInterface;
@property(retain) NSString *interfaceName; // @synthesize interfaceName=_interfaceName;
@property _Bool isSecondaryInterface; // @synthesize isSecondaryInterface=_isSecondaryInterface;
@property __weak NESMAlwaysOnSession *alwaysOnParent; // @synthesize alwaysOnParent=_alwaysOnParent;
@property(retain) NETunnelNetworkSettings *pluginConfigurationEntities; // @synthesize pluginConfigurationEntities=_pluginConfigurationEntities;
@property(readonly) NEPluginPreferences *preferences; // @synthesize preferences=_preferences;
@property(retain) NSMutableDictionary *cachedStateHandlers; // @synthesize cachedStateHandlers=_cachedStateHandlers;
@property(retain) NEVPNProtocol *protocol; // @synthesize protocol=_protocol;
@property(retain) NEVPNTunnelPlugin *auxiliaryTunnelPlugin; // @synthesize auxiliaryTunnelPlugin=_auxiliaryTunnelPlugin;
@property(retain) NEVPNTunnelPlugin *primaryTunnelPlugin; // @synthesize primaryTunnelPlugin=_primaryTunnelPlugin;
@property(retain) NEVPNAuthenticationPlugin *authenticationPlugin; // @synthesize authenticationPlugin=_authenticationPlugin;
@property struct NEVirtualInterface_s *virtualInterface; // @synthesize virtualInterface=_virtualInterface;
@property _Bool sleepOnDisconnect; // @synthesize sleepOnDisconnect=_sleepOnDisconnect;
@property(retain) NSMutableDictionary *connectParameters; // @synthesize connectParameters=_connectParameters;
@property(retain) NESMVPNSessionState *stateHandler; // @synthesize stateHandler=_stateHandler;
@property int sessionType; // @synthesize sessionType=_sessionType;
@property(nonatomic) long long state; // @synthesize state=_state;
@property(retain) NSObject<OS_dispatch_source> *pendingConfigurationChangeTimer; // @synthesize pendingConfigurationChangeTimer=_pendingConfigurationChangeTimer;
@property(copy) CDUnknownBlockType pendingConfigurationChangeCompletionHandler; // @synthesize pendingConfigurationChangeCompletionHandler=_pendingConfigurationChangeCompletionHandler;
@property long long pendingConfigurationChanges; // @synthesize pendingConfigurationChanges=_pendingConfigurationChanges;
@property(retain) NSObject<OS_xpc_object> *establishIPCMessage; // @synthesize establishIPCMessage=_establishIPCMessage;
@property(retain) NSObject<OS_xpc_object> *establishIPCReply; // @synthesize establishIPCReply=_establishIPCReply;
@property(retain) NSObject<OS_dispatch_queue> *tunnelConfigQueue; // @synthesize tunnelConfigQueue=_tunnelConfigQueue;
@property(retain) NSObject<OS_dispatch_source> *routeSocketSource; // @synthesize routeSocketSource=_routeSocketSource;
@property(retain) NSObject<OS_dispatch_source> *routeTimerSource; // @synthesize routeTimerSource=_routeTimerSource;
@property _Bool managerSetDelegateInterface; // @synthesize managerSetDelegateInterface=_managerSetDelegateInterface;
@property _Bool pluginSetDelegateInterface; // @synthesize pluginSetDelegateInterface=_pluginSetDelegateInterface;
@property(copy) NSString *delegateInterface; // @synthesize delegateInterface=_delegateInterface;
- (void).cxx_destruct;	// IMP=0x000000010001ec50
- (void)invalidate;	// IMP=0x000000010001e7cc
- (void)handleInstalledAppsChanged;	// IMP=0x000000010001e158
- (_Bool)prepareConfigurationForStart;	// IMP=0x000000010001e0ac
@property(readonly) NSString *pluginType;
- (_Bool)handleUpdateConfiguration:(id)arg1;	// IMP=0x000000010001da88
- (void)prepareNetwork;	// IMP=0x000000010001d8c4
- (void)setStatus:(int)arg1;	// IMP=0x000000010001d838
- (unsigned char)isInterfaceIPAvailable:(const char *)arg1;	// IMP=0x000000010001d4ec
@property _Bool isSecondaryConnection;
- (int)getReassertTimeout;	// IMP=0x000000010001d2ac
- (void)uninstall;	// IMP=0x000000010001cd58
- (void)setConfiguration;	// IMP=0x000000010001c6bc
- (void)handleNetworkConfigurationChange:(long long)arg1;	// IMP=0x000000010001c4d8
- (void)queueChangesToTunnelConfiguration:(CDUnknownBlockType)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010001bc68
- (void)updateRouteCache;	// IMP=0x000000010001b794
- (_Bool)setupVirtualInterface;	// IMP=0x000000010001a9dc
- (_Bool)setupDNS;	// IMP=0x000000010001a0f8
- (_Bool)setupProxies;	// IMP=0x0000000100019df0
- (void)resetVirtualInterface;	// IMP=0x0000000100019bec
- (void)setDelegateInterfaceAddress;	// IMP=0x0000000100019a04
- (void)handleSetConfigurationResult:(_Bool)arg1;	// IMP=0x00000001000195d4
- (void)popSetConfigurationCompletionHandler:(id)arg1;	// IMP=0x0000000100019274
- (void)pushSetConfigurationCompletionHandler;	// IMP=0x0000000100019094
- (void)installPended;	// IMP=0x0000000100019084
- (void)install;	// IMP=0x0000000100018fdc
- (void)requestUninstall;	// IMP=0x0000000100018f84
- (void)requestInstall;	// IMP=0x0000000100018ea4
- (void)setEndpointInEstablishIPCReply:(id)arg1 forPlugin:(id)arg2;	// IMP=0x0000000100018c50
- (_Bool)shouldSendIPCAttachForPlugin:(id)arg1;	// IMP=0x0000000100018aa8
@property(readonly) _Bool establishIPCPending;
- (void)sendEstablishIPCReply;	// IMP=0x000000010001890c
- (void)plugin:(id)arg1 didAttachIPCWithEndpoint:(id)arg2;	// IMP=0x0000000100018884
- (void)plugin:(id)arg1 didSetConfiguration:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010001852c
- (_Bool)addRoutes:(struct __CFArray *)arg1 excluded:(_Bool)arg2 inetFamily:(int)arg3;	// IMP=0x0000000100018090
- (void)setDelegateInterfaceName:(id)arg1;	// IMP=0x0000000100017d50
- (void)plugin:(id)arg1 didSetDelegateInterfaceName:(id)arg2 andAddress:(id)arg3;	// IMP=0x000000010001799c
- (void)plugin:(id)arg1 didStartWithPID:(int)arg2;	// IMP=0x00000001000176ac
- (struct NEVirtualInterface_s *)plugin:(id)arg1 didRequestVirtualInterfaceOfType:(long long)arg2 maxPendingPackets:(unsigned long long)arg3;	// IMP=0x00000001000173c0
- (void)pluginDidClearConfiguration:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100017200
- (void)plugin:(id)arg1 didSetStatus:(long long)arg2 andDisconnectError:(id)arg3;	// IMP=0x0000000100017170
- (void)plugin:(id)arg1 didSetStatus:(long long)arg2 andStopReason:(int)arg3;	// IMP=0x0000000100016fc8
- (void)plugin:(id)arg1 didSetStatus:(long long)arg2 andError:(long long)arg3;	// IMP=0x0000000100016e44
- (void)pluginDidDetachIPC:(id)arg1;	// IMP=0x0000000100016dd8
- (void)pluginDidAcknowledgeSleep:(id)arg1;	// IMP=0x0000000100016d98
- (void)plugin:(id)arg1 didFailToStartTunnelWithError:(id)arg2;	// IMP=0x0000000100016d34
- (void)plugin:(id)arg1 didFinishAuthenticationWithResults:(id)arg2 status:(int)arg3 andError:(id)arg4;	// IMP=0x0000000100016c80
- (_Bool)plugin:(id)arg1 didSetPersistentData:(struct __CFDictionary *)arg2 ofType:(long long)arg3;	// IMP=0x0000000100016bc4
- (void)pluginDidDispose:(id)arg1;	// IMP=0x0000000100016a6c
- (void)handleNetworkPrepareResult:(id)arg1;	// IMP=0x00000001000169d8
- (void)handleChangeEventForInterface:(id)arg1 newFlags:(unsigned long long)arg2 previousFlags:(unsigned long long)arg3;	// IMP=0x00000001000166e0
- (void)notifyPluginInterfaceChangeEvent:(id)arg1 delegateInterface:(id)arg2 flags:(unsigned long long)arg3;	// IMP=0x0000000100016588
- (void)resetPluginPolicies:(_Bool)arg1 ifHasProxy:(_Bool)arg2;	// IMP=0x0000000100016270
- (_Bool)proxyEnabled:(id)arg1;	// IMP=0x00000001000160e4
- (id)pluginPIDArray;	// IMP=0x0000000100015cd0
- (_Bool)interface:(id)arg1 hasIPAddress:(id)arg2 currentFlags:(unsigned long long)arg3;	// IMP=0x0000000100015af0
- (void)handleUserSwitch;	// IMP=0x0000000100015a30
- (void)handleUserLogout;	// IMP=0x0000000100015970
- (void)handleWakeup;	// IMP=0x0000000100015898
- (void)handleSleepTime:(double)arg1;	// IMP=0x0000000100015710
- (_Bool)handleSleep;	// IMP=0x000000010001564c
- (id)copyExtendedStatus;	// IMP=0x000000010001492c
- (id)copyStatistics;	// IMP=0x000000010001482c
- (void)handleGetInfoMessage:(id)arg1 withType:(int)arg2;	// IMP=0x000000010001475c
- (void)handleEstablishIPCMessage:(id)arg1;	// IMP=0x0000000100014104
- (void)handleStopMessageWithReason:(int)arg1;	// IMP=0x0000000100014094
- (void)handleStartMessage:(id)arg1;	// IMP=0x0000000100014000
- (void)createConnectParametersWithStartMessage:(id)arg1;	// IMP=0x0000000100012d98
- (void)handleInitializeState;	// IMP=0x0000000100012b28
- (void)initializePluginsAlertWhenDisabledwithClass:(Class)arg1 showAlert:(_Bool)arg2 extensionPoints:(id)arg3;	// IMP=0x00000001000119f4
- (void)initializePluginsAlertWhenDisabled:(_Bool)arg1;	// IMP=0x0000000100011928
- (void)addDefaultDropPolicyForPlugin;	// IMP=0x00000001000116dc
- (void)postPluginDisabledAlert;	// IMP=0x00000001000111d8
- (void)dealloc;	// IMP=0x0000000100010e94
- (int)type;	// IMP=0x0000000100010e88
- (id)initWithConfiguration:(id)arg1 andServer:(id)arg2 andProtocol:(id)arg3 andPluginType:(id)arg4 andSessionType:(int)arg5;	// IMP=0x0000000100010bdc

@end

