//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "NESMSession.h"

#import "NWNetworkOfInterestManagerDelegate-Protocol.h"

@class BKSApplicationStateMonitor, NEPathController, NSMutableArray, NSMutableDictionary, NSMutableSet, NSObject, NWInterface, NWMonitor, NWNetworkOfInterest, NWNetworkOfInterestManager;
@protocol OS_dispatch_source;

@interface NESMPathControllerSession : NESMSession <NWNetworkOfInterestManagerDelegate>
{
    _Bool _hasRoamingMonitorTransaction;	// 8 = 0x8
    _Bool _needsRoamingMonitor;	// 9 = 0x9
    _Bool _needsFallbackNotifications;	// 10 = 0xa
    _Bool _fallbackEnabled;	// 11 = 0xb
    _Bool _weakFallback;	// 12 = 0xc
    _Bool _fallbackInUse;	// 13 = 0xd
    _Bool _watchingFallbackNotifications;	// 14 = 0xe
    int _fallbackInUseToken;	// 16 = 0x10
    NEPathController *_controllerConfiguration;	// 24 = 0x18
    NSMutableArray *_ruleMonitors;	// 32 = 0x20
    NSMutableArray *_rulePolicies;	// 40 = 0x28
    NWMonitor *_roamingMonitor;	// 48 = 0x30
    NWInterface *_fallbackInterface;	// 56 = 0x38
    NWInterface *_fallbackFromInterface;	// 64 = 0x40
    NSMutableArray *_foregroundBundleIDs;	// 72 = 0x48
    NSMutableArray *_backgroundBundleIDs;	// 80 = 0x50
    NSMutableSet *_fallbackAllowedBundleIDs;	// 88 = 0x58
    NSMutableDictionary *_fallbackAssertions;	// 96 = 0x60
    NSObject<OS_dispatch_source> *_fallbackNotificationTimer;	// 104 = 0x68
    BKSApplicationStateMonitor *_applicationMonitor;	// 112 = 0x70
    NWNetworkOfInterestManager *_noiManager;	// 120 = 0x78
    NWNetworkOfInterest *_wifiNOI;	// 128 = 0x80
}

+ (id)monitorStatusString:(long long)arg1;	// IMP=0x0000000100043afc
@property(retain) NWNetworkOfInterest *wifiNOI; // @synthesize wifiNOI=_wifiNOI;
@property(retain) NWNetworkOfInterestManager *noiManager; // @synthesize noiManager=_noiManager;
@property(retain) BKSApplicationStateMonitor *applicationMonitor; // @synthesize applicationMonitor=_applicationMonitor;
@property(retain) NSObject<OS_dispatch_source> *fallbackNotificationTimer; // @synthesize fallbackNotificationTimer=_fallbackNotificationTimer;
@property _Bool watchingFallbackNotifications; // @synthesize watchingFallbackNotifications=_watchingFallbackNotifications;
@property int fallbackInUseToken; // @synthesize fallbackInUseToken=_fallbackInUseToken;
@property _Bool fallbackInUse; // @synthesize fallbackInUse=_fallbackInUse;
@property(retain) NSMutableDictionary *fallbackAssertions; // @synthesize fallbackAssertions=_fallbackAssertions;
@property(retain) NSMutableSet *fallbackAllowedBundleIDs; // @synthesize fallbackAllowedBundleIDs=_fallbackAllowedBundleIDs;
@property(retain) NSMutableArray *backgroundBundleIDs; // @synthesize backgroundBundleIDs=_backgroundBundleIDs;
@property(retain) NSMutableArray *foregroundBundleIDs; // @synthesize foregroundBundleIDs=_foregroundBundleIDs;
@property(retain) NWInterface *fallbackFromInterface; // @synthesize fallbackFromInterface=_fallbackFromInterface;
@property(retain) NWInterface *fallbackInterface; // @synthesize fallbackInterface=_fallbackInterface;
@property _Bool weakFallback; // @synthesize weakFallback=_weakFallback;
@property _Bool fallbackEnabled; // @synthesize fallbackEnabled=_fallbackEnabled;
@property _Bool needsFallbackNotifications; // @synthesize needsFallbackNotifications=_needsFallbackNotifications;
@property _Bool needsRoamingMonitor; // @synthesize needsRoamingMonitor=_needsRoamingMonitor;
@property _Bool hasRoamingMonitorTransaction; // @synthesize hasRoamingMonitorTransaction=_hasRoamingMonitorTransaction;
@property(retain) NWMonitor *roamingMonitor; // @synthesize roamingMonitor=_roamingMonitor;
@property(retain) NSMutableArray *rulePolicies; // @synthesize rulePolicies=_rulePolicies;
@property(retain) NSMutableArray *ruleMonitors; // @synthesize ruleMonitors=_ruleMonitors;
@property(retain) NEPathController *controllerConfiguration; // @synthesize controllerConfiguration=_controllerConfiguration;
- (void).cxx_destruct;	// IMP=0x00000001000464a4
- (void)unassertFallbackForClient:(id)arg1;	// IMP=0x0000000100046108
- (void)assertFallbackForClient:(id)arg1 process:(id)arg2;	// IMP=0x0000000100045fec
@property(readonly) _Bool weakAdvisory;
@property(readonly) NWInterface *predictedInterface;
@property(readonly) NWInterface *advisoryInterface;
- (void)updatePolicies:(_Bool)arg1 agent:(_Bool)arg2;	// IMP=0x00000001000459b8
- (void)updateFallbackInUse;	// IMP=0x00000001000456f4
- (void)postFallbackInUseNotificationWithDelay:(unsigned long long)arg1;	// IMP=0x00000001000456c8
- (void)postFallbackInUseNotification;	// IMP=0x00000001000454a0
- (id)copyUUIDsForBundleIDArray:(id)arg1;	// IMP=0x0000000100045200
- (id)currentFallbackBundleIDs;	// IMP=0x0000000100044f00
- (id)fallbackExceptionBundleIDsForce:(_Bool)arg1;	// IMP=0x0000000100044c58
- (id)currentRouteRules:(id)arg1 defaultPathRule:(id)arg2;	// IMP=0x0000000100044890
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x0000000100043b50
- (void)dealloc;	// IMP=0x0000000100043ab0
- (void)uninstall;	// IMP=0x0000000100043a24
- (void)install;	// IMP=0x0000000100043904
- (void)didStopTrackingAllNOIs:(id)arg1;	// IMP=0x000000010004374c
- (void)didStopTrackingNOI:(id)arg1;	// IMP=0x0000000100043610
- (void)didStartTrackingNOI:(id)arg1;	// IMP=0x00000001000434d0
- (void)removeFallbackNotifications;	// IMP=0x00000001000432c8
- (void)setupFallbackNotifications;	// IMP=0x0000000100042f84
- (void)cancelFallbackNotificationTimer;	// IMP=0x0000000100042f34
- (void)resetFallbackNotificationTimeout:(unsigned long long)arg1;	// IMP=0x0000000100042ed0
- (void)createFallbackNotificationTimer;	// IMP=0x0000000100042dd4
- (void)stopWatchingApplications;	// IMP=0x0000000100042d24
- (void)startWatchingApplications;	// IMP=0x00000001000428f8
- (void)appNotification:(id)arg1;	// IMP=0x0000000100042504
- (void)checkBundleIDsForFallback;	// IMP=0x0000000100041ddc
- (void)appNotificationFromAnyQueue:(id)arg1;	// IMP=0x0000000100041d14
- (void)teardownRoamingMonitor;	// IMP=0x0000000100041c00
- (void)setupRoamingMonitor;	// IMP=0x00000001000419c8
- (_Bool)handleUpdateConfiguration:(id)arg1;	// IMP=0x0000000100041894
- (void)handleStopMessageWithReason:(int)arg1;	// IMP=0x0000000100041684
- (void)handleStartMessage:(id)arg1;	// IMP=0x0000000100041608
- (_Bool)shouldBeIdleForStatus:(int)arg1;	// IMP=0x00000001000415ec
- (int)type;	// IMP=0x00000001000415e4
- (id)initWithConfiguration:(id)arg1 andServer:(id)arg2;	// IMP=0x000000010004146c
- (_Bool)configurationNeedsFallbackNotifications;	// IMP=0x000000010004139c
- (_Bool)configurationNeedsRoamingMonitorIgnoreFallback:(_Bool)arg1;	// IMP=0x00000001000411ac
@property(readonly) long long fallbackFlags;

@end

