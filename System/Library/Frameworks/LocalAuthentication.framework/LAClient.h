/*
* This header is generated by classdump-dyld 1.0
* on Saturday, August 24, 2019 at 9:46:21 PM Mountain Standard Time
* Operating System: Version 12.4 (Build 16M568)
* Image Source: /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/LAContextXPC.h>
#import <libobjc.A.dylib/LAContextCallbackXPC.h>

@protocol LAContextXPC, OS_dispatch_queue, LAUIDelegate;
@class NSXPCConnection, NSError, NSData, NSMutableArray, LACachedExternalizedContext, NSObject;

@interface LAClient : NSObject <LAContextXPC, LAContextCallbackXPC> {

	id<LAContextXPC> _remoteContext;
	NSXPCConnection* _serverConnection;
	NSError* _permanentError;
	NSData* _existingContext;
	NSMutableArray* _callInvalidationBlocks;
	BOOL _shouldRecoverConnection;
	LACachedExternalizedContext* _cachedExternalizedContext;
	NSObject*<OS_dispatch_queue> _uncork_queue;
	id<LAUIDelegate> _uiDelegate;

}

@property (nonatomic,readonly) NSData * externalizedContext; 
@property (assign,nonatomic,__weak) id<LAUIDelegate> uiDelegate;              //@synthesize uiDelegate=_uiDelegate - In the implementation block
+(void)_performInvalidationBlocks:(id)arg1 ;
+(id)_recoveryQueue;
+(id)_queue;
-(void)prearmTouchIdWithReply:(/*^block*/id)arg1 ;
-(void)_scheduleRecovery;
-(void)connectToServerWithInterruptionHandler:(/*^block*/id)arg1 ;
-(BOOL)_setPermanentError:(id)arg1 ;
-(void)_serializedInvalidateWithMessage:(id)arg1 ;
-(void)_performCallIdCore:(/*^block*/id)arg1 finally:(/*^block*/id)arg2 ;
-(void)_recoverConnection;
-(void)_performCallId:(/*^block*/id)arg1 finally:(/*^block*/id)arg2 ;
-(id)_updateOptions:(id)arg1 ;
-(void)evaluatePolicy:(long long)arg1 options:(id)arg2 uiDelegate:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)evaluateACL:(id)arg1 operation:(id)arg2 options:(id)arg3 uiDelegate:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)failProcessedEvent:(long long)arg1 failureError:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)_performCallBool:(/*^block*/id)arg1 finally:(/*^block*/id)arg2 ;
-(void)retryProcessedEvent:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)resetProcessedEvent:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)setCredential:(id)arg1 forProcessedEvent:(long long)arg2 credentialType:(long long)arg3 reply:(/*^block*/id)arg4 ;
-(void)isCredentialSet:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)setCredential:(id)arg1 type:(long long)arg2 reply:(/*^block*/id)arg3 ;
-(void)serverPropertyForOption:(long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)setServerPropertyForOption:(long long)arg1 value:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)externalizedContextWithReply:(/*^block*/id)arg1 ;
-(void)authMethodWithReply:(/*^block*/id)arg1 ;
-(void)setShowingCoachingHint:(BOOL)arg1 event:(long long)arg2 reply:(/*^block*/id)arg3 ;
-(void)invalidatedWithError:(id)arg1 ;
-(id)initWithExistingContext:(id)arg1 ;
-(void)invalidateWithMessage:(id)arg1 ;
-(void)evaluateACL:(id)arg1 operation:(id)arg2 options:(id)arg3 reply:(/*^block*/id)arg4 ;
-(id)serverPropertyForOption:(long long)arg1 error:(id*)arg2 ;
-(BOOL)setServerPropertyForOption:(long long)arg1 value:(id)arg2 error:(id*)arg3 ;
-(NSData *)externalizedContext;
-(void)setUiDelegate:(id<LAUIDelegate>)arg1 ;
-(id<LAUIDelegate>)uiDelegate;
-(void)resetWithReply:(/*^block*/id)arg1 ;
-(void)evaluatePolicy:(long long)arg1 options:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)dealloc;
@end

