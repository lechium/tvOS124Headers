//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSManagedObject.h"

#import "IMMetricsDataSource.h"

@class NSSet, NSString;

@interface MTPodcast : NSManagedObject <IMMetricsDataSource>
{
}

+ (long long)storeCollectionIdForRedirectURL:(id)arg1;	// IMP=0x000000010001e428
+ (id)redirectURLForStoreCollectionId:(long long)arg1;	// IMP=0x000000010001e30c
+ (_Bool)isRedirectURL:(id)arg1;	// IMP=0x000000010001e25c
+ (void)setRemovePlayedEpisodesSetting:(long long)arg1 forPodcastUuid:(id)arg2;	// IMP=0x000000010001d8bc
+ (double)timeIntervalForUpdate:(long long)arg1;	// IMP=0x000000010001d814
+ (long long)updateIntervalDefaultValue;	// IMP=0x000000010001d7b4
+ (id)productURLForStoreCollectionId:(long long)arg1 storeTrackId:(long long)arg2;	// IMP=0x000000010001d4d0
+ (unsigned long long)totalUnplayedCount;	// IMP=0x000000010001cd3c
+ (id)insertNewPodcastInManagedObjectContext:(id)arg1 subscribed:(_Bool)arg2 feedUrl:(id)arg3 title:(id)arg4 author:(id)arg5 provider:(id)arg6 category:(id)arg7 imageUrl:(id)arg8 description:(id)arg9;	// IMP=0x000000010001c90c
+ (id)insertNewPodcastInManagedObjectContext:(id)arg1 subscribed:(_Bool)arg2 feedUrl:(id)arg3 title:(id)arg4 author:(id)arg5 provider:(id)arg6 category:(id)arg7 imageUrl:(id)arg8 description:(id)arg9 adamId:(long long)arg10;	// IMP=0x000000010001c790
+ (id)latestEpisodeUuidForPodcastUuid:(id)arg1 ctx:(id)arg2;	// IMP=0x0000000100074238
+ (id)podcastUuidForEpisodeUuid:(id)arg1 ctx:(id)arg2;	// IMP=0x0000000100073f6c
+ (id)podcastUuidForFeedUrl:(id)arg1 ctx:(id)arg2;	// IMP=0x0000000100073ec0
+ (id)podcastUuidForFeedUrlString:(id)arg1 ctx:(id)arg2;	// IMP=0x0000000100073ce8
+ (id)predicateForPodcastUuids:(id)arg1;	// IMP=0x0000000100073ca8
+ (id)predicateForAllPodcasts;	// IMP=0x0000000100073c68
+ (int)autoDownloadDefaultValue;	// IMP=0x0000000100073c08
+ (id)sortDescriptorsForNewestToOldest:(_Bool)arg1;	// IMP=0x000000010007361c
+ (id)sortDescriptorsForNewestOnTop;	// IMP=0x0000000100073470
+ (id)sortDescriptorsForOldestOnTop;	// IMP=0x000000010007330c
+ (id)allPossibleEpisodeListSortOrderProperties;	// IMP=0x0000000100072d7c
+ (long long)deletePlayedEpisodesDefaultValue;	// IMP=0x0000000100072b54
+ (long long)episodeLimitDefaultValue;	// IMP=0x0000000100072a94
+ (id)_imageFetchQueue;	// IMP=0x00000001000aab50
+ (void)_downloadArtworkForPodcastUuid:(id)arg1;	// IMP=0x00000001000aaad4
+ (id)_defaultPlaceholderArtworkWithSize:(struct CGSize)arg1;	// IMP=0x00000001000aaa54
+ (void)fetchArtworkForPodcastUuid:(id)arg1 size:(struct CGSize)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00000001000aa604
+ (id)artworkForPodcastUuid:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x00000001000aa524
+ (id)predicateForPodcastStoreId:(long long)arg1;	// IMP=0x000000010013f094
+ (id)predicateForPodcastUUID:(id)arg1;	// IMP=0x000000010013f050
+ (id)predicateForPodcastWithTitle:(id)arg1;	// IMP=0x000000010013efb8
+ (id)predicateForPodcastWithFeedUrl:(id)arg1;	// IMP=0x000000010013ee10
+ (id)predicateForExcludingExplicitBasedOnSetting;	// IMP=0x000000010013ed90
+ (id)predicateForUpdateInterval:(long long)arg1;	// IMP=0x000000010013ec7c
+ (id)predicateForUpdatablePodcasts;	// IMP=0x000000010013eb04
+ (id)predicateForAutoDownloadType:(int)arg1;	// IMP=0x000000010013eac0
+ (id)predicateForAutoDownloadEnabled;	// IMP=0x000000010013e990
+ (id)predicateForOrphanedFromCloud:(_Bool)arg1;	// IMP=0x000000010013e900
+ (id)predicateForSubscribedAndNotHidden:(_Bool)arg1;	// IMP=0x000000010013e860
+ (id)predicateForSubscribed:(_Bool)arg1;	// IMP=0x000000010013e7d0
+ (id)userDefaultPropertiesAffectingPredicates;	// IMP=0x000000010013e718
+ (id)sortDescriptorsForTitle;	// IMP=0x000000010014a2c0
+ (id)sortDescriptorsForDateAdded;	// IMP=0x000000010014a1c4
+ (id)sortDescriptorsForRecentlyUpdated;	// IMP=0x000000010014a0c8
+ (id)sortDescriptorsForLastDatePlayed;	// IMP=0x000000010014a014
+ (id)sortDescriptorsForAllPodcasts;	// IMP=0x0000000100149fb8
+ (id)sortDescriptorsForManualOrder;	// IMP=0x0000000100149f04
- (unsigned long long)countOfMyEpisodes;	// IMP=0x000000010001e524
- (id)bestFeedURLExcludingRedirectURL:(_Bool)arg1;	// IMP=0x000000010001de48
- (id)redirectURL;	// IMP=0x000000010001de0c
- (id)countOfUnplayedEpisodes;	// IMP=0x000000010001dd78
- (id)countOfNewEpisodes;	// IMP=0x000000010001dce4
- (id)colorTheme;	// IMP=0x000000010001dc50
- (void)updateLastTouchDate;	// IMP=0x000000010001dc14
- (void)resetGoDark;	// IMP=0x000000010001db8c
@property(nonatomic, getter=isAuthenticatedDark) _Bool authenticatedDark;
@property(readonly, nonatomic, getter=isPastAutodownloadDark) _Bool autodownloadDark;
@property(readonly, nonatomic, getter=isPastFeedDark) _Bool feedDark;
@property(readonly, nonatomic, getter=isDark) _Bool dark;
@property(nonatomic) _Bool orphanedFromCloud; // @dynamic orphanedFromCloud;
- (id)twitterShareURL;	// IMP=0x000000010001d708
- (id)shareURL;	// IMP=0x000000010001d69c
- (id)bestAvailableStoreCleanURL;	// IMP=0x000000010001d2e4
- (_Bool)isSharable;	// IMP=0x000000010001d2a8
- (id)bestDescription;	// IMP=0x000000010001d23c
- (void)updateEpisodesMetadataIdentifiers;	// IMP=0x000000010001d11c
@property(nonatomic) _Bool subscribed; // @dynamic subscribed;
@property(retain, nonatomic) NSString *updatedFeedURL; // @dynamic updatedFeedURL;
@property(retain, nonatomic) NSString *title; // @dynamic title;
- (id)displayURL;	// IMP=0x0000000100077be0
- (id)nextEpisodeToPlay;	// IMP=0x0000000100077b48
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 limit:(unsigned long long)arg6;	// IMP=0x0000000100077730
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 limit:(unsigned long long)arg5;	// IMP=0x000000010007771c
- (id)episodesInSeasonNumber:(long long)arg1 oldestEpisodesFirst:(_Bool)arg2;	// IMP=0x0000000100077704
- (id)episodesInSeasonNumber:(long long)arg1;	// IMP=0x0000000100077584
- (id)episodesInLatestSeason;	// IMP=0x0000000100077410
- (long long)latestSeasonNumber;	// IMP=0x000000010007715c
- (id)seasonNumbers;	// IMP=0x0000000100076f50
- (_Bool)hasMultipleSeasons;	// IMP=0x0000000100076f00
- (_Bool)hasAtLeastOneSeason;	// IMP=0x0000000100076d60
- (id)_fetchRequestForDistinctSeasons;	// IMP=0x0000000100076b84
- (id)oldestEpisodeInLatestSeasonOrShowExcludingPlayed:(_Bool)arg1 excludeExplicit:(long long)arg2 excludeStreaming:(long long)arg3;	// IMP=0x0000000100076950
- (id)oldestEpisodeInLatestSeasonOrShowExcludingPlayed:(_Bool)arg1 excludeExplicit:(long long)arg2;	// IMP=0x0000000100076940
- (id)oldestEpisodeInLatestSeasonOrShow;	// IMP=0x000000010007692c
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 excludingEpisodeUuid:(id)arg6 episodeTypeFilter:(long long)arg7;	// IMP=0x0000000100076304
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludingEpisodeUuid:(id)arg5 episodeTypeFilter:(long long)arg6;	// IMP=0x00000001000762d0
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 episodeTypeFilter:(long long)arg5;	// IMP=0x00000001000762bc
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5 excludingEpisodeUuid:(id)arg6;	// IMP=0x0000000100076294
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludingEpisodeUuid:(id)arg5;	// IMP=0x0000000100076280
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4 excludeStreaming:(long long)arg5;	// IMP=0x0000000100076270
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3 excludeExplicit:(long long)arg4;	// IMP=0x0000000100076260
- (id)_latestOrOldestEpisode:(_Bool)arg1 restrictToUserEpisodes:(_Bool)arg2 excludePlayed:(_Bool)arg3;	// IMP=0x0000000100076250
- (id)newestEpisodeUuid;	// IMP=0x00000001000761b8
- (id)oldestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x0000000100076198
- (id)oldestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1;	// IMP=0x0000000100076188
- (id)oldestUserEpisodeExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x0000000100076168
- (id)oldestUserEpisodeExcludingExplicit:(long long)arg1;	// IMP=0x0000000100076158
- (id)oldestUserEpisode;	// IMP=0x0000000100076148
- (id)oldestEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludingStreaming:(long long)arg2;	// IMP=0x0000000100076128
- (id)oldestEpisodeNotPlayedExcludingExplicit:(long long)arg1;	// IMP=0x0000000100076118
- (id)oldestEpisodeNotPlayed;	// IMP=0x0000000100076108
- (id)oldestFullEpisode;	// IMP=0x00000001000760e8
- (id)oldestEpisodeExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x00000001000760c8
- (id)oldestEpisodeExcludingExplicit:(long long)arg1;	// IMP=0x00000001000760b8
- (id)oldestEpisode;	// IMP=0x00000001000760a8
- (id)newestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x0000000100076088
- (id)newestUserEpisodeNotPlayedExcludingExplicit:(long long)arg1;	// IMP=0x0000000100076078
- (id)newestUserEpisodeExcludingExplicit:(long long)arg1;	// IMP=0x000000010007605c
- (id)newestEpisodeNotPlayedExcludingExplicit:(long long)arg1 excludeStreaming:(long long)arg2;	// IMP=0x000000010007603c
- (id)newestEpisodeNotPlayedExcludingExplicit:(long long)arg1;	// IMP=0x000000010007602c
- (id)newestFullEpisode;	// IMP=0x000000010007600c
- (id)newestEpisode;	// IMP=0x0000000100075ff8
- (id)newestEpisodeExcludingUuid:(id)arg1 excludeExplicit:(long long)arg2 excludeStreaming:(long long)arg3;	// IMP=0x0000000100075fd4
- (id)newestEpisodeExcludingUuid:(id)arg1 excludeExplicit:(long long)arg2;	// IMP=0x0000000100075fc4
- (id)firstUserEpisodeNotPlayed;	// IMP=0x0000000100075b74
- (id)_episodesNextToEpisode:(id)arg1 after:(_Bool)arg2 usePlayOrder:(_Bool)arg3 restrictToUserEpisodes:(_Bool)arg4 excludePlayed:(_Bool)arg5 excludeExplicit:(long long)arg6 excludeStreaming:(long long)arg7 limit:(long long)arg8;	// IMP=0x000000010007552c
- (id)_episodesNextToEpisode:(id)arg1 after:(_Bool)arg2 usePlayOrder:(_Bool)arg3 restrictToUserEpisodes:(_Bool)arg4 excludePlayed:(_Bool)arg5 excludeExplicit:(long long)arg6 limit:(long long)arg7;	// IMP=0x0000000100075500
- (id)_episodeNextToEpisode:(id)arg1 after:(_Bool)arg2 usePlayOrder:(_Bool)arg3 restrictToUserEpisodes:(_Bool)arg4 excludePlayed:(_Bool)arg5 excludeExplicit:(long long)arg6 excludeStreaming:(long long)arg7;	// IMP=0x0000000100075498
- (id)_episodeNextToEpisode:(id)arg1 after:(_Bool)arg2 usePlayOrder:(_Bool)arg3 restrictToUserEpisodes:(_Bool)arg4 excludePlayed:(_Bool)arg5 excludeExplicit:(long long)arg6;	// IMP=0x0000000100075470
- (id)_episodeBeforeEpisode:(id)arg1 usePlayOrder:(_Bool)arg2 restrictToUserEpisodes:(_Bool)arg3 excludePlayed:(_Bool)arg4;	// IMP=0x0000000100075450
- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(_Bool)arg2 restrictToUserEpisodes:(_Bool)arg3 excludePlayed:(_Bool)arg4 excludeExplicit:(long long)arg5 excludeStreaming:(long long)arg6;	// IMP=0x0000000100075410
- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(_Bool)arg2 restrictToUserEpisodes:(_Bool)arg3 excludePlayed:(_Bool)arg4 excludeExplicit:(long long)arg5;	// IMP=0x0000000100075400
- (id)_episodeAfterEpisode:(id)arg1 usePlayOrder:(_Bool)arg2 restrictToUserEpisodes:(_Bool)arg3 excludePlayed:(_Bool)arg4;	// IMP=0x00000001000753f0
- (id)episodeAfterEpisode:(id)arg1;	// IMP=0x00000001000753d8
- (id)episodeOlderThanEpisode:(id)arg1;	// IMP=0x00000001000753c0
- (id)episodeNewerThanEpisode:(id)arg1;	// IMP=0x00000001000753a8
- (id)episodeNewerThanEpisode:(id)arg1 excludePlayed:(_Bool)arg2;	// IMP=0x0000000100075390
- (id)userEpisodeNewerThanEpisode:(id)arg1 excludePlayed:(_Bool)arg2 excludeExplicit:(long long)arg3 excludeStreaming:(long long)arg4;	// IMP=0x0000000100075370
- (id)userEpisodeNewerThanEpisode:(id)arg1 excludePlayed:(_Bool)arg2 excludeExplicit:(long long)arg3;	// IMP=0x0000000100075360
- (id)episodesAfterEpisode:(id)arg1 restrictToUserEpisodes:(_Bool)arg2;	// IMP=0x0000000100075324
- (id)userEpisodesAfterEpisode:(id)arg1;	// IMP=0x00000001000752e8
- (id)userEpisodeAfterEpisode:(id)arg1;	// IMP=0x00000001000752d0
- (id)mostRecentlyManuallyAddedEpisode;	// IMP=0x0000000100074ecc
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(_Bool)arg2 excludeExplicit:(long long)arg3 excludeStreaming:(long long)arg4;	// IMP=0x00000001000747d8
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(_Bool)arg2 excludeExplicit:(long long)arg3;	// IMP=0x00000001000747c8
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1 restrictedToLibrary:(_Bool)arg2;	// IMP=0x00000001000747b8
- (id)mostRecentlyPlayedEpisodeExcludingEpisodeUuid:(id)arg1;	// IMP=0x00000001000747a8
- (id)mostRecentlyPlayedEpisodeRestrictedToLibrary:(_Bool)arg1;	// IMP=0x0000000100074794
- (id)mostRecentlyPlayedEpisodeExcludingExplicit:(long long)arg1 excludingStreaming:(long long)arg2;	// IMP=0x0000000100074778
- (id)mostRecentlyPlayedEpisodeExcludingExplicit:(long long)arg1;	// IMP=0x0000000100074760
- (id)mostRecentlyPlayedEpisode;	// IMP=0x0000000100074750
- (id)episodeToResume;	// IMP=0x0000000100074554
- (int)autoDownloadResolvedValue;	// IMP=0x0000000100073bb4
- (_Bool)autodownloadDefault;	// IMP=0x0000000100073ba4
- (_Bool)updateCursorPosition:(_Bool)arg1;	// IMP=0x0000000100073904
@property(nonatomic) _Bool playbackNewestToOldest;
- (id)sortDescriptorsForPlayOrder;	// IMP=0x00000001000735d4
- (id)sortDescriptorsForSortOrder;	// IMP=0x00000001000730bc
@property(nonatomic) _Bool sortAscending;
@property(nonatomic) long long showTypeSetting; // @dynamic showTypeSetting;
- (_Bool)deletePlayedEpisodesResolvedValue;	// IMP=0x0000000100072af4
- (long long)episodeLimitResolvedValue;	// IMP=0x0000000100072a40
- (_Bool)isSerialShowTypeInFeed;	// IMP=0x00000001000729e0
- (long long)showTypeInFeedResolvedValue;	// IMP=0x0000000100072984
- (long long)showTypeResolvedValue;	// IMP=0x0000000100072960
@property(nonatomic) long long podcastPID; // @dynamic podcastPID;
- (_Bool)_stateForFlag:(long long)arg1;	// IMP=0x0000000100072868
@property(retain, nonatomic) NSString *webpageURL; // @dynamic webpageURL;
@property(retain, nonatomic) NSString *showTypeInFeed; // @dynamic showTypeInFeed;
@property(retain, nonatomic) NSString *imageURL; // @dynamic imageURL;
@property(nonatomic) double updateAvg; // @dynamic updateAvg;
@property(nonatomic) double updateStdDev; // @dynamic updateStdDev;
@property(nonatomic) double feedChangedDate; // @dynamic feedChangedDate;
@property(retain, nonatomic) NSString *itemDescription; // @dynamic itemDescription;
@property(retain, nonatomic) NSString *author; // @dynamic author;
@property(nonatomic) long long flags; // @dynamic flags;
- (void)_setFlag:(long long)arg1 state:(_Bool)arg2;	// IMP=0x0000000100072038
@property(nonatomic) _Bool needsArtworkUpdate;
@property(nonatomic) double modifiedDate; // @dynamic modifiedDate;
@property(nonatomic) double lastDatePlayed; // @dynamic lastDatePlayed;
@property(nonatomic) _Bool isExplicit;
@property(nonatomic) _Bool importing;
@property(nonatomic) long long deletePlayedEpisodes; // @dynamic deletePlayedEpisodes;
@property(nonatomic) _Bool hasBeenSynced;
- (void)markPlaylistsForUpdate;	// IMP=0x0000000100071c00
- (id)currentFeedURL;	// IMP=0x0000000100071ab4
- (void)fetchArtworkWithSize:(struct CGSize)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000001000aa9b4
- (id)artworkWithSize:(struct CGSize)arg1;	// IMP=0x00000001000aa928
- (id)metricsAdditionalData;	// IMP=0x0000000100185520
- (id)metricsContentIdentifier;	// IMP=0x00000001001853ac

// Remaining properties
@property(nonatomic) double addedDate; // @dynamic addedDate;
@property(readonly, nonatomic) _Bool autoDownload; // @dynamic autoDownload;
@property(nonatomic) int autoDownloadType; // @dynamic autoDownloadType;
@property(retain, nonatomic) NSString *category; // @dynamic category;
@property(nonatomic) long long darkCount; // @dynamic darkCount;
@property(nonatomic) long long darkCountLocal; // @dynamic darkCountLocal;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(nonatomic) double downloadedDate; // @dynamic downloadedDate;
@property(nonatomic) long long episodeLimit; // @dynamic episodeLimit;
@property(retain, nonatomic) NSSet *episodes; // @dynamic episodes;
@property(retain, nonatomic) NSString *feedURL; // @dynamic feedURL;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidden; // @dynamic hidden;
@property(nonatomic) long long keepEpisodes; // @dynamic keepEpisodes;
@property(nonatomic) double lastStoreEpisodesInfoCheckDate; // @dynamic lastStoreEpisodesInfoCheckDate;
@property(nonatomic) double lastStorePodcastInfoCheckDate; // @dynamic lastStorePodcastInfoCheckDate;
@property(nonatomic) double lastTouchDate; // @dynamic lastTouchDate;
@property(retain, nonatomic) NSString *nextEpisodeUuid; // @dynamic nextEpisodeUuid;
@property(nonatomic) _Bool notifications; // @dynamic notifications;
@property(retain, nonatomic) NSSet *playlistSettings; // @dynamic playlistSettings;
@property(retain, nonatomic) NSSet *playlists; // @dynamic playlists;
@property(retain, nonatomic) NSString *provider; // @dynamic provider;
@property(nonatomic) _Bool showPlacardForOrphanedFromCloud; // @dynamic showPlacardForOrphanedFromCloud;
@property(nonatomic) _Bool showPlacardForRemovePlayedEpisodes; // @dynamic showPlacardForRemovePlayedEpisodes;
@property(nonatomic) _Bool showPlacardForSavedEpisodes; // @dynamic showPlacardForSavedEpisodes;
@property(nonatomic) long long sortOrder; // @dynamic sortOrder;
@property(retain, nonatomic) NSString *storeCleanURL; // @dynamic storeCleanURL;
@property(nonatomic) long long storeCollectionId; // @dynamic storeCollectionId;
@property(retain, nonatomic) NSString *storeShortURL; // @dynamic storeShortURL;
@property(readonly) Class superclass;
@property(nonatomic) long long updateInterval; // @dynamic updateInterval;
@property(nonatomic) double updatedDate; // @dynamic updatedDate;
@property(retain, nonatomic) NSString *uuid; // @dynamic uuid;

@end

